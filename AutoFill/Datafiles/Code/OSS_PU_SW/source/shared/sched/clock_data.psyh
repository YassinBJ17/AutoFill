/* --------------------------------------------------------------------------
 *                        SAFRAN Electronics & Defense
 *                   Reproduction and disclosure forbidden.
 * -------------------------------------------------------------------------- */

#ifndef CLOCK_DATA_PSYH
#define CLOCK_DATA_PSYH

/* ---------- include required interface: ----------------------------------- */
#include <asterios.h>

/* ---------- Linker command file symbol: ----------------------------------- */

/* ---------- provided define constants: ------------------------------------ */

/* ---------- provided types: ----------------------------------------------- */

/* ---------- provided constants: ------------------------------------------- */
/* Clocks according to the use of the internal source or the external source */
/* If the internal source is used */
#if USE_INT_SRC == 1
/* Define the internal source */
#define SOURCE realtime

/* 1 ms clock with internal source */
clock clock_1ms = ast_realtime_ms;
clock clock_500us = realtime;

/* Else, if the external source is used */
#else
/* Define the external source */
#define SOURCE xt_source
source xt_source;

/* 1 ms clock with external source */
clock clock_1ms = 20 * xt_source;
clock clock_500us = 10 * xt_source;
#endif

/* 10 ms clock */
clock clock_10ms = 10 * clock_1ms;

/* 10 ms clock with an offset of 2 ms */
clock clock_10ms_offset_2ms = 10 * clock_1ms + 2;

/* 10 ms clock with an offset of 3 ms */
clock clock_10ms_offset_3ms = 10 * clock_1ms + 3;

/* 10 ms clock with an offset of 4 ms */
clock clock_10ms_offset_4ms = 10 * clock_1ms + 4;

/* 10 ms clock with an offset of 7 ms */
clock clock_10ms_offset_7ms = 10 * clock_1ms + 7;

/* 10 ms clock with an offset of 8 ms */
clock clock_10ms_offset_8ms = 10 * clock_1ms + 8;



/* 1 ms duration */
duration duration_1ms = clockperiod(clock_1ms);

/* 2 ms duration */
duration duration_2ms = 2 * clockperiod(clock_1ms);

/* 3 ms duration */
duration duration_3ms = 3 * clockperiod(clock_1ms);

/* 4 ms duration */
duration duration_4ms = 4 * clockperiod(clock_1ms);

/* ---------- provided data: ------------------------------------------------ */

/* ---------- provided operations: ------------------------------------------ */

#endif /* CLOCK_DATA_PSYH */
