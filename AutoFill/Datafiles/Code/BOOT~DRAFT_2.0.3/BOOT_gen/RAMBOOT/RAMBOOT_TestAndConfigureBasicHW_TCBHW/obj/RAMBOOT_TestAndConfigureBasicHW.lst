                               File: RAMBOOT_Te Errors    0
  Location Pl  Code            Line 	Source Statement
  00000000 00                     1 	   .file "RAMBOOT_TestAndConfigureBasicHW.s"
  00000000 00                     2 	   .include "RAMBOOT_Registers.inc"
  00000000 00                     1I	; Save and restore registers
  00000000 00                     2I	.set    REG_SRR0    ,26
  00000000 00                     3I	.set    REG_SRR1    ,27
  00000000 00                     4I	
  00000000 00                     5I	; Interrupt vector registers
  00000000 00                     6I	.set    REG_IVPR    ,63
  00000000 00                     7I	.set    REG_IVOR0   ,400
  00000000 00                     8I	.set    REG_IVOR1   ,401
  00000000 00                     9I	.set    REG_IVOR2   ,402
  00000000 00                    10I	.set    REG_IVOR3   ,403
  00000000 00                    11I	.set    REG_IVOR4   ,404
  00000000 00                    12I	.set    REG_IVOR5   ,405
  00000000 00                    13I	.set    REG_IVOR6   ,406
  00000000 00                    14I	.set    REG_IVOR7   ,407
  00000000 00                    15I	.set    REG_IVOR8   ,408
  00000000 00                    16I	.set    REG_IVOR9   ,409
  00000000 00                    17I	.set    REG_IVOR10  ,410
  00000000 00                    18I	.set    REG_IVOR11  ,411
  00000000 00                    19I	.set    REG_IVOR12  ,412
  00000000 00                    20I	.set    REG_IVOR13  ,413
  00000000 00                    21I	.set    REG_IVOR14  ,414
  00000000 00                    22I	.set    REG_IVOR15  ,415
  00000000 00                    23I	.set    REG_IVOR32  ,528
  00000000 00                    24I	.set    REG_IVOR33  ,529
  00000000 00                    25I	.set    REG_IVOR34  ,530
  00000000 00                    26I	.set    REG_IVOR35  ,531
  00000000 00                    27I	
  00000000 00                    28I	; Hardware Implementation Dependent registers
  00000000 00                    29I	.set    REG_HID0    ,1008
  00000000 00                    30I	.set    REG_HID1    ,1009
  00000000 00                    31I	
  00000000 00                    32I	; Branch Unit Control and Status Register
  00000000 00                    33I	.set    REG_BUCSR   ,1013
  00000000 00                    34I	
  00000000 00                    35I	; Time base registers
  00000000 00                    36I	.set    REG_TBL         ,284        # Timer Base Lower bits
  00000000 00                    37I	.set    REG_TBU         ,285        # Timer Base Upper bits
  00000000 00                    38I	.set    REG_TSR         ,336        # Timer Status Register
  00000000 00                    39I	.set    REG_TSR_DIS_DIT ,0x08000000 # Decrementer Interrupt Status bit of TSR register
  00000000 00                    40I	.set    REG_TCR         ,340        # Timer Control Register
  00000000 00                    41I	.set    REG_DEC         ,22         # Decrementer Register
  00000000 00                    42I	.set    REG_DECAR       ,54         # Decrementer Auto-Reload Register
  00000000 00                    43I	
  00000000 00                    44I	; Process ID register
  00000000 00                    45I	.set    REG_PID0        ,48
  00000000 00                    46I	
  00000000 00                    47I	; MMU Assist registers
  00000000 00                    48I	.set    REG_MAS0        ,624
  00000000 00                    49I	.set    REG_MAS1        ,625
  00000000 00                    50I	.set    REG_MAS2        ,626
  00000000 00                    51I	.set    REG_MAS3        ,627
  00000000 00                    52I	.set    REG_MAS4        ,628
  00000000 00                    53I	.set    REG_MAS6        ,630
  00000000 00                    54I	.set    REG_MAS7        ,944
  00000000 00                    55I	
                               File: RAMBOOT_Te Errors    0
  Location Pl  Code            Line 	Source Statement
  00000000 00                    56I	; Cache registers
  00000000 00                    57I	.set    REG_L1CSR0      ,1010   # L1 data Cache Control and Status Register
  00000000 00                    58I	.set    REG_L1CSR1      ,1011   # L1 instruction Cache Control and Status Register
  00000000 00                    59I	.set    REG_L1FINV      ,1016   # L1 Cache FLush and Invalidate Register
  00000000 00                    60I	
  00000000 00                    61I	; MMU Control register
  00000000 00                    62I	.set    REG_MMUCSR0     ,1012
  00000000 00                    63I	
  00000000 00                    64I	; SPE APU Status and Control Register
  00000000 00                    65I	.set    REG_SPEFSCR     ,512
  00000000 00                    66I	
  00000000 00                    67I	.set    C_REG_TESCR1_ADDRESS,   0xFF010040
  00000000 00                    68I	
  00000000 00                    69I	; MSR bit masks
  00000000 00                    70I	.set    C_SET_SPE_BIT_MASK,     0x0200
  00000000 00                    71I	.set    C_CLEAR_SPE_BIT_MASK_S, 7
  00000000 00                    72I	.set    C_CLEAR_SPE_BIT_MASK_E, 5
  00000000 00                    73I	
  00000000 00                    74I	; MMUCSR0 bit masks
  00000000 00                    75I	.set    C_SET_FI_BIT_MASK,          0x0006
  00000000 00                    76I	
  00000000 00                    77I	; L1CSR0 bit masks
  00000000 00                    78I	.set    C_SET_CE_BIT_MASK,      0x0001
  00000000 00                    79I	.set    C_SET_CINV_BIT_MASK,    0x0002
  00000000 00                    80I	.set    C_CINV_BIT_NBR,         30
  00000000 00                    81I	.set    C_SET_CABT_BIT_MASK,    0x0004
  00000000 00                    82I	.set    C_CABT_BIT_NBR,         29
  00000000 00                    83I	
  00000000 00                    84I	; BUCSR values
  00000000 00                    85I	.set    C_REG_BUCSR_BPEN,   0x00000001  # Enable branch target buffer
  00000000 00                    86I	.set    C_REG_BUCSR_BBFI,   0x00000200  # Invalidate branch target buffer
  00000000 00                    87I	
  00000000 00                    88I	; L2 Cache ConTroL register
  00000000 00                    89I	.set    C_REG_L2CTR_offset, 0x00020000
  00000000 00                    90I	.set    C_SET_L2E_BIT_MASK, 0x8000
  00000000 00                    91I	.set    C_SET_L2I_BIT_MASK, 0x4000
  00000000 00                    92I	
  00000000 00                    93I	#/* _END_CONSTANT ==========================================================================
  00000000 00                       	========================== */
  00000000 00                    94I	
  00000000 00                    95I	#/* _BEGIN_MACRO ================================================ MACROS ===================
  00000000 00                       	========================== */
  00000000 00                    96I	
  00000000 00                    97I	#/*=========================================================================================
  00000000 00                       	========================== */
  00000000 00                    98I	#/*                                                        MSR                              
  00000000 00                       	                           */
  00000000 00                    99I	#/*=========================================================================================
  00000000 00                       	========================== */
  00000000 00                   100I	
  00000000 00                   101I	#/* BEGIN FUNCTION HEADER-------------------------------------------------------------------
  00000000 00                       	-------------------------- */
  00000000 00                   102I	#/* <<LLR:  >>  SDD_DMS_LLR_REQ_0000022                                                     
  00000000 00                       	                           */
  00000000 00                   103I	#/*                                                                                         
  00000000 00                       	                           */
  00000000 00                   104I	#/* <<FUNCTION:  >>  REG_MSR_WRITE                                                          
                               File: RAMBOOT_Te Errors    0
  Location Pl  Code            Line 	Source Statement
  00000000 00                       	                           */
  00000000 00                   105I	#/*                                                                                         
  00000000 00                       	                           */
  00000000 00                   106I	#/* <<DESCRIPTION:  >>  This function writes a new MSR value. The MSR register is writeable 
  00000000 00                       	only in supervisor mode. I */
  00000000 00                   107I	#/* t is a macro function in assembly language.                                             
  00000000 00                       	                           */
  00000000 00                   108I	#/*                                                                                         
  00000000 00                       	                           */
  00000000 00                   109I	#/* END FUNCTION HEADER---------------------------------------------------------------------
  00000000 00                       	-------------------------- */
  00000000 00                   110I	REG_MSR_WRITE: .macro v_reg1
                                111I		sync
                                112I		mtmsr    v_reg1
                                113I		sync
                                114I		isync
                                115I		.endm
  00000000 00                   116I	
  00000000 00                   117I	#/*End of REG_MSR_WRITE*/
  00000000 00                   118I	
  00000000 00                   119I	#/*=========================================================================================
  00000000 00                       	========================== */
  00000000 00                   120I	#/*                                                    CACHE                                
  00000000 00                       	                           */
  00000000 00                   121I	#/*=========================================================================================
  00000000 00                       	========================== */
  00000000 00                   122I	
  00000000 00                   123I	#/* Set CINV bit in L1CSR0 register to invalidate cache and wait for end of invalidation */
  00000000 00                   124I	REG_L1CSR0_CINV: .macro v_reg
                                125I	CINV_start\@:
                                126I		#/* Get L1CSR0 register value */
                                127I		mfspr    v_reg, REG_L1CSR0                      # v_reg := REG_L1CSR0
                                128I	
                                129I		#/* Set CINV bit */
                                130I		ori      v_reg, v_reg, C_SET_CINV_BIT_MASK      # v_reg := v_reg | C_SET_CINV_BIT_MA
                                    	SK
                                131I	
                                132I		#/* Update L1CSR0 register value */
                                133I		msync                                           # Mandatory sync instruction (see E2
                                    	00Z6_RM �2.13.1)
                                134I		isync
                                135I		mtspr    REG_L1CSR0, v_reg                      # REG_L1CSR0 := v_reg
                                136I	
                                137I		#/* Wait for end of cache invalidation (CINV bit to 0) */
                                138I	CINV_loop\@:
                                139I		#/* Read L1CSR0 register value */
                                140I		mfspr    v_reg, REG_L1CSR0                      # v_reg := REG_L1CSR0
                                141I	
                                142I		#/* Clear all bits but CINV */
                                143I		rlwinm   v_reg, v_reg, 0, C_CINV_BIT_NBR, C_CINV_BIT_NBR # v_reg := v_reg & C_SET_CI
                                    	NV_BIT_MASK
                                144I	
                                145I		#/* If CINV bit is still set then loop */
                                146I		cmpwi    0, v_reg, C_SET_CINV_BIT_MASK
                                147I		beq      CINV_loop\@
                                148I	
                                149I	
                               File: RAMBOOT_Te Errors    0
  Location Pl  Code            Line 	Source Statement
                                150I		#/* Check that cache invalidation completed successfully */
                                151I		#/* Read L1CSR0 register value */
                                152I		mfspr    v_reg, REG_L1CSR0                      # v_reg := REG_L1CSR0
                                153I	
                                154I		#/* Clear all bits but CABT */
                                155I		rlwinm   v_reg, v_reg, 0, C_CABT_BIT_NBR, C_CABT_BIT_NBR # v_reg := v_reg & C_SET_CA
                                    	BT_BIT_MASK
                                156I	
                                157I		#/* If CABT bit is still set then retry cache invalidation */
                                158I		cmpwi    0, v_reg, C_SET_CABT_BIT_MASK
                                159I		beq      CINV_start\@
                                160I	
                                161I		.endm
  00000000 00                   162I	
  00000000 00                   163I	# Set CE bit in L1CSR0 register to enable L1 data cache
  00000000 00                   164I	REG_L1CSR0_SET_CE: .macro v_reg
                                165I	
                                166I		#/* Get L1CSR0 register value */
                                167I		mfspr    v_reg, REG_L1CSR0                      # v_reg := REG_L1CSR0
                                168I	
                                169I		#/* Set CINV bit */
                                170I		ori      v_reg, v_reg, C_SET_CE_BIT_MASK        # v_reg := v_reg | C_SET_CE_BIT_MASK
                                    	
                                171I	
                                172I		#/* Update L1CSR0 register value */
                                173I		msync                                           # Mandatory sync instruction (see E2
                                    	00Z6_RM �2.13.1)
                                174I		isync
                                175I		mtspr    REG_L1CSR0, v_reg                      # REG_L1CSR0 := v_reg
                                176I	
                                177I		.endm
  00000000 00                   178I	
  00000000 00                   179I	# Set CE bit in L1CSR1 register to enable L1 instruction cache
  00000000 00                   180I	REG_L1CSR1_SET_CE: .macro v_reg
                                181I	
                                182I		#/* Get L1CSR0 register value */
                                183I		mfspr    v_reg, REG_L1CSR1                      # v_reg := REG_L1CSR1
                                184I	
                                185I		#/* Set CINV bit */
                                186I		ori      v_reg, v_reg, C_SET_CE_BIT_MASK        # v_reg := v_reg | C_SET_CE_BIT_MASK
                                    	
                                187I	
                                188I		#/* Update L1CSR0 register value */
                                189I		msync                                           # Mandatory sync instruction (see E2
                                    	00Z6_RM �2.13.1)
                                190I		isync
                                191I		mtspr    REG_L1CSR1, v_reg                      # REG_L1CSR1 := v_reg
                                192I	
                                193I		.endm
  00000000 00                   194I	
  00000000 00                   195I	#/* BEGIN FUNCTION HEADER-------------------------------------------------------------------
  00000000 00                       	-------------------------- */
  00000000 00                   196I	#/* <<LLR:  >>  SDD_DMS_LLR_REQ_0000021                                                     
  00000000 00                       	                           */
  00000000 00                   197I	#/*                                                                                         
  00000000 00                       	                           */
  00000000 00                   198I	#/* <<FUNCTION:  >>  REG_DTLB_LOAD                                                          
                               File: RAMBOOT_Te Errors    0
  Location Pl  Code            Line 	Source Statement
  00000000 00                       	                           */
  00000000 00                   199I	#/*                                                                                         
  00000000 00                       	                           */
  00000000 00                   200I	#/* <<DESCRIPTION:  >>  This function loads a PTE into a DTLB register by using the "tlbld" 
  00000000 00                       	instruction that loads the */
  00000000 00                   201I	#/*  data TLB entry from DCMP and RPA registers value. The register in parameter contains th
  00000000 00                       	e value of the effective a */
  00000000 00                   202I	#/* ddress of the TLB entry. It is a macro function in assembly language.                   
  00000000 00                       	                           */
  00000000 00                   203I	#/*                                                                                         
  00000000 00                       	                           */
  00000000 00                   204I	#/* END FUNCTION HEADER---------------------------------------------------------------------
  00000000 00                       	-------------------------- */
  00000000 00                   205I	REG_TLB_LOAD: .macro
                                206I		sync
                                207I		tlbwe
                                208I		isync
                                209I	
                                210I		.endm
  00000000 00                   211I	#/*End of REG_DTLB_LOAD*/
  00000000 00                   212I	
  00000000 00                   213I	#/* _END_MACRO =============================================================================
  00000000 00                       	========================== */
  00000000 00                     3 	   .include "RAMBOOT_VectorTable.inc"
  00000000 00                     1I	#/******************************************************************************************
  00000000 00                       	*****************************
  00000000 00                     2I	#*
  00000000 00                     3I	#*                                                Safran Electronics & Defense
  00000000 00                     4I	#*                                                     SAFRAN Group
  00000000 00                     5I	#*
  00000000 00                     6I	#* _BEGIN_FILE_HEADER ----------------------------------------------------------------------
  00000000 00                       	----------------------------
  00000000 00                     7I	#*
  00000000 00                     8I	#* File name  : RLB_RBI_VectorTable.P2020.inc
  00000000 00                     9I	#* CSC name   :
  00000000 00                    10I	#* 
  00000000 00                    11I	#* Description: Vector Table CSU header file.
  00000000 00                    12I	#*
  00000000 00                    13I	#* Configuration management identification:
  00000000 00                    14I	#*    %full_name:  sknNEXT#1/ascii/RAMBOOT_VectorTable.inc/1 %
  00000000 00                    15I	#*    Creation  :
  00000000 00                    16I	#*
  00000000 00                    17I	#* _END_FILE_HEADER ------------------------------------------------------------------------
  00000000 00                       	----------------------------
  00000000 00                    18I	#*
  00000000 00                    19I	#* LANGUAGE: ASM - Header file
  00000000 00                    20I	#*
  00000000 00                    21I	#* -----------------------------------------------------------------------------------------
  00000000 00                       	----------------------------
  00000000 00                    22I	#* Copyright (c) 2017, SAFRAN E&D
  00000000 00                    23I	#* SAFRAN Electronics & Defense document. Reproduction and disclosure forbidden.
  00000000 00                    24I	#*******************************************************************************************
  00000000 00                       	***************************/
  00000000 00                    25I	
  00000000 00                    26I	#/* _BEGIN_STATIC_PROTO ==================================== FUNCTION PROTOTYPES ===========
  00000000 00                       	========================== */
  00000000 00                    27I	#/* _END_STATIC_PROTO ======================================================================
                               File: RAMBOOT_Te Errors    0
  Location Pl  Code            Line 	Source Statement
  00000000 00                       	========================== */
  00000000 00                    28I	
  00000000 00                    29I	#/* _BEGIN_CONSTANT ============================================ CONSTANTS =================
  00000000 00                       	========================== */
  00000000 00                    30I	
  00000000 00                    31I		#/* HID0 init value, enable timer base */
  00000000 00                    32I		.set     C_HID0_INIT_VALUE     ,0x00004000
  00000000 00                    33I	
  00000000 00                    34I		#/* RAMBOOT MSR first configuration. Set SPE, ME and DE bits */
  00000000 00                    35I		.set     C_MSR_RAMBOOT_CONFIG      ,0x02001200
  00000000 00                    36I	
  00000000 00                    37I	#/* _END_CONSTANT ==========================================================================
  00000000 00                       	========================== */
  00000000 00                     4 	   .include "RAMBOOT_TCBHW_TestGPRs.inc"
  00000000 00                     1I	   ; .include "RAMBOOT_Registers.inc"
  00000000 00                     2I	   ; .include "RAMBOOT_VectorTable.inc"
  00000000 00                     3I	
  00000000 00                     4I	RAMBOOT_TCBHW_GPRs_FailureHandler:
  00000000 00  4800 0008          5I	   b RAMBOOT_TCBHW_InfiniteLoop
  00000004 00                     6I	
  00000004 00                     7I	RAMBOOT_TCBHW_MoveGPR0_ToGPR31_ThroughAllGPRs: .macro
                                  8I	   mr      r1,r0
                                  9I	   mr      r2,r1
                                 10I	   mr      r3,r2
                                 11I	   mr      r4,r3
                                 12I	   mr      r5,r4
                                 13I	   mr      r6,r5
                                 14I	   mr      r7,r6
                                 15I	   mr      r8,r7
                                 16I	   mr      r9,r8
                                 17I	   mr      r10,r9
                                 18I	   mr      r11,r10
                                 19I	   mr      r12,r11
                                 20I	   mr      r13,r12
                                 21I	   mr      r14,r13
                                 22I	   mr      r15,r14
                                 23I	   mr      r16,r15
                                 24I	   mr      r17,r16
                                 25I	   mr      r18,r17
                                 26I	   mr      r19,r18
                                 27I	   mr      r20,r19
                                 28I	   mr      r21,r20
                                 29I	   mr      r22,r21
                                 30I	   mr      r23,r22
                                 31I	   mr      r24,r23
                                 32I	   mr      r25,r24
                                 33I	   mr      r26,r25
                                 34I	   mr      r27,r26
                                 35I	   mr      r28,r27
                                 36I	   mr      r29,r28
                                 37I	   mr      r30,r29
                                 38I	   mr      r31,r30
                                 39I	   .endm
  00000004 00                    40I	
  00000004 00                    41I	RAMBOOT_TCBHW_TestGPRs: .macro
                                 42I	   lis     r0,0x00000000@h
                                 43I	   ori     r0,r0,0x55555555@l
                               File: RAMBOOT_Te Errors    0
  Location Pl  Code            Line 	Source Statement
                                 44I	   RAMBOOT_TCBHW_MoveGPR0_ToGPR31_ThroughAllGPRs
                                 45I	   cmpli   cr0,r31,0x55555555@l
                                 46I	   bne     RAMBOOT_TCBHW_GPRs_FailureHandler
                                 47I	   
                                 48I	   lis     r0,0x55555555@h
                                 49I	   RAMBOOT_TCBHW_MoveGPR0_ToGPR31_ThroughAllGPRs
                                 50I	   rotrwi  r31,r31,16
                                 51I	   cmpli   cr0,r31,0x55555555@l
                                 52I	   bne     RAMBOOT_TCBHW_GPRs_FailureHandler
                                 53I	   
                                 54I	   lis     r0, 0x00000000@h
                                 55I	   ori     r0,r0,0xAAAAAAAA@l
                                 56I	   RAMBOOT_TCBHW_MoveGPR0_ToGPR31_ThroughAllGPRs
                                 57I	   cmpli   cr0,r31,0xAAAAAAAA@l
                                 58I	   bne     RAMBOOT_TCBHW_GPRs_FailureHandler
                                 59I	   
                                 60I	   lis     r0,0xAAAAAAAA@h
                                 61I	   RAMBOOT_TCBHW_MoveGPR0_ToGPR31_ThroughAllGPRs
                                 62I	   rotrwi  r31,r31,16
                                 63I	   cmpli   cr0,r31,0xAAAAAAAA@l
                                 64I	   bne     RAMBOOT_TCBHW_GPRs_FailureHandler
                                 65I	   .endm
  00000004 00                     5 	   .include "RAMBOOT_TCBHW_TestALU.inc"
  00000004 00                     1I	   ; .include "RAMBOOT_Registers.inc"
  00000004 00                     2I	   ; .include "RAMBOOT_VectorTable.inc"
  00000004 00                     3I	   
  00000004 00                     4I	   .set C_11111111,    0x11111111
  00000004 00                     5I	   .set C_44444444,    0x44444444
  00000004 00                     6I	   .set C_55555555,    0x55555555
  00000004 00                     7I	   .set C_22222222,    0x22222222
  00000004 00                     8I	   .set C_88888888,    0x88888888
  00000004 00                     9I	   .set C_CCCCCCCC,    0xCCCCCCCC
  00000004 00                    10I	   .set C_33333333,    0x33333333
  00000004 00                    11I	   .set C_FFFFFFFF,    0xFFFFFFFF
  00000004 00                    12I	   .set C_AAAAAAAA,    0xAAAAAAAA
  00000004 00                    13I	   .set C_00000005,    0x00000005
  00000004 00                    14I	   .set C_12345678,    0x12345678
  00000004 00                    15I	   .set C_F3DD1BB0,    0xF3DD1BB0
  00000004 00                    16I	   .set C_E0000000,    0xE0000000
  00000004 00                    17I	   .set C_BBBBBBBC,    0xBBBBBBBC
  00000004 00                    18I	   .set C_00000002,    0x00000002
  00000004 00                    19I	   .set C_00000003,    0x00000003
  00000004 00                    20I	   .set C_00000000,    0x00000000
  00000004 00                    21I	   .set C_00000001,    0x00000001
  00000004 00                    22I	   .set C_00000007,    0x00000007
  00000004 00                    23I	   .set C_FFFFFFFE,    0xFFFFFFFE
  00000004 00                    24I	   .set C_00000004,    0x00000004
  00000004 00                    25I	   .set C_AAAAAAAB,    0xAAAAAAAB
  00000004 00                    26I	   .set C_FFFF0000,    0xFFFF0000
  00000004 00                    27I	   .set C_0000FFFF,    0x0000FFFF
  00000004 00                    28I	   .set C_55555554,    0x55555554
  00000004 00                    29I	   .set C_2AAAAAAA,    0x2AAAAAAA
  00000004 00                    30I	   .set C_D5555555,    0xD5555555
  00000004 00                    31I	   .set C_1,           1
  00000004 00                    32I	   .set C_16,          16
  00000004 00                    33I	
  00000004 00                    34I	RAMBOOT_TCBHW_ALU_FailureHandler:
                               File: RAMBOOT_Te Errors    0
  Location Pl  Code            Line 	Source Statement
  00000004 00  4800 0004         35I	   b RAMBOOT_TCBHW_InfiniteLoop
  00000008 00                    36I	
  00000008 00                    37I	RAMBOOT_TCBHW_TestALU: .macro
                                 38I	; Load constants values used during ALU test
                                 39I	   lis     r1, C_2AAAAAAA@ha
                                 40I	   addi    r1, r1, C_2AAAAAAA@l
                                 41I	   lis     r2, C_D5555555@ha
                                 42I	   addi    r2, r2, C_D5555555@l
                                 43I	   lis     r3, C_11111111@ha
                                 44I	   addi    r3, r3, C_11111111@l
                                 45I	   lis     r4, C_44444444@ha
                                 46I	   addi    r4, r4, C_44444444@l
                                 47I	   lis     r5, C_55555555@ha
                                 48I	   addi    r5, r5, C_55555555@l
                                 49I	   lis     r6, C_22222222@ha
                                 50I	   addi    r6, r6, C_22222222@l
                                 51I	   lis     r7, C_88888888@ha
                                 52I	   addi    r7, r7, C_88888888@l
                                 53I	   lis     r8, C_AAAAAAAA@ha
                                 54I	   addi    r8, r8, C_AAAAAAAA@l
                                 55I	   lis     r9, C_CCCCCCCC@ha
                                 56I	   addi    r9, r9, C_CCCCCCCC@l
                                 57I	   lis     r10, C_33333333@ha
                                 58I	   addi    r10, r10, C_33333333@l
                                 59I	   lis     r11, C_FFFFFFFF@ha
                                 60I	   addi    r11, r11, C_FFFFFFFF@l
                                 61I	   lis     r12, C_00000005@ha
                                 62I	   addi    r12, r12, C_00000005@l
                                 63I	   lis     r13, C_BBBBBBBC@ha
                                 64I	   addi    r13, r13, C_BBBBBBBC@l
                                 65I	   lis     r14, C_12345678@ha
                                 66I	   addi    r14, r14, C_12345678@l
                                 67I	   lis     r15, C_F3DD1BB0@ha
                                 68I	   addi    r15, r15, C_F3DD1BB0@l
                                 69I	   lis     r16, C_E0000000@ha
                                 70I	   addi    r16, r16, C_E0000000@l
                                 71I	   lis     r17, C_00000002@ha
                                 72I	   addi    r17, r17, C_00000002@l
                                 73I	   lis     r18, C_00000003@ha
                                 74I	   addi    r18, r18, C_00000003@l
                                 75I	   lis     r19, C_00000000@ha
                                 76I	   addi    r19, r19, C_00000000@l
                                 77I	   lis     r20, C_00000001@ha
                                 78I	   addi    r20, r20, C_00000001@l
                                 79I	   lis     r21, C_00000007@ha
                                 80I	   addi    r21, r21, C_00000007@l
                                 81I	   lis     r22, C_FFFFFFFE@ha
                                 82I	   addi    r22, r22, C_FFFFFFFE@l
                                 83I	   lis     r23, C_00000004@ha
                                 84I	   addi    r23, r23, C_00000004@l
                                 85I	   lis     r24, C_AAAAAAAB@ha
                                 86I	   addi    r24, r24, C_AAAAAAAB@l
                                 87I	   lis     r25, C_FFFF0000@ha
                                 88I	   addi    r25, r25, C_FFFF0000@l
                                 89I	   lis     r26, C_0000FFFF@ha
                                 90I	   addi    r26, r26, C_0000FFFF@l
                                 91I	   lis     r27, C_1@ha
                               File: RAMBOOT_Te Errors    0
  Location Pl  Code            Line 	Source Statement
                                 92I	   addi    r27, r27, C_1@l
                                 93I	   lis     r28, C_16@ha
                                 94I	   addi    r28, r28, C_16@l
                                 95I	   lis     r29, C_55555554@ha
                                 96I	   addi    r29, r29, C_55555554@l
                                 97I	
                                 98I	   ;           Test arithmetical operations:
                                 99I	   ; ==================================================
                                100I	   ; - integer addition on 32 bits words
                                101I	   ; --------------------------------------------------
                                102I	   ; r3  =  C_11111111
                                103I	   ; r4  =  C_44444444
                                104I	   ; r5  =  C_55555555
                                105I	   ; r6  =  C_22222222
                                106I	   ; r7  =  C_88888888
                                107I	   ; r8  =  C_AAAAAAAA
                                108I	   ; r9  =  C_CCCCCCCC
                                109I	   ; r10 =  C_33333333
                                110I	   ; r11 =  C_FFFFFFFF
                                111I	   
                                112I	   ; * 0x11111111 + 0x44444444 -> 0x55555555
                                113I	ALU_Test01:
                                114I	   add     r31, r3, r4
                                115I	   cmpw    r31, r5
                                116I	   bne     RAMBOOT_TCBHW_ALU_FailureHandler
                                117I	   
                                118I	   ; * 0x22222222 + 0x88888888 -> 0xaaaaaaaa
                                119I	ALU_Test02:
                                120I	   add     r31, r6, r7
                                121I	   cmpw    r31, r8
                                122I	   bne     RAMBOOT_TCBHW_ALU_FailureHandler
                                123I	   
                                124I	   ; * 0xcccccccc + 0x33333333 -> 0xffffffff
                                125I	ALU_Test03:
                                126I	   add     r31, r9, r10
                                127I	   cmpw    r31, r11
                                128I	   bne     RAMBOOT_TCBHW_ALU_FailureHandler
                                129I	   
                                130I	   ; - integer substraction on 32 bits words
                                131I	   ; --------------------------------------------------
                                132I	   ; r3  = C_11111111
                                133I	   ; r4  = C_44444444
                                134I	   ; r5  = C_55555555
                                135I	   ; r6  = C_22222222
                                136I	   ; r7  = C_88888888
                                137I	   ; r8  = C_AAAAAAAA
                                138I	   ; r9  = C_CCCCCCCC
                                139I	   ; r10 = C_33333333
                                140I	   ; r11 = C_FFFFFFFF
                                141I	
                                142I	   ; * 0x55555555 - 0x11111111 -> 0x44444444
                                143I	ALU_Test04:
                                144I	   sub     r31, r5, r3
                                145I	   cmpw    r31, r4
                                146I	   bne     RAMBOOT_TCBHW_ALU_FailureHandler
                                147I	   
                                148I	   ; * 0xaaaaaaaa - 0x22222222 -> 0x88888888
                               File: RAMBOOT_Te Errors    0
  Location Pl  Code            Line 	Source Statement
                                149I	ALU_Test05:
                                150I	   sub     r31, r8, r6
                                151I	   cmpw    r31, r7
                                152I	   bne     RAMBOOT_TCBHW_ALU_FailureHandler
                                153I	   
                                154I	   ; * 0xffffffff - 0xcccccccc -> 0x33333333
                                155I	ALU_Test06:
                                156I	   sub     r31, r11, r9
                                157I	   cmpw    r31, r10
                                158I	   bne     RAMBOOT_TCBHW_ALU_FailureHandler
                                159I	
                                160I	   ; - integer multiplication on 32 bits words
                                161I	   ; --------------------------------------------------
                                162I	   ; r12 = C_00000005
                                163I	   ; r3  = C_11111111
                                164I	   ; r5  = C_55555555
                                165I	   ; r6  = C_22222222
                                166I	   ; r8  = C_AAAAAAAA
                                167I	   ; r9  = C_CCCCCCCC
                                168I	   ; r13 = C_BBBBBBBC
                                169I	   ; r14 = C_12345678
                                170I	   ; r15 = C_F3DD1BB0
                                171I	   ; r16 = C_E0000000
                                172I	
                                173I	   ; * 0x00000005 * 0x11111111 -> 0x55555555
                                174I	ALU_Test07:
                                175I	   mullw   r31, r12, r3
                                176I	   cmpw    r31, r5
                                177I	   bne     RAMBOOT_TCBHW_ALU_FailureHandler
                                178I	   
                                179I	   ; * 0x00000005 * 0x22222222 -> 0xaaaaaaaa
                                180I	ALU_Test08:
                                181I	   mullw   r31, r12, r6
                                182I	   cmpw    r31, r8
                                183I	   bne     RAMBOOT_TCBHW_ALU_FailureHandler
                                184I	
                                185I	   ; * 0x55555555 * 0xcccccccc -> 0xbbbbbbbc
                                186I	ALU_Test09:
                                187I	   mullw   r31, r5, r9
                                188I	   cmpw    r31, r13
                                189I	   bne     RAMBOOT_TCBHW_ALU_FailureHandler
                                190I	
                                191I	   ; * 0xaaaaaaaa * 0x12345678 -> 0xf3dd1bb0
                                192I	ALU_Test10:
                                193I	   mullw   r31, r8, r14
                                194I	   cmpw    r31, r15
                                195I	   bne     RAMBOOT_TCBHW_ALU_FailureHandler
                                196I	
                                197I	   ; * 0xe0000000 * 0x11111111 -> 0xe0000000
                                198I	ALU_Test11:
                                199I	   mullw   r31, r16, r3
                                200I	   cmpw    r31, r16
                                201I	   bne     RAMBOOT_TCBHW_ALU_FailureHandler
                                202I	
                                203I	   ; - signed integer division on 32 bits words
                                204I	   ; --------------------------------------------------
                                205I	   ; r8  = C_AAAAAAAA
                               File: RAMBOOT_Te Errors    0
  Location Pl  Code            Line 	Source Statement
                                206I	   ; r17 = C_00000002
                                207I	   ; r2  = C_D5555555
                                208I	   ; r11 = C_FFFFFFFF
                                209I	   ; r18 = C_00000003
                                210I	   ; r19 = C_00000000
                                211I	   ; r5  = C_55555555
                                212I	   ; r24 = 0xAAAAAAAB
                                213I	   
                                214I	   ; * 0xaaaaaaaa / 0x00000002 -> 0xd5555555
                                215I	ALU_Test12:
                                216I	   divw    r31, r8, r17
                                217I	   cmpw    r31, r2
                                218I	   bne     RAMBOOT_TCBHW_ALU_FailureHandler
                                219I	   
                                220I	   ; * 0xffffffff / 0x00000003 -> 0x00000000
                                221I	ALU_Test13:
                                222I	   divw    r31, r11, r18
                                223I	   cmpw    r31, r19
                                224I	   bne     RAMBOOT_TCBHW_ALU_FailureHandler
                                225I	
                                226I	   ; * 0x55555555 / 0xffffffff -> 0xaaaaaaab
                                227I	ALU_Test14:
                                228I	   divw    r31, r5, r11
                                229I	   cmpw    r31, r24
                                230I	   bne     RAMBOOT_TCBHW_ALU_FailureHandler
                                231I	
                                232I	   ; - unsigned integer division on 32 bits words
                                233I	   ; --------------------------------------------------
                                234I	   ; r11 = C_FFFFFFFF
                                235I	   ; r18 = C_00000003
                                236I	   ; r5  = C_55555555
                                237I	   ; r8  = C_AAAAAAAA
                                238I	   ; r20 = C_00000001
                                239I	   ; r12 = C_00000005
                                240I	   ; r3  = C_11111111
                                241I	   ; r21 = C_00000007
                                242I	   ; r19 = C_00000000
                                243I	   ; r22 = C_FFFFFFFE
                                244I	   ; r23 = C_00000004
                                245I	   ; r17 = C_00000002
                                246I	
                                247I	   ; * 0xffffffff / 0x00000003 -> 0x55555555
                                248I	ALU_Test15:
                                249I	   divwu   r31, r11, r18
                                250I	   cmpw    r31, r5
                                251I	   bne     RAMBOOT_TCBHW_ALU_FailureHandler
                                252I	   
                                253I	   ; * 0xaaaaaaaa / 0x00000001 -> 0xaaaaaaaa
                                254I	ALU_Test16:
                                255I	   divwu   r31, r8, r20
                                256I	   cmpw    r31, r8
                                257I	   bne     RAMBOOT_TCBHW_ALU_FailureHandler
                                258I	
                                259I	   ; * 0x55555555 / 0x00000005 -> 0x11111111
                                260I	ALU_Test17:
                                261I	   divwu   r31, r5, r12
                                262I	   cmpw    r31, r3
                               File: RAMBOOT_Te Errors    0
  Location Pl  Code            Line 	Source Statement
                                263I	   bne     RAMBOOT_TCBHW_ALU_FailureHandler
                                264I	
                                265I	   ; * 0x00000005 / 0x00000007 -> 0x00000000
                                266I	ALU_Test18:
                                267I	   divwu   r31, r12, r21
                                268I	   cmpw    r31, r19
                                269I	   bne     RAMBOOT_TCBHW_ALU_FailureHandler
                                270I	
                                271I	   ; * 0xfffffffe / 0xffffffff -> 0x00000000
                                272I	ALU_Test19:
                                273I	   divwu   r31, r22, r11
                                274I	   cmpw    r31, r19
                                275I	   bne     RAMBOOT_TCBHW_ALU_FailureHandler
                                276I	
                                277I	   ; * 0x00000004 / 0x00000002 -> 0x00000002
                                278I	ALU_Test20:
                                279I	   divwu   r31, r23, r17
                                280I	   cmpw    r31, r17
                                281I	   bne     RAMBOOT_TCBHW_ALU_FailureHandler
                                282I	   
                                283I	   ; - negate on 32 bits word
                                284I	   ; --------------------------------------------------
                                285I	   ; r5  = C_55555555
                                286I	   ; r24 = C_AAAAAAAB
                                287I	   ; r20 = C_00000001
                                288I	   ; r11 = C_FFFFFFFF
                                289I	   
                                290I	   ; * negate 0x55555555 -> 0xaaaaaaab
                                291I	ALU_Test21:
                                292I	   neg     r31, r5
                                293I	   cmpw    r31, r24
                                294I	   bne     RAMBOOT_TCBHW_ALU_FailureHandler
                                295I	   
                                296I	   ; * negate 0x00000001 -> 0xffffffff
                                297I	ALU_Test22:
                                298I	   neg     r31, r20
                                299I	   cmpw    r31, r11
                                300I	   bne     RAMBOOT_TCBHW_ALU_FailureHandler
                                301I	   
                                302I	   ;           Test logical operations:
                                303I	   ; ==================================================
                                304I	   ; - logical bitwise OR on 32 bits words
                                305I	   ; --------------------------------------------------
                                306I	   ; r5  = C_55555555
                                307I	   ; r11 = C_FFFFFFFF
                                308I	   ; r8  = C_AAAAAAAA
                                309I	
                                310I	   ; * 0xaaaaaaaa OR 0x55555555 -> 0xffffffff
                                311I	ALU_Test23:
                                312I	   or      r31, r8, r5
                                313I	   cmpw    r31, r11
                                314I	   bne     RAMBOOT_TCBHW_ALU_FailureHandler
                                315I	   
                                316I	   ; * 0xaaaaaaaa OR 0xaaaaaaaa -> 0xaaaaaaaa
                                317I	ALU_Test24:
                                318I	   or      r31, r8, r8
                                319I	   cmpw    r31, r8
                               File: RAMBOOT_Te Errors    0
  Location Pl  Code            Line 	Source Statement
                                320I	   bne     RAMBOOT_TCBHW_ALU_FailureHandler
                                321I	
                                322I	   ; * 0x55555555 OR 0x55555555 -> 0x55555555
                                323I	ALU_Test25:
                                324I	   or      r31, r5, r5
                                325I	   cmpw    r31, r5
                                326I	   bne     RAMBOOT_TCBHW_ALU_FailureHandler
                                327I	   
                                328I	   ; - logical bitwise AND on 32 bits words
                                329I	   ; --------------------------------------------------
                                330I	   ; r5  = C_55555555
                                331I	   ; r11 = C_FFFFFFFF
                                332I	   ; r19 = C_00000000
                                333I	   ; r8  = C_AAAAAAAA
                                334I	
                                335I	   ; * 0xaaaaaaaa AND 0x55555555 -> 0x00000000
                                336I	ALU_Test26:
                                337I	   and     r31, r8, r5
                                338I	   cmpw    r31, r19
                                339I	   bne     RAMBOOT_TCBHW_ALU_FailureHandler
                                340I	   
                                341I	   ; * 0xaaaaaaaa AND 0xaaaaaaaa -> 0xaaaaaaaa
                                342I	ALU_Test27:
                                343I	   and     r31, r8, r8
                                344I	   cmpw    r31, r8
                                345I	   bne     RAMBOOT_TCBHW_ALU_FailureHandler
                                346I	
                                347I	   ; * 0x55555555 AND 0x55555555 -> 0x55555555
                                348I	ALU_Test28:
                                349I	   and     r31, r5, r5
                                350I	   cmpw    r31, r5
                                351I	   bne     RAMBOOT_TCBHW_ALU_FailureHandler
                                352I	   
                                353I	   ; - logical bitwise XOR on 32 bits words
                                354I	   ; --------------------------------------------------
                                355I	   ; r5  = C_55555555
                                356I	   ; r11 = C_FFFFFFFF
                                357I	   ; r8  = C_AAAAAAAA
                                358I	   ; r19 = C_00000000
                                359I	   
                                360I	   ; * 0xaaaaaaaa XOR 0x55555555 -> 0xffffffff
                                361I	ALU_Test29:
                                362I	   xor     r31, r8, r5
                                363I	   cmpw    r31, r11
                                364I	   bne     RAMBOOT_TCBHW_ALU_FailureHandler
                                365I	
                                366I	   ; * 0xaaaaaaaa XOR 0xaaaaaaaa -> 0x00000000
                                367I	ALU_Test30:
                                368I	   xor     r31, r8, r8
                                369I	   cmpw    r31, r19
                                370I	   bne     RAMBOOT_TCBHW_ALU_FailureHandler
                                371I	
                                372I	   ; * 0x55555555 XOR 0x55555555 -> 0x00000000
                                373I	ALU_Test31:
                                374I	   xor     r31, r5, r5
                                375I	   cmpw    r31, r19
                                376I	   bne     RAMBOOT_TCBHW_ALU_FailureHandler
                               File: RAMBOOT_Te Errors    0
  Location Pl  Code            Line 	Source Statement
                                377I	   
                                378I	   ; - logical bitwise NOR on 32 bits words
                                379I	   ; --------------------------------------------------
                                380I	   ; r5  = C_55555555
                                381I	   ; r11 = C_FFFFFFFF
                                382I	   ; r8  = C_AAAAAAAA
                                383I	   ; r19 = C_00000000
                                384I	   
                                385I	   ; * 0xaaaaaaaa NOR 0x55555555 -> 0x00000000
                                386I	ALU_Test32:
                                387I	   nor     r31, r8, r5
                                388I	   cmpw    r31, r19
                                389I	   bne     RAMBOOT_TCBHW_ALU_FailureHandler
                                390I	
                                391I	   ; * 0xaaaaaaaa NOR 0xaaaaaaaa -> 0x55555555
                                392I	ALU_Test33:
                                393I	   nor     r31, r8, r8
                                394I	   cmpw    r31, r5
                                395I	   bne     RAMBOOT_TCBHW_ALU_FailureHandler
                                396I	   
                                397I	   ; * 0x55555555 NOR 0x55555555 -> 0xaaaaaaaa
                                398I	ALU_Test34:
                                399I	   nor     r31, r5, r5
                                400I	   cmpw    r31, r8
                                401I	   bne     RAMBOOT_TCBHW_ALU_FailureHandler
                                402I	   
                                403I	   ; - logical bitwise NAND on 32 bits words
                                404I	   ; --------------------------------------------------
                                405I	   ; r5  = C_55555555
                                406I	   ; r11 = C_FFFFFFFF
                                407I	   ; r8  = C_AAAAAAAA
                                408I	
                                409I	   ; * 0xaaaaaaaa NAND 0x55555555 -> 0xffffffff
                                410I	ALU_Test35:
                                411I	   nand    r31, r8, r5
                                412I	   cmpw    r31, r11
                                413I	   bne     RAMBOOT_TCBHW_ALU_FailureHandler
                                414I	   
                                415I	   ; * 0xaaaaaaaa NAND 0xaaaaaaaa -> 0x55555555
                                416I	ALU_Test36:
                                417I	   nand    r31, r8, r8
                                418I	   cmpw    r31, r5
                                419I	   bne     RAMBOOT_TCBHW_ALU_FailureHandler
                                420I	   
                                421I	   ; * 0x55555555 NAND 0x55555555 -> 0xaaaaaaaa
                                422I	ALU_Test37:
                                423I	   nand    r31, r5, r5
                                424I	   cmpw    r31, r8
                                425I	   bne     RAMBOOT_TCBHW_ALU_FailureHandler
                                426I	   
                                427I	   ; - logical bitwise NOT on 32 bits words
                                428I	   ; --------------------------------------------------
                                429I	   ; r5  = C_55555555
                                430I	   ; r8  = C_AAAAAAAA
                                431I	
                                432I	   ; * NOT 0xaaaaaaaa -> 0x55555555
                                433I	ALU_Test38:
                               File: RAMBOOT_Te Errors    0
  Location Pl  Code            Line 	Source Statement
                                434I	   not     r31, r8
                                435I	   cmpw    r31, r5
                                436I	   bne     RAMBOOT_TCBHW_ALU_FailureHandler
                                437I	
                                438I	   ; * NOT 0x55555555 -> 0xaaaaaaaa
                                439I	ALU_Test39:
                                440I	   not     r31, r5
                                441I	   cmpw    r31, r8
                                442I	   bne     RAMBOOT_TCBHW_ALU_FailureHandler
                                443I	
                                444I	   ; - logical bitwise rotate left and right on 32 bits words
                                445I	   ; --------------------------------------------------------
                                446I	   ; r5  = C_55555555
                                447I	   ; r8  = C_AAAAAAAA
                                448I	   ; r25 = C_FFFF0000
                                449I	   ; r26 = C_0000FFFF
                                450I	
                                451I	   ; * Rotate left 1 step 0x55555555 -> 0xaaaaaaaa
                                452I	ALU_Test40:
                                453I	   rotlwi  r31, r5, C_1
                                454I	   cmpw    r31, r8
                                455I	   bne     RAMBOOT_TCBHW_ALU_FailureHandler
                                456I	   
                                457I	   ; * Rotate left 1 step 0xaaaaaaaa -> 0x55555555
                                458I	ALU_Test41:
                                459I	   rotlwi  r31, r8, C_1
                                460I	   cmpw    r31, r5
                                461I	   bne     RAMBOOT_TCBHW_ALU_FailureHandler
                                462I	
                                463I	   ; * Rotate left 16 steps 0xffff0000 -> 0x0000ffff
                                464I	ALU_Test42:
                                465I	   rotlwi  r31, r25, C_16
                                466I	   cmpw    r31, r26
                                467I	   bne     RAMBOOT_TCBHW_ALU_FailureHandler
                                468I	   
                                469I	   ; * Rotate right 16 steps 0x0000ffff -> 0xffff0000
                                470I	ALU_Test43:
                                471I	   rotrwi  r31, r26, C_16
                                472I	   cmpw    r31, r25
                                473I	   bne     RAMBOOT_TCBHW_ALU_FailureHandler
                                474I	
                                475I	   ; * Rotate right 1 step 0x55555555 -> 0xaaaaaaaa
                                476I	ALU_Test44:
                                477I	   rotrwi  r31, r5, C_1
                                478I	   cmpw    r31, r8
                                479I	   bne     RAMBOOT_TCBHW_ALU_FailureHandler
                                480I	   
                                481I	   ; - logical bitwise shift on 32 bits words
                                482I	   ; --------------------------------------------------
                                483I	   ; r5  = C_55555555
                                484I	   ; r8  = C_AAAAAAAA
                                485I	   ; r29 = C_55555554
                                486I	   ; r11 = C_FFFFFFFF
                                487I	   ; r25 = C_FFFF0000
                                488I	   ; r26 = C_0000FFFF
                                489I	   ; r1  = C_2AAAAAAA
                                490I	
                               File: RAMBOOT_Te Errors    0
  Location Pl  Code            Line 	Source Statement
                                491I	   ; * Shift left 1 step 0x55555555 -> 0xaaaaaaaa
                                492I	ALU_Test45:
                                493I	   slwi    r31, r5, C_1
                                494I	   cmpw    r31, r8
                                495I	   bne     RAMBOOT_TCBHW_ALU_FailureHandler
                                496I	   
                                497I	   ; * Shift left 1 step 0xaaaaaaaa -> 0x55555554
                                498I	ALU_Test46:
                                499I	   slwi    r31, r8, C_1
                                500I	   cmpw    r31, r29
                                501I	   bne     RAMBOOT_TCBHW_ALU_FailureHandler
                                502I	
                                503I	   ; * Shift left 16 steps 0xffffffff -> 0xffff0000
                                504I	ALU_Test47:
                                505I	   slwi    r31, r11, C_16
                                506I	   cmpw    r31, r25
                                507I	   bne     RAMBOOT_TCBHW_ALU_FailureHandler
                                508I	
                                509I	   ; * Shift right 16 steps 0xffffffff -> 0x0000ffff
                                510I	ALU_Test48:
                                511I	   srwi    r31, r11, C_16
                                512I	   cmpw    r31, r26
                                513I	   bne     RAMBOOT_TCBHW_ALU_FailureHandler
                                514I	   
                                515I	   ; * Shift right 1 step 0x55555555 -> 0x2aaaaaaa
                                516I	ALU_Test49:
                                517I	   srwi    r31, r5, C_1
                                518I	   cmpw    r31, r1
                                519I	   bne     RAMBOOT_TCBHW_ALU_FailureHandler
                                520I	
                                521I	   ;               Test comparisons
                                522I	   ; ==================================================
                                523I	   ; r26 = C_1
                                524I	   ; r27 = C_1
                                525I	   ; r28 = C_16
                                526I	   lis     r26, C_00000001@ha
                                527I	   addi    r26, r26, C_00000001@l
                                528I	   
                                529I	   ; * "egal" with result TRUE
                                530I	ALU_Test50:
                                531I	   cmpw    r26, r27
                                532I	   beq     ALU_Test51
                                533I	   b       RAMBOOT_TCBHW_ALU_FailureHandler
                                534I	
                                535I	   ; * "egal" with result FALSE
                                536I	ALU_Test51:
                                537I	   cmpw    r27, r28
                                538I	   beq     RAMBOOT_TCBHW_ALU_FailureHandler
                                539I	
                                540I	   ; * "different" with result TRUE
                                541I	ALU_Test52:
                                542I	   cmpw    r27, r28
                                543I	   bne     ALU_Test53
                                544I	   b       RAMBOOT_TCBHW_ALU_FailureHandler
                                545I	
                                546I	   ; * "different" with result FALSE
                                547I	ALU_Test53:
                               File: RAMBOOT_Te Errors    0
  Location Pl  Code            Line 	Source Statement
                                548I	   cmpw    r26, r27
                                549I	   bne     RAMBOOT_TCBHW_ALU_FailureHandler
                                550I	
                                551I	   ; * "above" with result TRUE
                                552I	ALU_Test54:
                                553I	   cmpw    r28, r27
                                554I	   bgt     ALU_Test55     ; Branch if Greater Than
                                555I	   b       RAMBOOT_TCBHW_ALU_FailureHandler
                                556I	   
                                557I	   ; * "above" with result FALSE
                                558I	ALU_Test55:
                                559I	   cmpw    r27, r28
                                560I	   bgt     RAMBOOT_TCBHW_ALU_FailureHandler   ; Branch if Greater Than
                                561I	
                                562I	   ; * "above or equal" with result TRUE
                                563I	ALU_Test56:
                                564I	   cmpw    r28, r27
                                565I	   bge     ALU_Test57
                                566I	   b       RAMBOOT_TCBHW_ALU_FailureHandler
                                567I	   
                                568I	   ; * "above or equal" with result FALSE
                                569I	ALU_Test57:
                                570I	   cmpw    r27, r28
                                571I	   bge     RAMBOOT_TCBHW_ALU_FailureHandler
                                572I	
                                573I	   ; * "below" with result TRUE
                                574I	ALU_Test58:
                                575I	   cmpw    r27, r28
                                576I	   blt     ALU_Test59                      ; Branch if Less Than
                                577I	   b       RAMBOOT_TCBHW_ALU_FailureHandler
                                578I	
                                579I	   ; * "below" with result FALSE
                                580I	ALU_Test59:
                                581I	   cmpw    r28, r27
                                582I	   blt     RAMBOOT_TCBHW_ALU_FailureHandler   ; Branch if Less Than
                                583I	
                                584I	   ; * "below or equal" with result TRUE
                                585I	ALU_Test60:
                                586I	   cmpw    r27, r28
                                587I	   ble     ALU_Test61   ; Branch if Less or Equal 
                                588I	   b       RAMBOOT_TCBHW_ALU_FailureHandler
                                589I	   
                                590I	   ; * "below or equal" with result FALSE.
                                591I	ALU_Test61:
                                592I	   cmpw    r28, r27
                                593I	   ble     RAMBOOT_TCBHW_ALU_FailureHandler   ; Branch if Less or Equal
                                594I	   .endm
  00000008 00                     6 	   
  00000008 00                     7 	   .global RAMBOOT_TestAndConfigureBasicHW
  00000008 00                     8 	
  00000008 00                     9 	RAMBOOT_TCBHW_InfiniteLoop:
  00000008 00  4800 0000         10 	   b RAMBOOT_TCBHW_InfiniteLoop
  0000000c 00                    11 	
  0000000c 00                    12 	RAMBOOT_TestAndConfigureBasicHW:
  0000000c 00                    13 	; GPR test
  0000000c 00                    14 	   RAMBOOT_TCBHW_TestGPRs
  0000000c 00  3c00 0000         42M	   lis     r0,0x00000000@h
                               File: RAMBOOT_Te Errors    0
  Location Pl  Code            Line 	Source Statement
  00000010 00  6000 5555         43M	   ori     r0,r0,0x55555555@l
  00000014 00                    44M	   RAMBOOT_TCBHW_MoveGPR0_ToGPR31_ThroughAllGPRs
  00000014 00  7c01 0378          8M	   mr      r1,r0
  00000018 00  7c22 0b78          9M	   mr      r2,r1
  0000001c 00  7c43 1378         10M	   mr      r3,r2
  00000020 00  7c64 1b78         11M	   mr      r4,r3
  00000024 00  7c85 2378         12M	   mr      r5,r4
  00000028 00  7ca6 2b78         13M	   mr      r6,r5
  0000002c 00  7cc7 3378         14M	   mr      r7,r6
  00000030 00  7ce8 3b78         15M	   mr      r8,r7
  00000034 00  7d09 4378         16M	   mr      r9,r8
  00000038 00  7d2a 4b78         17M	   mr      r10,r9
  0000003c 00  7d4b 5378         18M	   mr      r11,r10
  00000040 00  7d6c 5b78         19M	   mr      r12,r11
  00000044 00  7d8d 6378         20M	   mr      r13,r12
  00000048 00  7dae 6b78         21M	   mr      r14,r13
  0000004c 00  7dcf 7378         22M	   mr      r15,r14
  00000050 00  7df0 7b78         23M	   mr      r16,r15
  00000054 00  7e11 8378         24M	   mr      r17,r16
  00000058 00  7e32 8b78         25M	   mr      r18,r17
  0000005c 00  7e53 9378         26M	   mr      r19,r18
  00000060 00  7e74 9b78         27M	   mr      r20,r19
  00000064 00  7e95 a378         28M	   mr      r21,r20
  00000068 00  7eb6 ab78         29M	   mr      r22,r21
  0000006c 00  7ed7 b378         30M	   mr      r23,r22
  00000070 00  7ef8 bb78         31M	   mr      r24,r23
  00000074 00  7f19 c378         32M	   mr      r25,r24
  00000078 00  7f3a cb78         33M	   mr      r26,r25
  0000007c 00  7f5b d378         34M	   mr      r27,r26
  00000080 00  7f7c db78         35M	   mr      r28,r27
  00000084 00  7f9d e378         36M	   mr      r29,r28
  00000088 00  7fbe eb78         37M	   mr      r30,r29
  0000008c 00  7fdf f378         38M	   mr      r31,r30
  00000090 00  281f 5555         45M	   cmpli   cr0,r31,0x55555555@l
  00000094 00  4082 ff6c         46M	   bne     RAMBOOT_TCBHW_GPRs_FailureHandler
  00000098 00                    47M	   
  00000098 00  3c00 5555         48M	   lis     r0,0x55555555@h
  0000009c 00                    49M	   RAMBOOT_TCBHW_MoveGPR0_ToGPR31_ThroughAllGPRs
  0000009c 00  7c01 0378          8M	   mr      r1,r0
  000000a0 00  7c22 0b78          9M	   mr      r2,r1
  000000a4 00  7c43 1378         10M	   mr      r3,r2
  000000a8 00  7c64 1b78         11M	   mr      r4,r3
  000000ac 00  7c85 2378         12M	   mr      r5,r4
  000000b0 00  7ca6 2b78         13M	   mr      r6,r5
  000000b4 00  7cc7 3378         14M	   mr      r7,r6
  000000b8 00  7ce8 3b78         15M	   mr      r8,r7
  000000bc 00  7d09 4378         16M	   mr      r9,r8
  000000c0 00  7d2a 4b78         17M	   mr      r10,r9
  000000c4 00  7d4b 5378         18M	   mr      r11,r10
  000000c8 00  7d6c 5b78         19M	   mr      r12,r11
  000000cc 00  7d8d 6378         20M	   mr      r13,r12
  000000d0 00  7dae 6b78         21M	   mr      r14,r13
  000000d4 00  7dcf 7378         22M	   mr      r15,r14
  000000d8 00  7df0 7b78         23M	   mr      r16,r15
  000000dc 00  7e11 8378         24M	   mr      r17,r16
  000000e0 00  7e32 8b78         25M	   mr      r18,r17
  000000e4 00  7e53 9378         26M	   mr      r19,r18
                               File: RAMBOOT_Te Errors    0
  Location Pl  Code            Line 	Source Statement
  000000e8 00  7e74 9b78         27M	   mr      r20,r19
  000000ec 00  7e95 a378         28M	   mr      r21,r20
  000000f0 00  7eb6 ab78         29M	   mr      r22,r21
  000000f4 00  7ed7 b378         30M	   mr      r23,r22
  000000f8 00  7ef8 bb78         31M	   mr      r24,r23
  000000fc 00  7f19 c378         32M	   mr      r25,r24
  00000100 00  7f3a cb78         33M	   mr      r26,r25
  00000104 00  7f5b d378         34M	   mr      r27,r26
  00000108 00  7f7c db78         35M	   mr      r28,r27
  0000010c 00  7f9d e378         36M	   mr      r29,r28
  00000110 00  7fbe eb78         37M	   mr      r30,r29
  00000114 00  7fdf f378         38M	   mr      r31,r30
  00000118 00  57ff 803e         50M	   rotrwi  r31,r31,16
  0000011c 00  281f 5555         51M	   cmpli   cr0,r31,0x55555555@l
  00000120 00  4082 fee0         52M	   bne     RAMBOOT_TCBHW_GPRs_FailureHandler
  00000124 00                    53M	   
  00000124 00  3c00 0000         54M	   lis     r0, 0x00000000@h
  00000128 00  6000 aaaa         55M	   ori     r0,r0,0xAAAAAAAA@l
  0000012c 00                    56M	   RAMBOOT_TCBHW_MoveGPR0_ToGPR31_ThroughAllGPRs
  0000012c 00  7c01 0378          8M	   mr      r1,r0
  00000130 00  7c22 0b78          9M	   mr      r2,r1
  00000134 00  7c43 1378         10M	   mr      r3,r2
  00000138 00  7c64 1b78         11M	   mr      r4,r3
  0000013c 00  7c85 2378         12M	   mr      r5,r4
  00000140 00  7ca6 2b78         13M	   mr      r6,r5
  00000144 00  7cc7 3378         14M	   mr      r7,r6
  00000148 00  7ce8 3b78         15M	   mr      r8,r7
  0000014c 00  7d09 4378         16M	   mr      r9,r8
  00000150 00  7d2a 4b78         17M	   mr      r10,r9
  00000154 00  7d4b 5378         18M	   mr      r11,r10
  00000158 00  7d6c 5b78         19M	   mr      r12,r11
  0000015c 00  7d8d 6378         20M	   mr      r13,r12
  00000160 00  7dae 6b78         21M	   mr      r14,r13
  00000164 00  7dcf 7378         22M	   mr      r15,r14
  00000168 00  7df0 7b78         23M	   mr      r16,r15
  0000016c 00  7e11 8378         24M	   mr      r17,r16
  00000170 00  7e32 8b78         25M	   mr      r18,r17
  00000174 00  7e53 9378         26M	   mr      r19,r18
  00000178 00  7e74 9b78         27M	   mr      r20,r19
  0000017c 00  7e95 a378         28M	   mr      r21,r20
  00000180 00  7eb6 ab78         29M	   mr      r22,r21
  00000184 00  7ed7 b378         30M	   mr      r23,r22
  00000188 00  7ef8 bb78         31M	   mr      r24,r23
  0000018c 00  7f19 c378         32M	   mr      r25,r24
  00000190 00  7f3a cb78         33M	   mr      r26,r25
  00000194 00  7f5b d378         34M	   mr      r27,r26
  00000198 00  7f7c db78         35M	   mr      r28,r27
  0000019c 00  7f9d e378         36M	   mr      r29,r28
  000001a0 00  7fbe eb78         37M	   mr      r30,r29
  000001a4 00  7fdf f378         38M	   mr      r31,r30
  000001a8 00  281f aaaa         57M	   cmpli   cr0,r31,0xAAAAAAAA@l
  000001ac 00  4082 fe54         58M	   bne     RAMBOOT_TCBHW_GPRs_FailureHandler
  000001b0 00                    59M	   
  000001b0 00  3c00 aaaa         60M	   lis     r0,0xAAAAAAAA@h
  000001b4 00                    61M	   RAMBOOT_TCBHW_MoveGPR0_ToGPR31_ThroughAllGPRs
  000001b4 00  7c01 0378          8M	   mr      r1,r0
  000001b8 00  7c22 0b78          9M	   mr      r2,r1
                               File: RAMBOOT_Te Errors    0
  Location Pl  Code            Line 	Source Statement
  000001bc 00  7c43 1378         10M	   mr      r3,r2
  000001c0 00  7c64 1b78         11M	   mr      r4,r3
  000001c4 00  7c85 2378         12M	   mr      r5,r4
  000001c8 00  7ca6 2b78         13M	   mr      r6,r5
  000001cc 00  7cc7 3378         14M	   mr      r7,r6
  000001d0 00  7ce8 3b78         15M	   mr      r8,r7
  000001d4 00  7d09 4378         16M	   mr      r9,r8
  000001d8 00  7d2a 4b78         17M	   mr      r10,r9
  000001dc 00  7d4b 5378         18M	   mr      r11,r10
  000001e0 00  7d6c 5b78         19M	   mr      r12,r11
  000001e4 00  7d8d 6378         20M	   mr      r13,r12
  000001e8 00  7dae 6b78         21M	   mr      r14,r13
  000001ec 00  7dcf 7378         22M	   mr      r15,r14
  000001f0 00  7df0 7b78         23M	   mr      r16,r15
  000001f4 00  7e11 8378         24M	   mr      r17,r16
  000001f8 00  7e32 8b78         25M	   mr      r18,r17
  000001fc 00  7e53 9378         26M	   mr      r19,r18
  00000200 00  7e74 9b78         27M	   mr      r20,r19
  00000204 00  7e95 a378         28M	   mr      r21,r20
  00000208 00  7eb6 ab78         29M	   mr      r22,r21
  0000020c 00  7ed7 b378         30M	   mr      r23,r22
  00000210 00  7ef8 bb78         31M	   mr      r24,r23
  00000214 00  7f19 c378         32M	   mr      r25,r24
  00000218 00  7f3a cb78         33M	   mr      r26,r25
  0000021c 00  7f5b d378         34M	   mr      r27,r26
  00000220 00  7f7c db78         35M	   mr      r28,r27
  00000224 00  7f9d e378         36M	   mr      r29,r28
  00000228 00  7fbe eb78         37M	   mr      r30,r29
  0000022c 00  7fdf f378         38M	   mr      r31,r30
  00000230 00  57ff 803e         62M	   rotrwi  r31,r31,16
  00000234 00  281f aaaa         63M	   cmpli   cr0,r31,0xAAAAAAAA@l
  00000238 00  4082 fdc8         64M	   bne     RAMBOOT_TCBHW_GPRs_FailureHandler
  0000023c 00                    15 	   
  0000023c 00                    16 	; ALU test
  0000023c 00                    17 	   RAMBOOT_TCBHW_TestALU
  0000023c 00                    38M	; Load constants values used during ALU test
  0000023c 00  3c20 2aab         39M	   lis     r1, C_2AAAAAAA@ha
  00000240 00  3821 aaaa         40M	   addi    r1, r1, C_2AAAAAAA@l
  00000244 00  3c40 d555         41M	   lis     r2, C_D5555555@ha
  00000248 00  3842 5555         42M	   addi    r2, r2, C_D5555555@l
  0000024c 00  3c60 1111         43M	   lis     r3, C_11111111@ha
  00000250 00  3863 1111         44M	   addi    r3, r3, C_11111111@l
  00000254 00  3c80 4444         45M	   lis     r4, C_44444444@ha
  00000258 00  3884 4444         46M	   addi    r4, r4, C_44444444@l
  0000025c 00  3ca0 5555         47M	   lis     r5, C_55555555@ha
  00000260 00  38a5 5555         48M	   addi    r5, r5, C_55555555@l
  00000264 00  3cc0 2222         49M	   lis     r6, C_22222222@ha
  00000268 00  38c6 2222         50M	   addi    r6, r6, C_22222222@l
  0000026c 00  3ce0 8889         51M	   lis     r7, C_88888888@ha
  00000270 00  38e7 8888         52M	   addi    r7, r7, C_88888888@l
  00000274 00  3d00 aaab         53M	   lis     r8, C_AAAAAAAA@ha
  00000278 00  3908 aaaa         54M	   addi    r8, r8, C_AAAAAAAA@l
  0000027c 00  3d20 cccd         55M	   lis     r9, C_CCCCCCCC@ha
  00000280 00  3929 cccc         56M	   addi    r9, r9, C_CCCCCCCC@l
  00000284 00  3d40 3333         57M	   lis     r10, C_33333333@ha
  00000288 00  394a 3333         58M	   addi    r10, r10, C_33333333@l
  0000028c 00  3d60 0000         59M	   lis     r11, C_FFFFFFFF@ha
                               File: RAMBOOT_Te Errors    0
  Location Pl  Code            Line 	Source Statement
  00000290 00  396b ffff         60M	   addi    r11, r11, C_FFFFFFFF@l
  00000294 00  3d80 0000         61M	   lis     r12, C_00000005@ha
  00000298 00  398c 0005         62M	   addi    r12, r12, C_00000005@l
  0000029c 00  3da0 bbbc         63M	   lis     r13, C_BBBBBBBC@ha
  000002a0 00  39ad bbbc         64M	   addi    r13, r13, C_BBBBBBBC@l
  000002a4 00  3dc0 1234         65M	   lis     r14, C_12345678@ha
  000002a8 00  39ce 5678         66M	   addi    r14, r14, C_12345678@l
  000002ac 00  3de0 f3dd         67M	   lis     r15, C_F3DD1BB0@ha
  000002b0 00  39ef 1bb0         68M	   addi    r15, r15, C_F3DD1BB0@l
  000002b4 00  3e00 e000         69M	   lis     r16, C_E0000000@ha
  000002b8 00  3a10 0000         70M	   addi    r16, r16, C_E0000000@l
  000002bc 00  3e20 0000         71M	   lis     r17, C_00000002@ha
  000002c0 00  3a31 0002         72M	   addi    r17, r17, C_00000002@l
  000002c4 00  3e40 0000         73M	   lis     r18, C_00000003@ha
  000002c8 00  3a52 0003         74M	   addi    r18, r18, C_00000003@l
  000002cc 00  3e60 0000         75M	   lis     r19, C_00000000@ha
  000002d0 00  3a73 0000         76M	   addi    r19, r19, C_00000000@l
  000002d4 00  3e80 0000         77M	   lis     r20, C_00000001@ha
  000002d8 00  3a94 0001         78M	   addi    r20, r20, C_00000001@l
  000002dc 00  3ea0 0000         79M	   lis     r21, C_00000007@ha
  000002e0 00  3ab5 0007         80M	   addi    r21, r21, C_00000007@l
  000002e4 00  3ec0 0000         81M	   lis     r22, C_FFFFFFFE@ha
  000002e8 00  3ad6 fffe         82M	   addi    r22, r22, C_FFFFFFFE@l
  000002ec 00  3ee0 0000         83M	   lis     r23, C_00000004@ha
  000002f0 00  3af7 0004         84M	   addi    r23, r23, C_00000004@l
  000002f4 00  3f00 aaab         85M	   lis     r24, C_AAAAAAAB@ha
  000002f8 00  3b18 aaab         86M	   addi    r24, r24, C_AAAAAAAB@l
  000002fc 00  3f20 ffff         87M	   lis     r25, C_FFFF0000@ha
  00000300 00  3b39 0000         88M	   addi    r25, r25, C_FFFF0000@l
  00000304 00  3f40 0001         89M	   lis     r26, C_0000FFFF@ha
  00000308 00  3b5a ffff         90M	   addi    r26, r26, C_0000FFFF@l
  0000030c 00  3f60 0000         91M	   lis     r27, C_1@ha
  00000310 00  3b7b 0001         92M	   addi    r27, r27, C_1@l
  00000314 00  3f80 0000         93M	   lis     r28, C_16@ha
  00000318 00  3b9c 0010         94M	   addi    r28, r28, C_16@l
  0000031c 00  3fa0 5555         95M	   lis     r29, C_55555554@ha
  00000320 00  3bbd 5554         96M	   addi    r29, r29, C_55555554@l
  00000324 00                    97M	
  00000324 00                    98M	   ;           Test arithmetical operations:
  00000324 00                    99M	   ; ==================================================
  00000324 00                   100M	   ; - integer addition on 32 bits words
  00000324 00                   101M	   ; --------------------------------------------------
  00000324 00                   102M	   ; r3  =  C_11111111
  00000324 00                   103M	   ; r4  =  C_44444444
  00000324 00                   104M	   ; r5  =  C_55555555
  00000324 00                   105M	   ; r6  =  C_22222222
  00000324 00                   106M	   ; r7  =  C_88888888
  00000324 00                   107M	   ; r8  =  C_AAAAAAAA
  00000324 00                   108M	   ; r9  =  C_CCCCCCCC
  00000324 00                   109M	   ; r10 =  C_33333333
  00000324 00                   110M	   ; r11 =  C_FFFFFFFF
  00000324 00                   111M	   
  00000324 00                   112M	   ; * 0x11111111 + 0x44444444 -> 0x55555555
  00000324 00                   113M	ALU_Test01:
  00000324 00  7fe3 2214        114M	   add     r31, r3, r4
  00000328 00  7c1f 2800        115M	   cmpw    r31, r5
  0000032c 00  4082 fcd8        116M	   bne     RAMBOOT_TCBHW_ALU_FailureHandler
                               File: RAMBOOT_Te Errors    0
  Location Pl  Code            Line 	Source Statement
  00000330 00                   117M	   
  00000330 00                   118M	   ; * 0x22222222 + 0x88888888 -> 0xaaaaaaaa
  00000330 00                   119M	ALU_Test02:
  00000330 00  7fe6 3a14        120M	   add     r31, r6, r7
  00000334 00  7c1f 4000        121M	   cmpw    r31, r8
  00000338 00  4082 fccc        122M	   bne     RAMBOOT_TCBHW_ALU_FailureHandler
  0000033c 00                   123M	   
  0000033c 00                   124M	   ; * 0xcccccccc + 0x33333333 -> 0xffffffff
  0000033c 00                   125M	ALU_Test03:
  0000033c 00  7fe9 5214        126M	   add     r31, r9, r10
  00000340 00  7c1f 5800        127M	   cmpw    r31, r11
  00000344 00  4082 fcc0        128M	   bne     RAMBOOT_TCBHW_ALU_FailureHandler
  00000348 00                   129M	   
  00000348 00                   130M	   ; - integer substraction on 32 bits words
  00000348 00                   131M	   ; --------------------------------------------------
  00000348 00                   132M	   ; r3  = C_11111111
  00000348 00                   133M	   ; r4  = C_44444444
  00000348 00                   134M	   ; r5  = C_55555555
  00000348 00                   135M	   ; r6  = C_22222222
  00000348 00                   136M	   ; r7  = C_88888888
  00000348 00                   137M	   ; r8  = C_AAAAAAAA
  00000348 00                   138M	   ; r9  = C_CCCCCCCC
  00000348 00                   139M	   ; r10 = C_33333333
  00000348 00                   140M	   ; r11 = C_FFFFFFFF
  00000348 00                   141M	
  00000348 00                   142M	   ; * 0x55555555 - 0x11111111 -> 0x44444444
  00000348 00                   143M	ALU_Test04:
  00000348 00  7fe3 2850        144M	   sub     r31, r5, r3
  0000034c 00  7c1f 2000        145M	   cmpw    r31, r4
  00000350 00  4082 fcb4        146M	   bne     RAMBOOT_TCBHW_ALU_FailureHandler
  00000354 00                   147M	   
  00000354 00                   148M	   ; * 0xaaaaaaaa - 0x22222222 -> 0x88888888
  00000354 00                   149M	ALU_Test05:
  00000354 00  7fe6 4050        150M	   sub     r31, r8, r6
  00000358 00  7c1f 3800        151M	   cmpw    r31, r7
  0000035c 00  4082 fca8        152M	   bne     RAMBOOT_TCBHW_ALU_FailureHandler
  00000360 00                   153M	   
  00000360 00                   154M	   ; * 0xffffffff - 0xcccccccc -> 0x33333333
  00000360 00                   155M	ALU_Test06:
  00000360 00  7fe9 5850        156M	   sub     r31, r11, r9
  00000364 00  7c1f 5000        157M	   cmpw    r31, r10
  00000368 00  4082 fc9c        158M	   bne     RAMBOOT_TCBHW_ALU_FailureHandler
  0000036c 00                   159M	
  0000036c 00                   160M	   ; - integer multiplication on 32 bits words
  0000036c 00                   161M	   ; --------------------------------------------------
  0000036c 00                   162M	   ; r12 = C_00000005
  0000036c 00                   163M	   ; r3  = C_11111111
  0000036c 00                   164M	   ; r5  = C_55555555
  0000036c 00                   165M	   ; r6  = C_22222222
  0000036c 00                   166M	   ; r8  = C_AAAAAAAA
  0000036c 00                   167M	   ; r9  = C_CCCCCCCC
  0000036c 00                   168M	   ; r13 = C_BBBBBBBC
  0000036c 00                   169M	   ; r14 = C_12345678
  0000036c 00                   170M	   ; r15 = C_F3DD1BB0
  0000036c 00                   171M	   ; r16 = C_E0000000
  0000036c 00                   172M	
  0000036c 00                   173M	   ; * 0x00000005 * 0x11111111 -> 0x55555555
                               File: RAMBOOT_Te Errors    0
  Location Pl  Code            Line 	Source Statement
  0000036c 00                   174M	ALU_Test07:
  0000036c 00  7fec 19d6        175M	   mullw   r31, r12, r3
  00000370 00  7c1f 2800        176M	   cmpw    r31, r5
  00000374 00  4082 fc90        177M	   bne     RAMBOOT_TCBHW_ALU_FailureHandler
  00000378 00                   178M	   
  00000378 00                   179M	   ; * 0x00000005 * 0x22222222 -> 0xaaaaaaaa
  00000378 00                   180M	ALU_Test08:
  00000378 00  7fec 31d6        181M	   mullw   r31, r12, r6
  0000037c 00  7c1f 4000        182M	   cmpw    r31, r8
  00000380 00  4082 fc84        183M	   bne     RAMBOOT_TCBHW_ALU_FailureHandler
  00000384 00                   184M	
  00000384 00                   185M	   ; * 0x55555555 * 0xcccccccc -> 0xbbbbbbbc
  00000384 00                   186M	ALU_Test09:
  00000384 00  7fe5 49d6        187M	   mullw   r31, r5, r9
  00000388 00  7c1f 6800        188M	   cmpw    r31, r13
  0000038c 00  4082 fc78        189M	   bne     RAMBOOT_TCBHW_ALU_FailureHandler
  00000390 00                   190M	
  00000390 00                   191M	   ; * 0xaaaaaaaa * 0x12345678 -> 0xf3dd1bb0
  00000390 00                   192M	ALU_Test10:
  00000390 00  7fe8 71d6        193M	   mullw   r31, r8, r14
  00000394 00  7c1f 7800        194M	   cmpw    r31, r15
  00000398 00  4082 fc6c        195M	   bne     RAMBOOT_TCBHW_ALU_FailureHandler
  0000039c 00                   196M	
  0000039c 00                   197M	   ; * 0xe0000000 * 0x11111111 -> 0xe0000000
  0000039c 00                   198M	ALU_Test11:
  0000039c 00  7ff0 19d6        199M	   mullw   r31, r16, r3
  000003a0 00  7c1f 8000        200M	   cmpw    r31, r16
  000003a4 00  4082 fc60        201M	   bne     RAMBOOT_TCBHW_ALU_FailureHandler
  000003a8 00                   202M	
  000003a8 00                   203M	   ; - signed integer division on 32 bits words
  000003a8 00                   204M	   ; --------------------------------------------------
  000003a8 00                   205M	   ; r8  = C_AAAAAAAA
  000003a8 00                   206M	   ; r17 = C_00000002
  000003a8 00                   207M	   ; r2  = C_D5555555
  000003a8 00                   208M	   ; r11 = C_FFFFFFFF
  000003a8 00                   209M	   ; r18 = C_00000003
  000003a8 00                   210M	   ; r19 = C_00000000
  000003a8 00                   211M	   ; r5  = C_55555555
  000003a8 00                   212M	   ; r24 = 0xAAAAAAAB
  000003a8 00                   213M	   
  000003a8 00                   214M	   ; * 0xaaaaaaaa / 0x00000002 -> 0xd5555555
  000003a8 00                   215M	ALU_Test12:
  000003a8 00  7fe8 8bd6        216M	   divw    r31, r8, r17
  000003ac 00  7c1f 1000        217M	   cmpw    r31, r2
  000003b0 00  4082 fc54        218M	   bne     RAMBOOT_TCBHW_ALU_FailureHandler
  000003b4 00                   219M	   
  000003b4 00                   220M	   ; * 0xffffffff / 0x00000003 -> 0x00000000
  000003b4 00                   221M	ALU_Test13:
  000003b4 00  7feb 93d6        222M	   divw    r31, r11, r18
  000003b8 00  7c1f 9800        223M	   cmpw    r31, r19
  000003bc 00  4082 fc48        224M	   bne     RAMBOOT_TCBHW_ALU_FailureHandler
  000003c0 00                   225M	
  000003c0 00                   226M	   ; * 0x55555555 / 0xffffffff -> 0xaaaaaaab
  000003c0 00                   227M	ALU_Test14:
  000003c0 00  7fe5 5bd6        228M	   divw    r31, r5, r11
  000003c4 00  7c1f c000        229M	   cmpw    r31, r24
  000003c8 00  4082 fc3c        230M	   bne     RAMBOOT_TCBHW_ALU_FailureHandler
                               File: RAMBOOT_Te Errors    0
  Location Pl  Code            Line 	Source Statement
  000003cc 00                   231M	
  000003cc 00                   232M	   ; - unsigned integer division on 32 bits words
  000003cc 00                   233M	   ; --------------------------------------------------
  000003cc 00                   234M	   ; r11 = C_FFFFFFFF
  000003cc 00                   235M	   ; r18 = C_00000003
  000003cc 00                   236M	   ; r5  = C_55555555
  000003cc 00                   237M	   ; r8  = C_AAAAAAAA
  000003cc 00                   238M	   ; r20 = C_00000001
  000003cc 00                   239M	   ; r12 = C_00000005
  000003cc 00                   240M	   ; r3  = C_11111111
  000003cc 00                   241M	   ; r21 = C_00000007
  000003cc 00                   242M	   ; r19 = C_00000000
  000003cc 00                   243M	   ; r22 = C_FFFFFFFE
  000003cc 00                   244M	   ; r23 = C_00000004
  000003cc 00                   245M	   ; r17 = C_00000002
  000003cc 00                   246M	
  000003cc 00                   247M	   ; * 0xffffffff / 0x00000003 -> 0x55555555
  000003cc 00                   248M	ALU_Test15:
  000003cc 00  7feb 9396        249M	   divwu   r31, r11, r18
  000003d0 00  7c1f 2800        250M	   cmpw    r31, r5
  000003d4 00  4082 fc30        251M	   bne     RAMBOOT_TCBHW_ALU_FailureHandler
  000003d8 00                   252M	   
  000003d8 00                   253M	   ; * 0xaaaaaaaa / 0x00000001 -> 0xaaaaaaaa
  000003d8 00                   254M	ALU_Test16:
  000003d8 00  7fe8 a396        255M	   divwu   r31, r8, r20
  000003dc 00  7c1f 4000        256M	   cmpw    r31, r8
  000003e0 00  4082 fc24        257M	   bne     RAMBOOT_TCBHW_ALU_FailureHandler
  000003e4 00                   258M	
  000003e4 00                   259M	   ; * 0x55555555 / 0x00000005 -> 0x11111111
  000003e4 00                   260M	ALU_Test17:
  000003e4 00  7fe5 6396        261M	   divwu   r31, r5, r12
  000003e8 00  7c1f 1800        262M	   cmpw    r31, r3
  000003ec 00  4082 fc18        263M	   bne     RAMBOOT_TCBHW_ALU_FailureHandler
  000003f0 00                   264M	
  000003f0 00                   265M	   ; * 0x00000005 / 0x00000007 -> 0x00000000
  000003f0 00                   266M	ALU_Test18:
  000003f0 00  7fec ab96        267M	   divwu   r31, r12, r21
  000003f4 00  7c1f 9800        268M	   cmpw    r31, r19
  000003f8 00  4082 fc0c        269M	   bne     RAMBOOT_TCBHW_ALU_FailureHandler
  000003fc 00                   270M	
  000003fc 00                   271M	   ; * 0xfffffffe / 0xffffffff -> 0x00000000
  000003fc 00                   272M	ALU_Test19:
  000003fc 00  7ff6 5b96        273M	   divwu   r31, r22, r11
  00000400 00  7c1f 9800        274M	   cmpw    r31, r19
  00000404 00  4082 fc00        275M	   bne     RAMBOOT_TCBHW_ALU_FailureHandler
  00000408 00                   276M	
  00000408 00                   277M	   ; * 0x00000004 / 0x00000002 -> 0x00000002
  00000408 00                   278M	ALU_Test20:
  00000408 00  7ff7 8b96        279M	   divwu   r31, r23, r17
  0000040c 00  7c1f 8800        280M	   cmpw    r31, r17
  00000410 00  4082 fbf4        281M	   bne     RAMBOOT_TCBHW_ALU_FailureHandler
  00000414 00                   282M	   
  00000414 00                   283M	   ; - negate on 32 bits word
  00000414 00                   284M	   ; --------------------------------------------------
  00000414 00                   285M	   ; r5  = C_55555555
  00000414 00                   286M	   ; r24 = C_AAAAAAAB
  00000414 00                   287M	   ; r20 = C_00000001
                               File: RAMBOOT_Te Errors    0
  Location Pl  Code            Line 	Source Statement
  00000414 00                   288M	   ; r11 = C_FFFFFFFF
  00000414 00                   289M	   
  00000414 00                   290M	   ; * negate 0x55555555 -> 0xaaaaaaab
  00000414 00                   291M	ALU_Test21:
  00000414 00  7fe5 00d0        292M	   neg     r31, r5
  00000418 00  7c1f c000        293M	   cmpw    r31, r24
  0000041c 00  4082 fbe8        294M	   bne     RAMBOOT_TCBHW_ALU_FailureHandler
  00000420 00                   295M	   
  00000420 00                   296M	   ; * negate 0x00000001 -> 0xffffffff
  00000420 00                   297M	ALU_Test22:
  00000420 00  7ff4 00d0        298M	   neg     r31, r20
  00000424 00  7c1f 5800        299M	   cmpw    r31, r11
  00000428 00  4082 fbdc        300M	   bne     RAMBOOT_TCBHW_ALU_FailureHandler
  0000042c 00                   301M	   
  0000042c 00                   302M	   ;           Test logical operations:
  0000042c 00                   303M	   ; ==================================================
  0000042c 00                   304M	   ; - logical bitwise OR on 32 bits words
  0000042c 00                   305M	   ; --------------------------------------------------
  0000042c 00                   306M	   ; r5  = C_55555555
  0000042c 00                   307M	   ; r11 = C_FFFFFFFF
  0000042c 00                   308M	   ; r8  = C_AAAAAAAA
  0000042c 00                   309M	
  0000042c 00                   310M	   ; * 0xaaaaaaaa OR 0x55555555 -> 0xffffffff
  0000042c 00                   311M	ALU_Test23:
  0000042c 00  7d1f 2b78        312M	   or      r31, r8, r5
  00000430 00  7c1f 5800        313M	   cmpw    r31, r11
  00000434 00  4082 fbd0        314M	   bne     RAMBOOT_TCBHW_ALU_FailureHandler
  00000438 00                   315M	   
  00000438 00                   316M	   ; * 0xaaaaaaaa OR 0xaaaaaaaa -> 0xaaaaaaaa
  00000438 00                   317M	ALU_Test24:
  00000438 00  7d1f 4378        318M	   or      r31, r8, r8
  0000043c 00  7c1f 4000        319M	   cmpw    r31, r8
  00000440 00  4082 fbc4        320M	   bne     RAMBOOT_TCBHW_ALU_FailureHandler
  00000444 00                   321M	
  00000444 00                   322M	   ; * 0x55555555 OR 0x55555555 -> 0x55555555
  00000444 00                   323M	ALU_Test25:
  00000444 00  7cbf 2b78        324M	   or      r31, r5, r5
  00000448 00  7c1f 2800        325M	   cmpw    r31, r5
  0000044c 00  4082 fbb8        326M	   bne     RAMBOOT_TCBHW_ALU_FailureHandler
  00000450 00                   327M	   
  00000450 00                   328M	   ; - logical bitwise AND on 32 bits words
  00000450 00                   329M	   ; --------------------------------------------------
  00000450 00                   330M	   ; r5  = C_55555555
  00000450 00                   331M	   ; r11 = C_FFFFFFFF
  00000450 00                   332M	   ; r19 = C_00000000
  00000450 00                   333M	   ; r8  = C_AAAAAAAA
  00000450 00                   334M	
  00000450 00                   335M	   ; * 0xaaaaaaaa AND 0x55555555 -> 0x00000000
  00000450 00                   336M	ALU_Test26:
  00000450 00  7d1f 2838        337M	   and     r31, r8, r5
  00000454 00  7c1f 9800        338M	   cmpw    r31, r19
  00000458 00  4082 fbac        339M	   bne     RAMBOOT_TCBHW_ALU_FailureHandler
  0000045c 00                   340M	   
  0000045c 00                   341M	   ; * 0xaaaaaaaa AND 0xaaaaaaaa -> 0xaaaaaaaa
  0000045c 00                   342M	ALU_Test27:
  0000045c 00  7d1f 4038        343M	   and     r31, r8, r8
  00000460 00  7c1f 4000        344M	   cmpw    r31, r8
                               File: RAMBOOT_Te Errors    0
  Location Pl  Code            Line 	Source Statement
  00000464 00  4082 fba0        345M	   bne     RAMBOOT_TCBHW_ALU_FailureHandler
  00000468 00                   346M	
  00000468 00                   347M	   ; * 0x55555555 AND 0x55555555 -> 0x55555555
  00000468 00                   348M	ALU_Test28:
  00000468 00  7cbf 2838        349M	   and     r31, r5, r5
  0000046c 00  7c1f 2800        350M	   cmpw    r31, r5
  00000470 00  4082 fb94        351M	   bne     RAMBOOT_TCBHW_ALU_FailureHandler
  00000474 00                   352M	   
  00000474 00                   353M	   ; - logical bitwise XOR on 32 bits words
  00000474 00                   354M	   ; --------------------------------------------------
  00000474 00                   355M	   ; r5  = C_55555555
  00000474 00                   356M	   ; r11 = C_FFFFFFFF
  00000474 00                   357M	   ; r8  = C_AAAAAAAA
  00000474 00                   358M	   ; r19 = C_00000000
  00000474 00                   359M	   
  00000474 00                   360M	   ; * 0xaaaaaaaa XOR 0x55555555 -> 0xffffffff
  00000474 00                   361M	ALU_Test29:
  00000474 00  7d1f 2a78        362M	   xor     r31, r8, r5
  00000478 00  7c1f 5800        363M	   cmpw    r31, r11
  0000047c 00  4082 fb88        364M	   bne     RAMBOOT_TCBHW_ALU_FailureHandler
  00000480 00                   365M	
  00000480 00                   366M	   ; * 0xaaaaaaaa XOR 0xaaaaaaaa -> 0x00000000
  00000480 00                   367M	ALU_Test30:
  00000480 00  7d1f 4278        368M	   xor     r31, r8, r8
  00000484 00  7c1f 9800        369M	   cmpw    r31, r19
  00000488 00  4082 fb7c        370M	   bne     RAMBOOT_TCBHW_ALU_FailureHandler
  0000048c 00                   371M	
  0000048c 00                   372M	   ; * 0x55555555 XOR 0x55555555 -> 0x00000000
  0000048c 00                   373M	ALU_Test31:
  0000048c 00  7cbf 2a78        374M	   xor     r31, r5, r5
  00000490 00  7c1f 9800        375M	   cmpw    r31, r19
  00000494 00  4082 fb70        376M	   bne     RAMBOOT_TCBHW_ALU_FailureHandler
  00000498 00                   377M	   
  00000498 00                   378M	   ; - logical bitwise NOR on 32 bits words
  00000498 00                   379M	   ; --------------------------------------------------
  00000498 00                   380M	   ; r5  = C_55555555
  00000498 00                   381M	   ; r11 = C_FFFFFFFF
  00000498 00                   382M	   ; r8  = C_AAAAAAAA
  00000498 00                   383M	   ; r19 = C_00000000
  00000498 00                   384M	   
  00000498 00                   385M	   ; * 0xaaaaaaaa NOR 0x55555555 -> 0x00000000
  00000498 00                   386M	ALU_Test32:
  00000498 00  7d1f 28f8        387M	   nor     r31, r8, r5
  0000049c 00  7c1f 9800        388M	   cmpw    r31, r19
  000004a0 00  4082 fb64        389M	   bne     RAMBOOT_TCBHW_ALU_FailureHandler
  000004a4 00                   390M	
  000004a4 00                   391M	   ; * 0xaaaaaaaa NOR 0xaaaaaaaa -> 0x55555555
  000004a4 00                   392M	ALU_Test33:
  000004a4 00  7d1f 40f8        393M	   nor     r31, r8, r8
  000004a8 00  7c1f 2800        394M	   cmpw    r31, r5
  000004ac 00  4082 fb58        395M	   bne     RAMBOOT_TCBHW_ALU_FailureHandler
  000004b0 00                   396M	   
  000004b0 00                   397M	   ; * 0x55555555 NOR 0x55555555 -> 0xaaaaaaaa
  000004b0 00                   398M	ALU_Test34:
  000004b0 00  7cbf 28f8        399M	   nor     r31, r5, r5
  000004b4 00  7c1f 4000        400M	   cmpw    r31, r8
  000004b8 00  4082 fb4c        401M	   bne     RAMBOOT_TCBHW_ALU_FailureHandler
                               File: RAMBOOT_Te Errors    0
  Location Pl  Code            Line 	Source Statement
  000004bc 00                   402M	   
  000004bc 00                   403M	   ; - logical bitwise NAND on 32 bits words
  000004bc 00                   404M	   ; --------------------------------------------------
  000004bc 00                   405M	   ; r5  = C_55555555
  000004bc 00                   406M	   ; r11 = C_FFFFFFFF
  000004bc 00                   407M	   ; r8  = C_AAAAAAAA
  000004bc 00                   408M	
  000004bc 00                   409M	   ; * 0xaaaaaaaa NAND 0x55555555 -> 0xffffffff
  000004bc 00                   410M	ALU_Test35:
  000004bc 00  7d1f 2bb8        411M	   nand    r31, r8, r5
  000004c0 00  7c1f 5800        412M	   cmpw    r31, r11
  000004c4 00  4082 fb40        413M	   bne     RAMBOOT_TCBHW_ALU_FailureHandler
  000004c8 00                   414M	   
  000004c8 00                   415M	   ; * 0xaaaaaaaa NAND 0xaaaaaaaa -> 0x55555555
  000004c8 00                   416M	ALU_Test36:
  000004c8 00  7d1f 43b8        417M	   nand    r31, r8, r8
  000004cc 00  7c1f 2800        418M	   cmpw    r31, r5
  000004d0 00  4082 fb34        419M	   bne     RAMBOOT_TCBHW_ALU_FailureHandler
  000004d4 00                   420M	   
  000004d4 00                   421M	   ; * 0x55555555 NAND 0x55555555 -> 0xaaaaaaaa
  000004d4 00                   422M	ALU_Test37:
  000004d4 00  7cbf 2bb8        423M	   nand    r31, r5, r5
  000004d8 00  7c1f 4000        424M	   cmpw    r31, r8
  000004dc 00  4082 fb28        425M	   bne     RAMBOOT_TCBHW_ALU_FailureHandler
  000004e0 00                   426M	   
  000004e0 00                   427M	   ; - logical bitwise NOT on 32 bits words
  000004e0 00                   428M	   ; --------------------------------------------------
  000004e0 00                   429M	   ; r5  = C_55555555
  000004e0 00                   430M	   ; r8  = C_AAAAAAAA
  000004e0 00                   431M	
  000004e0 00                   432M	   ; * NOT 0xaaaaaaaa -> 0x55555555
  000004e0 00                   433M	ALU_Test38:
  000004e0 00  7d1f 40f8        434M	   not     r31, r8
  000004e4 00  7c1f 2800        435M	   cmpw    r31, r5
  000004e8 00  4082 fb1c        436M	   bne     RAMBOOT_TCBHW_ALU_FailureHandler
  000004ec 00                   437M	
  000004ec 00                   438M	   ; * NOT 0x55555555 -> 0xaaaaaaaa
  000004ec 00                   439M	ALU_Test39:
  000004ec 00  7cbf 28f8        440M	   not     r31, r5
  000004f0 00  7c1f 4000        441M	   cmpw    r31, r8
  000004f4 00  4082 fb10        442M	   bne     RAMBOOT_TCBHW_ALU_FailureHandler
  000004f8 00                   443M	
  000004f8 00                   444M	   ; - logical bitwise rotate left and right on 32 bits words
  000004f8 00                   445M	   ; --------------------------------------------------------
  000004f8 00                   446M	   ; r5  = C_55555555
  000004f8 00                   447M	   ; r8  = C_AAAAAAAA
  000004f8 00                   448M	   ; r25 = C_FFFF0000
  000004f8 00                   449M	   ; r26 = C_0000FFFF
  000004f8 00                   450M	
  000004f8 00                   451M	   ; * Rotate left 1 step 0x55555555 -> 0xaaaaaaaa
  000004f8 00                   452M	ALU_Test40:
  000004f8 00  54bf 083e        453M	   rotlwi  r31, r5, C_1
  000004fc 00  7c1f 4000        454M	   cmpw    r31, r8
  00000500 00  4082 fb04        455M	   bne     RAMBOOT_TCBHW_ALU_FailureHandler
  00000504 00                   456M	   
  00000504 00                   457M	   ; * Rotate left 1 step 0xaaaaaaaa -> 0x55555555
  00000504 00                   458M	ALU_Test41:
                               File: RAMBOOT_Te Errors    0
  Location Pl  Code            Line 	Source Statement
  00000504 00  551f 083e        459M	   rotlwi  r31, r8, C_1
  00000508 00  7c1f 2800        460M	   cmpw    r31, r5
  0000050c 00  4082 faf8        461M	   bne     RAMBOOT_TCBHW_ALU_FailureHandler
  00000510 00                   462M	
  00000510 00                   463M	   ; * Rotate left 16 steps 0xffff0000 -> 0x0000ffff
  00000510 00                   464M	ALU_Test42:
  00000510 00  573f 803e        465M	   rotlwi  r31, r25, C_16
  00000514 00  7c1f d000        466M	   cmpw    r31, r26
  00000518 00  4082 faec        467M	   bne     RAMBOOT_TCBHW_ALU_FailureHandler
  0000051c 00                   468M	   
  0000051c 00                   469M	   ; * Rotate right 16 steps 0x0000ffff -> 0xffff0000
  0000051c 00                   470M	ALU_Test43:
  0000051c 00  575f 803e        471M	   rotrwi  r31, r26, C_16
  00000520 00  7c1f c800        472M	   cmpw    r31, r25
  00000524 00  4082 fae0        473M	   bne     RAMBOOT_TCBHW_ALU_FailureHandler
  00000528 00                   474M	
  00000528 00                   475M	   ; * Rotate right 1 step 0x55555555 -> 0xaaaaaaaa
  00000528 00                   476M	ALU_Test44:
  00000528 00  54bf f83e        477M	   rotrwi  r31, r5, C_1
  0000052c 00  7c1f 4000        478M	   cmpw    r31, r8
  00000530 00  4082 fad4        479M	   bne     RAMBOOT_TCBHW_ALU_FailureHandler
  00000534 00                   480M	   
  00000534 00                   481M	   ; - logical bitwise shift on 32 bits words
  00000534 00                   482M	   ; --------------------------------------------------
  00000534 00                   483M	   ; r5  = C_55555555
  00000534 00                   484M	   ; r8  = C_AAAAAAAA
  00000534 00                   485M	   ; r29 = C_55555554
  00000534 00                   486M	   ; r11 = C_FFFFFFFF
  00000534 00                   487M	   ; r25 = C_FFFF0000
  00000534 00                   488M	   ; r26 = C_0000FFFF
  00000534 00                   489M	   ; r1  = C_2AAAAAAA
  00000534 00                   490M	
  00000534 00                   491M	   ; * Shift left 1 step 0x55555555 -> 0xaaaaaaaa
  00000534 00                   492M	ALU_Test45:
  00000534 00  54bf 083c        493M	   slwi    r31, r5, C_1
  00000538 00  7c1f 4000        494M	   cmpw    r31, r8
  0000053c 00  4082 fac8        495M	   bne     RAMBOOT_TCBHW_ALU_FailureHandler
  00000540 00                   496M	   
  00000540 00                   497M	   ; * Shift left 1 step 0xaaaaaaaa -> 0x55555554
  00000540 00                   498M	ALU_Test46:
  00000540 00  551f 083c        499M	   slwi    r31, r8, C_1
  00000544 00  7c1f e800        500M	   cmpw    r31, r29
  00000548 00  4082 fabc        501M	   bne     RAMBOOT_TCBHW_ALU_FailureHandler
  0000054c 00                   502M	
  0000054c 00                   503M	   ; * Shift left 16 steps 0xffffffff -> 0xffff0000
  0000054c 00                   504M	ALU_Test47:
  0000054c 00  557f 801e        505M	   slwi    r31, r11, C_16
  00000550 00  7c1f c800        506M	   cmpw    r31, r25
  00000554 00  4082 fab0        507M	   bne     RAMBOOT_TCBHW_ALU_FailureHandler
  00000558 00                   508M	
  00000558 00                   509M	   ; * Shift right 16 steps 0xffffffff -> 0x0000ffff
  00000558 00                   510M	ALU_Test48:
  00000558 00  557f 843e        511M	   srwi    r31, r11, C_16
  0000055c 00  7c1f d000        512M	   cmpw    r31, r26
  00000560 00  4082 faa4        513M	   bne     RAMBOOT_TCBHW_ALU_FailureHandler
  00000564 00                   514M	   
  00000564 00                   515M	   ; * Shift right 1 step 0x55555555 -> 0x2aaaaaaa
                               File: RAMBOOT_Te Errors    0
  Location Pl  Code            Line 	Source Statement
  00000564 00                   516M	ALU_Test49:
  00000564 00  54bf f87e        517M	   srwi    r31, r5, C_1
  00000568 00  7c1f 0800        518M	   cmpw    r31, r1
  0000056c 00  4082 fa98        519M	   bne     RAMBOOT_TCBHW_ALU_FailureHandler
  00000570 00                   520M	
  00000570 00                   521M	   ;               Test comparisons
  00000570 00                   522M	   ; ==================================================
  00000570 00                   523M	   ; r26 = C_1
  00000570 00                   524M	   ; r27 = C_1
  00000570 00                   525M	   ; r28 = C_16
  00000570 00  3f40 0000        526M	   lis     r26, C_00000001@ha
  00000574 00  3b5a 0001        527M	   addi    r26, r26, C_00000001@l
  00000578 00                   528M	   
  00000578 00                   529M	   ; * "egal" with result TRUE
  00000578 00                   530M	ALU_Test50:
  00000578 00  7c1a d800        531M	   cmpw    r26, r27
  0000057c 00  4182 0008        532M	   beq     ALU_Test51
  00000580 00  4bff fa84        533M	   b       RAMBOOT_TCBHW_ALU_FailureHandler
  00000584 00                   534M	
  00000584 00                   535M	   ; * "egal" with result FALSE
  00000584 00                   536M	ALU_Test51:
  00000584 00  7c1b e000        537M	   cmpw    r27, r28
  00000588 00  4182 fa7c        538M	   beq     RAMBOOT_TCBHW_ALU_FailureHandler
  0000058c 00                   539M	
  0000058c 00                   540M	   ; * "different" with result TRUE
  0000058c 00                   541M	ALU_Test52:
  0000058c 00  7c1b e000        542M	   cmpw    r27, r28
  00000590 00  4082 0008        543M	   bne     ALU_Test53
  00000594 00  4bff fa70        544M	   b       RAMBOOT_TCBHW_ALU_FailureHandler
  00000598 00                   545M	
  00000598 00                   546M	   ; * "different" with result FALSE
  00000598 00                   547M	ALU_Test53:
  00000598 00  7c1a d800        548M	   cmpw    r26, r27
  0000059c 00  4082 fa68        549M	   bne     RAMBOOT_TCBHW_ALU_FailureHandler
  000005a0 00                   550M	
  000005a0 00                   551M	   ; * "above" with result TRUE
  000005a0 00                   552M	ALU_Test54:
  000005a0 00  7c1c d800        553M	   cmpw    r28, r27
  000005a4 00  4181 0008        554M	   bgt     ALU_Test55     ; Branch if Greater Than
  000005a8 00  4bff fa5c        555M	   b       RAMBOOT_TCBHW_ALU_FailureHandler
  000005ac 00                   556M	   
  000005ac 00                   557M	   ; * "above" with result FALSE
  000005ac 00                   558M	ALU_Test55:
  000005ac 00  7c1b e000        559M	   cmpw    r27, r28
  000005b0 00  4181 fa54        560M	   bgt     RAMBOOT_TCBHW_ALU_FailureHandler   ; Branch if Greater Than
  000005b4 00                   561M	
  000005b4 00                   562M	   ; * "above or equal" with result TRUE
  000005b4 00                   563M	ALU_Test56:
  000005b4 00  7c1c d800        564M	   cmpw    r28, r27
  000005b8 00  4080 0008        565M	   bge     ALU_Test57
  000005bc 00  4bff fa48        566M	   b       RAMBOOT_TCBHW_ALU_FailureHandler
  000005c0 00                   567M	   
  000005c0 00                   568M	   ; * "above or equal" with result FALSE
  000005c0 00                   569M	ALU_Test57:
  000005c0 00  7c1b e000        570M	   cmpw    r27, r28
  000005c4 00  4080 fa40        571M	   bge     RAMBOOT_TCBHW_ALU_FailureHandler
  000005c8 00                   572M	
                               File: RAMBOOT_Te Errors    0
  Location Pl  Code            Line 	Source Statement
  000005c8 00                   573M	   ; * "below" with result TRUE
  000005c8 00                   574M	ALU_Test58:
  000005c8 00  7c1b e000        575M	   cmpw    r27, r28
  000005cc 00  4180 0008        576M	   blt     ALU_Test59                      ; Branch if Less Than
  000005d0 00  4bff fa34        577M	   b       RAMBOOT_TCBHW_ALU_FailureHandler
  000005d4 00                   578M	
  000005d4 00                   579M	   ; * "below" with result FALSE
  000005d4 00                   580M	ALU_Test59:
  000005d4 00  7c1c d800        581M	   cmpw    r28, r27
  000005d8 00  4180 fa2c        582M	   blt     RAMBOOT_TCBHW_ALU_FailureHandler   ; Branch if Less Than
  000005dc 00                   583M	
  000005dc 00                   584M	   ; * "below or equal" with result TRUE
  000005dc 00                   585M	ALU_Test60:
  000005dc 00  7c1b e000        586M	   cmpw    r27, r28
  000005e0 00  4081 0008        587M	   ble     ALU_Test61   ; Branch if Less or Equal 
  000005e4 00  4bff fa20        588M	   b       RAMBOOT_TCBHW_ALU_FailureHandler
  000005e8 00                   589M	   
  000005e8 00                   590M	   ; * "below or equal" with result FALSE.
  000005e8 00                   591M	ALU_Test61:
  000005e8 00  7c1c d800        592M	   cmpw    r28, r27
  000005ec 00  4081 fa18        593M	   ble     RAMBOOT_TCBHW_ALU_FailureHandler   ; Branch if Less or Equal
  000005f0 00                    18 	   
  000005f0 00                    19 	; Set HID0 default value to start timer base ???
  000005f0 00  3c60 0000         20 	   lis     r3, C_HID0_INIT_VALUE@ha
  000005f4 00  3863 4000         21 	   addi    r3, r3, C_HID0_INIT_VALUE@l
  000005f8 00  7c70 fba6         22 	   mtspr   REG_HID0, r3
  000005fc 00                    23 	   
  000005fc 00                    24 	; Configure interrupt vector registers
  000005fc 00  3c60 0000         25 	   lis     r3, IVOR_Handler@ha
  00000600 00  7c7f 0ba6         26 	   mtspr   REG_IVPR, r3 ; Configure base vector address
  00000604 00  3860 0000         27 	   li      r3, IVOR_Handler@l
  00000608 00  7c70 63a6         28 	   mtspr   REG_IVOR0, r3 ; IVOR0 offset
  0000060c 00  7c71 63a6         29 	   mtspr   REG_IVOR1, r3 ; IVOR1 offset
  00000610 00  7c72 63a6         30 	   mtspr   REG_IVOR2, r3 ; IVOR2 offset
  00000614 00  7c73 63a6         31 	   mtspr   REG_IVOR3, r3 ; IVOR3 offset
  00000618 00  7c74 63a6         32 	   mtspr   REG_IVOR4, r3 ; IVOR4 offset
  0000061c 00  7c75 63a6         33 	   mtspr   REG_IVOR5, r3 ; IVOR5 offset
  00000620 00  7c76 63a6         34 	   mtspr   REG_IVOR6, r3 ; IVOR6 offset
  00000624 00  7c77 63a6         35 	   mtspr   REG_IVOR7, r3 ; IVOR7 offset
  00000628 00  7c78 63a6         36 	   mtspr   REG_IVOR8, r3 ; IVOR8 offset
  0000062c 00  7c7a 63a6         37 	   mtspr   REG_IVOR10, r3 ; IVOR10 offset
  00000630 00  7c7b 63a6         38 	   mtspr   REG_IVOR11, r3 ; IVOR11 offset
  00000634 00  7c7d 63a6         39 	   mtspr   REG_IVOR13, r3 ; IVOR13 offset
  00000638 00  7c7e 63a6         40 	   mtspr   REG_IVOR14, r3 ; IVOR14 offset
  0000063c 00  7c7f 63a6         41 	   mtspr   REG_IVOR15, r3 ; IVOR15 offset
  00000640 00  7c70 83a6         42 	   mtspr   REG_IVOR32, r3 ; IVOR32 offset
  00000644 00  7c71 83a6         43 	   mtspr   REG_IVOR33, r3 ; IVOR33 offset
  00000648 00  7c72 83a6         44 	   mtspr   REG_IVOR34, r3 ; IVOR34 offset
  0000064c 00  7c73 83a6         45 	   mtspr   REG_IVOR35, r3 ; IVOR35 offset
  00000650 00                    46 	   
  00000650 00                    47 	; Inhibate P1011 watchdog
  00000650 00  7c74 52a6         48 	   mfspr r3,REG_TCR
  00000654 00  7c63 0038         49 	   and r3,r3,0
  00000658 00  7c74 53a6         50 	   mtspr REG_TCR, r3
  0000065c 00                    51 	   
  0000065c 00                    52 	; Clear SRR1 register
  0000065c 00  3c60 0000         53 	   lis     r3, 0
                               File: RAMBOOT_Te Errors    0
  Location Pl  Code            Line 	Source Statement
  00000660 00  3863 0000         54 	   addi    r3, r3, 0
  00000664 00  7c7b 03a6         55 	   mtspr   REG_SRR1, r3
  00000668 00                    56 	; Set SPE ME and DE bits in MSR
  00000668 00  3c60 0200         57 	   lis     r3, C_MSR_RAMBOOT_CONFIG@ha
  0000066c 00  3863 1200         58 	   addi    r3, r3, C_MSR_RAMBOOT_CONFIG@l
  00000670 00                    59 	   REG_MSR_WRITE r3
  00000670 00  7c00 04ac        111M		sync
  00000674 00  7c60 0124        112M		mtmsr    r3
  00000678 00  7c00 04ac        113M		sync
  0000067c 00  4c00 012c        114M		isync
  00000680 00                    60 	   
  00000680 00                    61 	; Configure GPR in compliance with EABI
  00000680 00                    62 	; Stack pointer initialization
  00000680 00  3c20 0000         63 	   lis     r1, __SP_INIT@ha
  00000684 00  3821 0000         64 	   addi    r1, r1, __SP_INIT@l
  00000688 00  9421 fff8         65 	   stwu    r1, -8 (r1)
  0000068c 00                    66 	; Initialize R2 with sda2 (read only small data area) base address
  0000068c 00  3c40 0000         67 	   lis     r2, _SDA2_BASE_@ha
  00000690 00  3842 0000         68 	   addi    r2, r2, _SDA2_BASE_@l
  00000694 00                    69 	; Initialize R13 with sda (read/write small data area) base address
  00000694 00  3da0 0000         70 	   lis     r13, _SDA_BASE_@ha
  00000698 00  39ad 0000         71 	   addi    r13, r13, _SDA_BASE_@l
  0000069c 00                    72 	   
  0000069c 00                    73 	; Clear the FPSCR
  0000069c 00  3c60 0000         74 	   lis     r3, 0x00000000@ha
  000006a0 00  3863 0000         75 	   addi    r3, r3, 0x00000000@l
  000006a4 00  7c60 83a6         76 	   mtspr   REG_SPEFSCR, r3
  000006a8 00  4c00 012c         77 	   isync
  000006ac 00                    78 	   
  000006ac 00                    79 	; Enable branch target buffer
  000006ac 00  3c60 0000         80 	   lis     r3, 0x00000000@ha
  000006b0 00  3863 0200         81 	   addi    r3, r3, C_REG_BUCSR_BBFI@l
  000006b4 00  3863 0001         82 	   addi    r3, r3, C_REG_BUCSR_BPEN@l
  000006b8 00  7c75 fba6         83 	   mtspr   REG_BUCSR, r3
  000006bc 00  4c00 012c         84 	   isync
  000006c0 00                    85 	   
  000006c0 00                    86 	; Invalidate instruction and data cache
  000006c0 00                    87 	   REG_L1CSR0_CINV r3
  000006c0 00                   125M	CINV_start.0007:
  000006c0 00                   126M		#/* Get L1CSR0 register value */
  000006c0 00  7c72 faa6        127M		mfspr    r3, REG_L1CSR0                      # r3 := REG_L1CSR0
  000006c4 00                   128M	
  000006c4 00                   129M		#/* Set CINV bit */
  000006c4 00  6063 0002        130M		ori      r3, r3, C_SET_CINV_BIT_MASK      # r3 := r3 | C_SET_CINV_BIT_MASK
  000006c8 00                   131M	
  000006c8 00                   132M		#/* Update L1CSR0 register value */
  000006c8 00  7c00 04ac        133M		msync                                           # Mandatory sync instruction (see E2
  000006cc 00                       	00Z6_RM �2.13.1)
  000006cc 00  4c00 012c        134M		isync
  000006d0 00  7c72 fba6        135M		mtspr    REG_L1CSR0, r3                      # REG_L1CSR0 := r3
  000006d4 00                   136M	
  000006d4 00                   137M		#/* Wait for end of cache invalidation (CINV bit to 0) */
  000006d4 00                   138M	CINV_loop.0007:
  000006d4 00                   139M		#/* Read L1CSR0 register value */
  000006d4 00  7c72 faa6        140M		mfspr    r3, REG_L1CSR0                      # r3 := REG_L1CSR0
  000006d8 00                   141M	
  000006d8 00                   142M		#/* Clear all bits but CINV */
                               File: RAMBOOT_Te Errors    0
  Location Pl  Code            Line 	Source Statement
  000006d8 00  5463 07bc        143M		rlwinm   r3, r3, 0, C_CINV_BIT_NBR, C_CINV_BIT_NBR # r3 := r3 & C_SET_CINV_BIT_MASK
  000006dc 00                   144M	
  000006dc 00                   145M		#/* If CINV bit is still set then loop */
  000006dc 00  2c03 0002        146M		cmpwi    0, r3, C_SET_CINV_BIT_MASK
  000006e0 00  4182 fff4        147M		beq      CINV_loop.0007
  000006e4 00                   148M	
  000006e4 00                   149M	
  000006e4 00                   150M		#/* Check that cache invalidation completed successfully */
  000006e4 00                   151M		#/* Read L1CSR0 register value */
  000006e4 00  7c72 faa6        152M		mfspr    r3, REG_L1CSR0                      # r3 := REG_L1CSR0
  000006e8 00                   153M	
  000006e8 00                   154M		#/* Clear all bits but CABT */
  000006e8 00  5463 077a        155M		rlwinm   r3, r3, 0, C_CABT_BIT_NBR, C_CABT_BIT_NBR # r3 := r3 & C_SET_CABT_BIT_MASK
  000006ec 00                   156M	
  000006ec 00                   157M		#/* If CABT bit is still set then retry cache invalidation */
  000006ec 00  2c03 0004        158M		cmpwi    0, r3, C_SET_CABT_BIT_MASK
  000006f0 00  4182 ffd0        159M		beq      CINV_start.0007
  000006f4 00                   160M	
  000006f4 00                    88 	; Enable instruction and data cache
  000006f4 00                    89 	   REG_L1CSR0_SET_CE r3
  000006f4 00                   165M	
  000006f4 00                   166M		#/* Get L1CSR0 register value */
  000006f4 00  7c72 faa6        167M		mfspr    r3, REG_L1CSR0                      # r3 := REG_L1CSR0
  000006f8 00                   168M	
  000006f8 00                   169M		#/* Set CINV bit */
  000006f8 00  6063 0001        170M		ori      r3, r3, C_SET_CE_BIT_MASK        # r3 := r3 | C_SET_CE_BIT_MASK
  000006fc 00                   171M	
  000006fc 00                   172M		#/* Update L1CSR0 register value */
  000006fc 00  7c00 04ac        173M		msync                                           # Mandatory sync instruction (see E2
  00000700 00                       	00Z6_RM �2.13.1)
  00000700 00  4c00 012c        174M		isync
  00000704 00  7c72 fba6        175M		mtspr    REG_L1CSR0, r3                      # REG_L1CSR0 := r3
  00000708 00                   176M	
  00000708 00                    90 	   REG_L1CSR1_SET_CE r3
  00000708 00                   181M	
  00000708 00                   182M		#/* Get L1CSR0 register value */
  00000708 00  7c73 faa6        183M		mfspr    r3, REG_L1CSR1                      # r3 := REG_L1CSR1
  0000070c 00                   184M	
  0000070c 00                   185M		#/* Set CINV bit */
  0000070c 00  6063 0001        186M		ori      r3, r3, C_SET_CE_BIT_MASK        # r3 := r3 | C_SET_CE_BIT_MASK
  00000710 00                   187M	
  00000710 00                   188M		#/* Update L1CSR0 register value */
  00000710 00  7c00 04ac        189M		msync                                           # Mandatory sync instruction (see E2
  00000714 00                       	00Z6_RM �2.13.1)
  00000714 00  4c00 012c        190M		isync
  00000718 00  7c73 fba6        191M		mtspr    REG_L1CSR1, r3                      # REG_L1CSR1 := r3
  0000071c 00                   192M	
  0000071c 00                    91 	   
  0000071c 00  4e80 0020         92 	   blr
