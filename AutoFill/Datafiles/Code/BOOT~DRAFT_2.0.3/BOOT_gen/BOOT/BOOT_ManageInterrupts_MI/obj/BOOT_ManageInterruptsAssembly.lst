                               File: BOOT_Manag Errors    0
  Location Pl  Code            Line 	Source Statement
  00000000 00                     1 	   .file "BOOT_ManageExceptions.s"
  00000000 00                     2 	   .include "BOOT_Registers.inc"
  00000000 00                     1I	; Special purpose registers
  00000000 00                     2I	.set    REG_SPRG0   ,272
  00000000 00                     3I	.set    REG_SPRG1   ,273
  00000000 00                     4I	.set    REG_SPRG2   ,274
  00000000 00                     5I	.set    REG_SPRG3   ,275
  00000000 00                     6I	.set    REG_SPRG4   ,276
  00000000 00                     7I	.set    REG_SPRG5   ,277
  00000000 00                     8I	.set    REG_SPRG6   ,278
  00000000 00                     9I	.set    REG_SPRG7   ,279
  00000000 00                    10I	
  00000000 00                    11I	; Save and restore registers
  00000000 00                    12I	.set    REG_SRR0    ,26
  00000000 00                    13I	.set    REG_SRR1    ,27
  00000000 00                    14I	
  00000000 00                    15I	; Interrupt vector registers
  00000000 00                    16I	.set    REG_IVPR    ,63
  00000000 00                    17I	.set    REG_IVOR0   ,400
  00000000 00                    18I	.set    REG_IVOR1   ,401
  00000000 00                    19I	.set    REG_IVOR2   ,402
  00000000 00                    20I	.set    REG_IVOR3   ,403
  00000000 00                    21I	.set    REG_IVOR4   ,404
  00000000 00                    22I	.set    REG_IVOR5   ,405
  00000000 00                    23I	.set    REG_IVOR6   ,406
  00000000 00                    24I	.set    REG_IVOR7   ,407
  00000000 00                    25I	.set    REG_IVOR8   ,408
  00000000 00                    26I	.set    REG_IVOR9   ,409
  00000000 00                    27I	.set    REG_IVOR10  ,410
  00000000 00                    28I	.set    REG_IVOR11  ,411
  00000000 00                    29I	.set    REG_IVOR12  ,412
  00000000 00                    30I	.set    REG_IVOR13  ,413
  00000000 00                    31I	.set    REG_IVOR14  ,414
  00000000 00                    32I	.set    REG_IVOR15  ,415
  00000000 00                    33I	.set    REG_IVOR32  ,528
  00000000 00                    34I	.set    REG_IVOR33  ,529
  00000000 00                    35I	.set    REG_IVOR34  ,530
  00000000 00                    36I	.set    REG_IVOR35  ,531
  00000000 00                    37I	
  00000000 00                    38I	; Hardware Implementation Dependent registers
  00000000 00                    39I	.set    REG_HID0    ,1008
  00000000 00                    40I	.set    REG_HID1    ,1009
  00000000 00                    41I	
  00000000 00                    42I	; HID0 Enable Machine Check bit mask
  00000000 00                    43I	.set    C_SET_EMCP_BIT_MASK,    0x80000000
  00000000 00                    44I	
  00000000 00                    45I	; Branch Unit Control and Status Register
  00000000 00                    46I	.set    REG_BUCSR   ,1013
  00000000 00                    47I	
  00000000 00                    48I	; Time base registers
  00000000 00                    49I	.set    REG_TBL         ,284        # Timer Base Lower bits
  00000000 00                    50I	.set    REG_TBU         ,285        # Timer Base Upper bits
  00000000 00                    51I	.set    REG_TSR         ,336        # Timer Status Register
  00000000 00                    52I	.set    REG_TSR_DIS_DIT ,0x08000000 # Decrementer Interrupt Status bit of TSR register
  00000000 00                    53I	.set    REG_TCR         ,340        # Timer Control Register
  00000000 00                    54I	.set    REG_DEC         ,22         # Decrementer Register
  00000000 00                    55I	.set    REG_DECAR       ,54         # Decrementer Auto-Reload Register
                               File: BOOT_Manag Errors    0
  Location Pl  Code            Line 	Source Statement
  00000000 00                    56I	
  00000000 00                    57I	; Process ID register
  00000000 00                    58I	.set    REG_PID0        ,48
  00000000 00                    59I	
  00000000 00                    60I	; MMU Assist registers
  00000000 00                    61I	.set    REG_MAS0        ,624
  00000000 00                    62I	.set    REG_MAS1        ,625
  00000000 00                    63I	.set    REG_MAS2        ,626
  00000000 00                    64I	.set    REG_MAS3        ,627
  00000000 00                    65I	.set    REG_MAS4        ,628
  00000000 00                    66I	.set    REG_MAS6        ,630
  00000000 00                    67I	.set    REG_MAS7        ,944
  00000000 00                    68I	
  00000000 00                    69I	; Cache registers
  00000000 00                    70I	.set    REG_L1CSR0      ,1010   # L1 data Cache Control and Status Register
  00000000 00                    71I	.set    REG_L1CSR1      ,1011   # L1 instruction Cache Control and Status Register
  00000000 00                    72I	.set    REG_L1FINV      ,1016   # L1 Cache FLush and Invalidate Register
  00000000 00                    73I	
  00000000 00                    74I	; MMU Control register
  00000000 00                    75I	.set    REG_MMUCSR0     ,1012
  00000000 00                    76I	
  00000000 00                    77I	; SPE APU Status and Control Register
  00000000 00                    78I	.set    REG_SPEFSCR     ,512
  00000000 00                    79I	
  00000000 00                    80I	.set    C_REG_TESCR1_ADDRESS,   0xFF010040
  00000000 00                    81I	
  00000000 00                    82I	; MSR bit masks
  00000000 00                    83I	.set    C_SET_SPE_BIT_MASK,     0x0200
  00000000 00                    84I	.set    C_CLEAR_SPE_BIT_MASK_S, 7
  00000000 00                    85I	.set    C_CLEAR_SPE_BIT_MASK_E, 5
  00000000 00                    86I	
  00000000 00                    87I	; MMUCSR0 bit masks
  00000000 00                    88I	.set    C_SET_FI_BIT_MASK,          0x0006
  00000000 00                    89I	
  00000000 00                    90I	; HID0 Data Cache Flush Assist bit masks
  00000000 00                    91I	.set    C_SET_DCFA_BIT_MASK,        0x00000040
  00000000 00                    92I	.set    C_CLEAR_DCFA_BIT_MASK_S,    26
  00000000 00                    93I	.set    C_CLEAR_DCFA_BIT_MASK_E,    24
  00000000 00                    94I	
  00000000 00                    95I	; L1CSR0 bit masks
  00000000 00                    96I	.set    C_SET_CE_BIT_MASK,      0x00000001
  00000000 00                    97I	.set    C_SET_CPE_BIT_MASK,     0x00010000
  00000000 00                    98I	.set    C_SET_CINV_BIT_MASK,    0x0002
  00000000 00                    99I	.set    C_CINV_BIT_NBR,         30
  00000000 00                   100I	.set    C_SET_CABT_BIT_MASK,    0x0004
  00000000 00                   101I	.set    C_CABT_BIT_NBR,         29
  00000000 00                   102I	
  00000000 00                   103I	; BUCSR values
  00000000 00                   104I	.set    C_REG_BUCSR_BPEN,   0x00000001  # Enable branch target buffer
  00000000 00                   105I	.set    C_REG_BUCSR_BBFI,   0x00000200  # Invalidate branch target buffer
  00000000 00                   106I	
  00000000 00                   107I	; L2 Cache ConTroL register
  00000000 00                   108I	.set    C_REG_L2CTR_offset, 0x00020000
  00000000 00                   109I	.set    C_SET_L2E_BIT_MASK, 0x8000
  00000000 00                   110I	.set    C_SET_L2I_BIT_MASK, 0x4000
  00000000 00                   111I	
  00000000 00                   112I	#/* _END_CONSTANT ==========================================================================
                               File: BOOT_Manag Errors    0
  Location Pl  Code            Line 	Source Statement
  00000000 00                       	========================== */
  00000000 00                   113I	
  00000000 00                   114I	#/* _BEGIN_MACRO ================================================ MACROS ===================
  00000000 00                       	========================== */
  00000000 00                   115I	
  00000000 00                   116I	#/*=========================================================================================
  00000000 00                       	========================== */
  00000000 00                   117I	#/*                                                        MSR                              
  00000000 00                       	                           */
  00000000 00                   118I	#/*=========================================================================================
  00000000 00                       	========================== */
  00000000 00                   119I	
  00000000 00                   120I	#/* BEGIN FUNCTION HEADER-------------------------------------------------------------------
  00000000 00                       	-------------------------- */
  00000000 00                   121I	#/* <<LLR:  >>  SDD_DMS_LLR_REQ_0000022                                                     
  00000000 00                       	                           */
  00000000 00                   122I	#/*                                                                                         
  00000000 00                       	                           */
  00000000 00                   123I	#/* <<FUNCTION:  >>  REG_MSR_WRITE                                                          
  00000000 00                       	                           */
  00000000 00                   124I	#/*                                                                                         
  00000000 00                       	                           */
  00000000 00                   125I	#/* <<DESCRIPTION:  >>  This function writes a new MSR value. The MSR register is writeable 
  00000000 00                       	only in supervisor mode. I */
  00000000 00                   126I	#/* t is a macro function in assembly language.                                             
  00000000 00                       	                           */
  00000000 00                   127I	#/*                                                                                         
  00000000 00                       	                           */
  00000000 00                   128I	#/* END FUNCTION HEADER---------------------------------------------------------------------
  00000000 00                       	-------------------------- */
  00000000 00                   129I	REG_MSR_WRITE: .macro v_reg1
                                130I	   sync
                                131I	   mtmsr    v_reg1
                                132I	   sync
                                133I	   isync
                                134I	   .endm
  00000000 00                   135I	
  00000000 00                   136I	#/*End of REG_MSR_WRITE*/
  00000000 00                   137I	
  00000000 00                   138I	#/* BEGIN FUNCTION HEADER-------------------------------------------------------------------
  00000000 00                       	-------------------------- */
  00000000 00                   139I	#/* <<LLR:  >>  SDD_DMS_LLR_REQ_0000156                                                     
  00000000 00                       	                           */
  00000000 00                   140I	#/*                                                                                         
  00000000 00                       	                           */
  00000000 00                   141I	#/* <<FUNCTION:  >>  REG_MSR_CLEAR_SPE                                                      
  00000000 00                       	                           */
  00000000 00                   142I	#/*                                                                                         
  00000000 00                       	                           */
  00000000 00                   143I	#/* <<DESCRIPTION:  >>  This function clears SPE bit in MSR to forbid floating point operati
  00000000 00                       	on (for POST purpose). It  */
  00000000 00                   144I	#/* is a macro function in assembly language.                                               
  00000000 00                       	                           */
  00000000 00                   145I	#/*                                                                                         
  00000000 00                       	                           */
  00000000 00                   146I	#/* END FUNCTION HEADER---------------------------------------------------------------------
  00000000 00                       	-------------------------- */
                               File: BOOT_Manag Errors    0
  Location Pl  Code            Line 	Source Statement
  00000000 00                   147I	REG_MSR_CLEAR_SPE: .macro v_reg1
                                148I	   #/** Gets MSR */
                                149I	   mfmsr    v_reg1
                                150I	
                                151I	   #/** Clears FP bit */
                                152I	   rlwinm   v_reg1,v_reg1,0,C_CLEAR_SPE_BIT_MASK_S,C_CLEAR_SPE_BIT_MASK_E
                                153I	
                                154I	   #/** Updates MSR */
                                155I	   sync
                                156I	   mtmsr    v_reg1
                                157I	   sync
                                158I	   isync
                                159I	
                                160I	   .endm
  00000000 00                   161I	#/*End of REG_MSR_CLEAR_SPE*/
  00000000 00                   162I	
  00000000 00                   163I	#/* BEGIN FUNCTION HEADER-------------------------------------------------------------------
  00000000 00                       	-------------------------- */
  00000000 00                   164I	#/* <<LLR:  >>  SDD_DMS_LLR_REQ_0000157                                                     
  00000000 00                       	                           */
  00000000 00                   165I	#/*                                                                                         
  00000000 00                       	                           */
  00000000 00                   166I	#/* <<FUNCTION:  >>  REG_MSR_SET_SPE                                                        
  00000000 00                       	                           */
  00000000 00                   167I	#/*                                                                                         
  00000000 00                       	                           */
  00000000 00                   168I	#/* <<DESCRIPTION:  >>  This function sets SPE bit in MSR to enable floating point operation
  00000000 00                       	. It is a macro function in*/
  00000000 00                   169I	#/*  assembly language.                                                                     
  00000000 00                       	                           */
  00000000 00                   170I	#/*                                                                                         
  00000000 00                       	                           */
  00000000 00                   171I	#/* END FUNCTION HEADER---------------------------------------------------------------------
  00000000 00                       	-------------------------- */
  00000000 00                   172I	REG_MSR_SET_SPE: .macro v_reg1
                                173I	   #/** Gets MSR */
                                174I	   mfmsr    v_reg1
                                175I	
                                176I	   #/** Sets FP bit */
                                177I	   oris     v_reg1, v_reg1, C_SET_SPE_BIT_MASK
                                178I	
                                179I	   #/** Updates MSR */
                                180I	   sync
                                181I	   mtmsr    v_reg1
                                182I	   sync
                                183I	   isync
                                184I	
                                185I	   .endm
  00000000 00                   186I	#/*End of REG_MSR_SET_SPE*/
  00000000 00                   187I	
  00000000 00                   188I	
  00000000 00                   189I	#/*=========================================================================================
  00000000 00                       	========================== */
  00000000 00                   190I	#/*                                                     HIDx                                
  00000000 00                       	                           */
  00000000 00                   191I	#/*=========================================================================================
  00000000 00                       	========================== */
                               File: BOOT_Manag Errors    0
  Location Pl  Code            Line 	Source Statement
  00000000 00                   192I	
  00000000 00                   193I	#/* BEGIN FUNCTION HEADER-------------------------------------------------------------------
  00000000 00                       	-------------------------- */
  00000000 00                   194I	#/* <<LLR:  >>  SDD_DMS_LLR_REQ_0000056                                                     
  00000000 00                       	                           */
  00000000 00                   195I	#/*                                                                                         
  00000000 00                       	                           */
  00000000 00                   196I	#/* <<FUNCTION:  >>  REG_HID0_EMCP_SET                                                      
  00000000 00                       	                           */
  00000000 00                   197I	#/*                                                                                         
  00000000 00                       	                           */
  00000000 00                   198I	#/* <<DESCRIPTION:  >>  This function enables machine check interrupt by setting EMCP bit in
  00000000 00                       	 HID0 register to '1'. HID */
  00000000 00                   199I	#/* 0 register is writeable only in supervisor mode. It is a macro function in assembly lang
  00000000 00                       	uage.                      */
  00000000 00                   200I	#/*                                                                                         
  00000000 00                       	                           */
  00000000 00                   201I	#/* END FUNCTION HEADER---------------------------------------------------------------------
  00000000 00                       	-------------------------- */
  00000000 00                   202I	REG_HID0_EMCP_SET: .macro v_reg1,v_reg2
                                203I	   lis      v_reg1,         C_SET_EMCP_BIT_MASK@ha
                                204I	   addi     v_reg1, v_reg1, C_SET_EMCP_BIT_MASK@l
                                205I	
                                206I	   #/* Gets the content of the HID0 register */
                                207I	   mfspr    v_reg2, REG_HID0
                                208I	
                                209I	   #/* Enables the entry into a machine check exception */
                                210I	   #/* based on assertion of the MCP input */
                                211I	   or       v_reg2, v_reg2, v_reg1
                                212I	
                                213I	   #/* Sets the new content in the HID0 register */
                                214I	   mtspr    REG_HID0, v_reg2
                                215I	   isync
                                216I	   .endm
  00000000 00                   217I	#/*End of REG_HID0_EMCP_SET*/
  00000000 00                   218I	
  00000000 00                   219I	REG_HID0_DCFA_SET: .macro v_reg1,v_reg2
                                220I	   lis      v_reg1,         C_SET_DCFA_BIT_MASK@ha
                                221I	   addi     v_reg1, v_reg1, C_SET_DCFA_BIT_MASK@l
                                222I	
                                223I	   #/* Gets the content of the HID0 register */
                                224I	   mfspr    v_reg2, REG_HID0
                                225I	
                                226I	   #/* Enables the entry into a machine check exception */
                                227I	   #/* based on assertion of the MCP input */
                                228I	   or       v_reg2, v_reg2, v_reg1
                                229I	
                                230I	   #/* Sets the new content in the HID0 register */
                                231I	   mtspr    REG_HID0, v_reg2
                                232I	   isync
                                233I	   .endm
  00000000 00                   234I	#/*End of REG_HID0_DCFA_SET*/
  00000000 00                   235I	
  00000000 00                   236I	REG_HID0_DCFA_CLEAR: .macro v_reg1
                                237I	   #/* Gets the content of the HID0 register */
                                238I	   mfspr    v_reg1, REG_HID0
                                239I	
                               File: BOOT_Manag Errors    0
  Location Pl  Code            Line 	Source Statement
                                240I	   #/** Clears FP bit */
                                241I	   rlwinm   v_reg1,v_reg1,0,C_CLEAR_DCFA_BIT_MASK_S,C_CLEAR_DCFA_BIT_MASK_E
                                242I	
                                243I	   #/* Sets the new content in the HID0 register */
                                244I	   mtspr    REG_HID0, v_reg1
                                245I	   isync
                                246I	   .endm
  00000000 00                   247I	#/*End of REG_MSR_CLEAR_SPE*/
  00000000 00                   248I	
  00000000 00                   249I	#/*=========================================================================================
  00000000 00                       	========================== */
  00000000 00                   250I	#/*                                                    CACHE                                
  00000000 00                       	                           */
  00000000 00                   251I	#/*=========================================================================================
  00000000 00                       	========================== */
  00000000 00                   252I	
  00000000 00                   253I	#/* Set CINV bit in L1CSR0 register to invalidate cache and wait for end of invalidation */
  00000000 00                   254I	REG_L1CSR0_CINV: .macro v_reg
                                255I	CINV_start\@:
                                256I	   #/* Get L1CSR0 register value */
                                257I	   mfspr    v_reg, REG_L1CSR0                      # v_reg := REG_L1CSR0
                                258I	
                                259I	   #/* Set CINV bit */
                                260I	   ori      v_reg, v_reg, C_SET_CINV_BIT_MASK      # v_reg := v_reg | C_SET_CINV_BIT_MASK
                                261I	
                                262I	   #/* Update L1CSR0 register value */
                                263I	   msync                                           # Mandatory sync instruction (see E200Z6_
                                    	RM 2.13.1)
                                264I	   isync
                                265I	   mtspr    REG_L1CSR0, v_reg                      # REG_L1CSR0 := v_reg
                                266I	
                                267I	   #/* Wait for end of cache invalidation (CINV bit to 0) */
                                268I	CINV_loop\@:
                                269I	   #/* Read L1CSR0 register value */
                                270I	   mfspr    v_reg, REG_L1CSR0                      # v_reg := REG_L1CSR0
                                271I	
                                272I	   #/* Clear all bits but CINV */
                                273I	   rlwinm   v_reg, v_reg, 0, C_CINV_BIT_NBR, C_CINV_BIT_NBR # v_reg := v_reg & C_SET_CINV_BI
                                    	T_MASK
                                274I	
                                275I	   #/* If CINV bit is still set then loop */
                                276I	   cmpwi    0, v_reg, C_SET_CINV_BIT_MASK
                                277I	   beq      CINV_loop\@
                                278I	
                                279I	
                                280I	   #/* Check that cache invalidation completed successfully */
                                281I	   #/* Read L1CSR0 register value */
                                282I	   mfspr    v_reg, REG_L1CSR0                      # v_reg := REG_L1CSR0
                                283I	
                                284I	   #/* Clear all bits but CABT */
                                285I	   rlwinm   v_reg, v_reg, 0, C_CABT_BIT_NBR, C_CABT_BIT_NBR # v_reg := v_reg & C_SET_CABT_BI
                                    	T_MASK
                                286I	
                                287I	   #/* If CABT bit is still set then retry cache invalidation */
                                288I	   cmpwi    0, v_reg, C_SET_CABT_BIT_MASK
                                289I	   beq      CINV_start\@
                                290I	
                               File: BOOT_Manag Errors    0
  Location Pl  Code            Line 	Source Statement
                                291I	   .endm
  00000000 00                   292I	
  00000000 00                   293I	# Set CE and CPE bits in L1CSR0 register to enable L1 data cache and parity
  00000000 00                   294I	REG_L1CSR0_SET_CE_CPE: .macro v_reg
                                295I	
                                296I	   #/* Get L1CSR0 register value */
                                297I	   mfspr    v_reg, REG_L1CSR0                      # v_reg := REG_L1CSR0
                                298I	
                                299I	   #/* Set CE and CPE bits */
                                300I	   oris     v_reg, v_reg, C_SET_CPE_BIT_MASK@ha    # v_reg := v_reg | C_SET_CPE_BIT_MASK
                                301I	   ori      v_reg, v_reg, C_SET_CE_BIT_MASK@l      # v_reg := v_reg | C_SET_CE_BIT_MASK
                                302I	
                                303I	   #/* Update L1CSR0 register value */
                                304I	   msync                                           # Mandatory sync instruction (see E200Z6_
                                    	RM 2.13.1)
                                305I	   isync
                                306I	   mtspr    REG_L1CSR0, v_reg                      # REG_L1CSR0 := v_reg
                                307I	
                                308I	   .endm
  00000000 00                   309I	
  00000000 00                   310I	# Set CE and CPE bits in L1CSR1 register to enable L1 instruction cache and parity
  00000000 00                   311I	REG_L1CSR1_SET_CE_CPE: .macro v_reg
                                312I	
                                313I	   #/* Get L1CSR1 register value */
                                314I	   mfspr    v_reg, REG_L1CSR1                      # v_reg := REG_L1CSR1
                                315I	
                                316I	   #/* Set CE and CPE bits */
                                317I	   oris     v_reg, v_reg, C_SET_CPE_BIT_MASK@ha    # v_reg := v_reg | C_SET_CPE_BIT_MASK
                                318I	   ori      v_reg, v_reg, C_SET_CE_BIT_MASK@l      # v_reg := v_reg | C_SET_CE_BIT_MASK
                                319I	
                                320I	   #/* Update L1CSR1 register value */
                                321I	   msync                                           # Mandatory sync instruction (see E200Z6_
                                    	RM 2.13.1)
                                322I	   isync
                                323I	   mtspr    REG_L1CSR1, v_reg                      # REG_L1CSR1 := v_reg
                                324I	
                                325I	   .endm
  00000000 00                   326I	
  00000000 00                   327I	
  00000000 00                   328I	#/*=========================================================================================
  00000000 00                       	========================== */
  00000000 00                   329I	#/*                                                    MMU                                  
  00000000 00                       	                           */
  00000000 00                   330I	#/*=========================================================================================
  00000000 00                       	========================== */
  00000000 00                   331I	
  00000000 00                   332I	REG_MMUCSR0_FI_SET: .macro v_reg1
                                333I	   lis      v_reg1,         C_SET_FI_BIT_MASK@ha
                                334I	   addi     v_reg1, v_reg1, C_SET_FI_BIT_MASK@l
                                335I	
                                336I	   #/* Update CSR0 value */
                                337I	   sync
                                338I	   mtspr    REG_MMUCSR0, v_reg1
                                339I	   isync
                                340I	
                                341I	   .endm
  00000000 00                   342I	
                               File: BOOT_Manag Errors    0
  Location Pl  Code            Line 	Source Statement
  00000000 00                   343I	#/* BEGIN FUNCTION HEADER-------------------------------------------------------------------
  00000000 00                       	-------------------------- */
  00000000 00                   344I	#/* <<LLR:  >>  SDD_DMS_LLR_REQ_0000021                                                     
  00000000 00                       	                           */
  00000000 00                   345I	#/*                                                                                         
  00000000 00                       	                           */
  00000000 00                   346I	#/* <<FUNCTION:  >>  REG_DTLB_LOAD                                                          
  00000000 00                       	                           */
  00000000 00                   347I	#/*                                                                                         
  00000000 00                       	                           */
  00000000 00                   348I	#/* <<DESCRIPTION:  >>  This function loads a PTE into a DTLB register by using the "tlbld" 
  00000000 00                       	instruction that loads the */
  00000000 00                   349I	#/*  data TLB entry from DCMP and RPA registers value. The register in parameter contains th
  00000000 00                       	e value of the effective a */
  00000000 00                   350I	#/* ddress of the TLB entry. It is a macro function in assembly language.                   
  00000000 00                       	                           */
  00000000 00                   351I	#/*                                                                                         
  00000000 00                       	                           */
  00000000 00                   352I	#/* END FUNCTION HEADER---------------------------------------------------------------------
  00000000 00                       	-------------------------- */
  00000000 00                   353I	REG_TLB_LOAD: .macro
                                354I	   sync
                                355I	   tlbwe
                                356I	   isync
                                357I	
                                358I	   .endm
  00000000 00                   359I	#/*End of REG_DTLB_LOAD*/
  00000000 00                   360I	
  00000000 00                   361I	#/* _END_MACRO =============================================================================
  00000000 00                       	========================== */
  00000000 00                     3 	   .include "BOOT_VectorTable.inc"
  00000000 00                     1I	#/******************************************************************************************
  00000000 00                       	*****************************
  00000000 00                     2I	#*
  00000000 00                     3I	#*                                                Safran Electronics & Defense
  00000000 00                     4I	#*                                                     SAFRAN Group
  00000000 00                     5I	#*
  00000000 00                     6I	#* _BEGIN_FILE_HEADER ----------------------------------------------------------------------
  00000000 00                       	----------------------------
  00000000 00                     7I	#*
  00000000 00                     8I	#* File name  : RLB_RBI_VectorTable.P2020.inc
  00000000 00                     9I	#* CSC name   :
  00000000 00                    10I	#* 
  00000000 00                    11I	#* Description: Vector Table CSU header file.
  00000000 00                    12I	#*
  00000000 00                    13I	#* Configuration management identification:
  00000000 00                    14I	#*    %full_name:  sknNEXT#1/ascii/BOOT_VectorTable.inc/1 %
  00000000 00                    15I	#*    Creation  :
  00000000 00                    16I	#*
  00000000 00                    17I	#* _END_FILE_HEADER ------------------------------------------------------------------------
  00000000 00                       	----------------------------
  00000000 00                    18I	#*
  00000000 00                    19I	#* LANGUAGE: ASM - Header file
  00000000 00                    20I	#*
  00000000 00                    21I	#* -----------------------------------------------------------------------------------------
  00000000 00                       	----------------------------
  00000000 00                    22I	#* Copyright (c) 2017, SAFRAN E&D
                               File: BOOT_Manag Errors    0
  Location Pl  Code            Line 	Source Statement
  00000000 00                    23I	#* SAFRAN Electronics & Defense document. Reproduction and disclosure forbidden.
  00000000 00                    24I	#*******************************************************************************************
  00000000 00                       	***************************/
  00000000 00                    25I	
  00000000 00                    26I	#/* _BEGIN_STATIC_PROTO ==================================== FUNCTION PROTOTYPES ===========
  00000000 00                       	========================== */
  00000000 00                    27I	#/* _END_STATIC_PROTO ======================================================================
  00000000 00                       	========================== */
  00000000 00                    28I	
  00000000 00                    29I	   .extern  C_SRC_DLD_sram_s
  00000000 00                    30I	
  00000000 00                    31I	#/* _BEGIN_CONSTANT ============================================ CONSTANTS =================
  00000000 00                       	========================== */
  00000000 00                    32I	
  00000000 00                    33I	#/* Offset definition for Stack Context Storage organisation ( User Defined ) */
  00000000 00                    34I	   .set     C_CR_OFFSET           ,0
  00000000 00                    35I	   .set     C_XER_OFFSET          ,4
  00000000 00                    36I	   .set     C_LR_OFFSET           ,8
  00000000 00                    37I	   .set     C_CTR_OFFSET          ,12
  00000000 00                    38I	   .set     C_SRR0_OFFSET         ,16
  00000000 00                    39I	   .set     C_SRR1_OFFSET         ,20
  00000000 00                    40I	   .set     C_BSP_VECT_DEC_OFFSET ,24 #/* Also defined in BSP_export.h*/
  00000000 00                    41I	   
  00000000 00                    42I	   .set     C_R0_OFFSET           ,32
  00000000 00                    43I	   .set     C_R0_OFFSET_LOW       ,36
  00000000 00                    44I	   .set     C_R1_OFFSET           ,40
  00000000 00                    45I	   .set     C_R1_OFFSET_LOW       ,44
  00000000 00                    46I	   .set     C_R2_OFFSET           ,48
  00000000 00                    47I	   .set     C_R2_OFFSET_LOW       ,52
  00000000 00                    48I	   .set     C_R3_OFFSET           ,56
  00000000 00                    49I	   .set     C_R3_OFFSET_LOW       ,60
  00000000 00                    50I	   .set     C_R4_OFFSET           ,64
  00000000 00                    51I	   .set     C_R4_OFFSET_LOW       ,68
  00000000 00                    52I	   .set     C_R5_OFFSET           ,72
  00000000 00                    53I	   .set     C_R5_OFFSET_LOW       ,76
  00000000 00                    54I	   .set     C_R6_OFFSET           ,80
  00000000 00                    55I	   .set     C_R6_OFFSET_LOW       ,84
  00000000 00                    56I	   .set     C_R7_OFFSET           ,88
  00000000 00                    57I	   .set     C_R7_OFFSET_LOW       ,92
  00000000 00                    58I	   .set     C_R8_OFFSET           ,96
  00000000 00                    59I	   .set     C_R8_OFFSET_LOW       ,100
  00000000 00                    60I	   .set     C_R9_OFFSET           ,104
  00000000 00                    61I	   .set     C_R9_OFFSET_LOW       ,108
  00000000 00                    62I	   .set     C_R10_OFFSET          ,112
  00000000 00                    63I	   .set     C_R10_OFFSET_LOW      ,116
  00000000 00                    64I	   .set     C_R11_OFFSET          ,120
  00000000 00                    65I	   .set     C_R11_OFFSET_LOW      ,124
  00000000 00                    66I	   .set     C_R12_OFFSET          ,128
  00000000 00                    67I	   .set     C_R12_OFFSET_LOW      ,132
  00000000 00                    68I	   .set     C_R13_OFFSET          ,136
  00000000 00                    69I	   .set     C_R13_OFFSET_LOW      ,140
  00000000 00                    70I	   .set     C_R14_OFFSET          ,144
  00000000 00                    71I	   .set     C_R14_OFFSET_LOW      ,148
  00000000 00                    72I	   .set     C_R15_OFFSET          ,152
  00000000 00                    73I	   .set     C_R15_OFFSET_LOW      ,156
  00000000 00                    74I	   .set     C_R16_OFFSET          ,160
  00000000 00                    75I	   .set     C_R16_OFFSET_LOW      ,164
                               File: BOOT_Manag Errors    0
  Location Pl  Code            Line 	Source Statement
  00000000 00                    76I	   .set     C_R17_OFFSET          ,168
  00000000 00                    77I	   .set     C_R17_OFFSET_LOW      ,172
  00000000 00                    78I	   .set     C_R18_OFFSET          ,176
  00000000 00                    79I	   .set     C_R18_OFFSET_LOW      ,180
  00000000 00                    80I	   .set     C_R19_OFFSET          ,184
  00000000 00                    81I	   .set     C_R19_OFFSET_LOW      ,188
  00000000 00                    82I	   .set     C_R20_OFFSET          ,192
  00000000 00                    83I	   .set     C_R20_OFFSET_LOW      ,196
  00000000 00                    84I	   .set     C_R21_OFFSET          ,200
  00000000 00                    85I	   .set     C_R21_OFFSET_LOW      ,204
  00000000 00                    86I	   .set     C_R22_OFFSET          ,208
  00000000 00                    87I	   .set     C_R22_OFFSET_LOW      ,212
  00000000 00                    88I	   .set     C_R23_OFFSET          ,216
  00000000 00                    89I	   .set     C_R23_OFFSET_LOW      ,220
  00000000 00                    90I	   .set     C_R24_OFFSET          ,224
  00000000 00                    91I	   .set     C_R24_OFFSET_LOW      ,228
  00000000 00                    92I	   .set     C_R25_OFFSET          ,232
  00000000 00                    93I	   .set     C_R25_OFFSET_LOW      ,236
  00000000 00                    94I	   .set     C_R26_OFFSET          ,240
  00000000 00                    95I	   .set     C_R26_OFFSET_LOW      ,244
  00000000 00                    96I	   .set     C_R27_OFFSET          ,248
  00000000 00                    97I	   .set     C_R27_OFFSET_LOW      ,252
  00000000 00                    98I	   .set     C_R28_OFFSET          ,256
  00000000 00                    99I	   .set     C_R28_OFFSET_LOW      ,260
  00000000 00                   100I	   .set     C_R29_OFFSET          ,264
  00000000 00                   101I	   .set     C_R29_OFFSET_LOW      ,268
  00000000 00                   102I	   .set     C_R30_OFFSET          ,272
  00000000 00                   103I	   .set     C_R30_OFFSET_LOW      ,276
  00000000 00                   104I	   .set     C_R31_OFFSET          ,280
  00000000 00                   105I	   .set     C_R31_OFFSET_LOW      ,284
  00000000 00                   106I	   
  00000000 00                   107I	   .set     C_SPEFSCR_OFFSET      ,288
  00000000 00                   108I	
  00000000 00                   109I	   .set     C_BSP_VECT_EOT_OFFSET ,416 #
  00000000 00                   110I	
  00000000 00                   111I	   #/* Size of memory to allocate on top of process stack to store context */
  00000000 00                   112I	   .set     C_BSP_VECT_CONTEXT_SIZE  ,512  #
  00000000 00                   113I	   
  00000000 00                   114I	   #/* Size of LR register and back chaine words to respect EABI implementation in process s
  00000000 00                       	tack. */
  00000000 00                   115I	   .set     C_BSP_VECT_EABI_REG_SIZE ,8
  00000000 00                   116I	
  00000000 00                   117I	   #/* HID0 init value, enable timer base */
  00000000 00                   118I	   .set     C_HID0_INIT_VALUE     ,0x00004000
  00000000 00                   119I	
  00000000 00                   120I	   #/* BOOT MSR first configuration. Set SPE, ME and DE bits */
  00000000 00                   121I	   .set     C_MSR_BOOT_CONFIG      ,0x02001200
  00000000 00                   122I	
  00000000 00                   123I	   #/* Process MSR configuration. Set SPE, PR, EE, ME, DE, IS and DS bits. */
  00000000 00                   124I	   .set     C_MSR_PROCESS_CONFIG  ,0x0200D230
  00000000 00                   125I	
  00000000 00                   126I	   #/* Error Codes */
  00000000 00                   127I	   .set     C_MCHECK_ERROR_CODE   ,0x00000002 #/* Machine Check error code. */
  00000000 00                   128I	   .set     C_DAE_ERROR_CODE      ,0x00000003 #/* Data access error code. */
  00000000 00                   129I	   .set     C_IAE_ERROR_CODE      ,0x00000004 #/* Instruction access error code. */
  00000000 00                   130I	   .set     C_ALIGN_ERROR_CODE    ,0x00000006 #/* Alignement error code. */
  00000000 00                   131I	   .set     C_PROG_ERROR_CODE     ,0x00000007 #/* Program error code. */   
                               File: BOOT_Manag Errors    0
  Location Pl  Code            Line 	Source Statement
  00000000 00                   132I	   .set     C_FPU_ERROR_CODE      ,0x00000008 #/* Floating point unavailable error code. */
  00000000 00                   133I	   .set     C_CRITICAL_ERROR_CODE ,0x0000000A #/* Critical interrupt error code. */
  00000000 00                   134I	   .set     C_IMISS_ERROR_CODE    ,0x00000010 #/* Instruction TLB miss error code. */
  00000000 00                   135I	   .set     C_DMISS_ERROR_CODE    ,0x00000011 #/* Data TLB miss error code. */
  00000000 00                   136I	   .set     C_DEBUG_ERROR_CODE    ,0x00000013 #/* Debug error code. */
  00000000 00                   137I	   .set     C_SYSM_ERROR_CODE     ,0x00000014 #/* System management error code. */
  00000000 00                   138I	   .set     C_TIMER_ERROR_CODE    ,0x00000016 #/* Unexpected timer IT error code. */
  00000000 00                   139I	   .set     C_SPE_ERROR_CODE      ,0x00000018 #/* SPE Unvailable error code. */
  00000000 00                   140I	   .set     C_FP_ERROR_CODE       ,0x00000019 #/* SPE error, error code. */
  00000000 00                   141I	   .set     C_PERF_MON_ERROR_CODE ,0x00000020 #/* Performance monitor error code. */
  00000000 00                   142I	
  00000000 00                   143I	#/* _END_CONSTANT ==========================================================================
  00000000 00                       	========================== */
  00000000 00                   144I	
  00000000 00                   145I	#/* BEGIN FUNCTION HEADER-------------------------------------------------------------------
  00000000 00                       	-------------------------- */
  00000000 00                   146I	#/* <<LLR:  >>  SDD_DMS_LLR_REQ_0000150                                                     
  00000000 00                       	                           */
  00000000 00                   147I	#/*                                                                                         
  00000000 00                       	                           */
  00000000 00                   148I	#/* <<FUNCTION:  >>  ERROR_IT                                                               
  00000000 00                       	                           */
  00000000 00                   149I	#/*                                                                                         
  00000000 00                       	                           */
  00000000 00                   150I	#/* <<DESCRIPTION:  >>  It is the generic error interrupt handler. It handles errors and POS
  00000000 00                       	T that use interrupts. Thi */
  00000000 00                   151I	#/* s is an assembly macro function.                                                        
  00000000 00                       	                           */
  00000000 00                   152I	#/*                                                                                         
  00000000 00                       	                           */
  00000000 00                   153I	#/* END FUNCTION HEADER---------------------------------------------------------------------
  00000000 00                       	-------------------------- */
  00000000 00                   154I	ERROR_IT: .macro v_Error
                                155I	
                                156I	    #/* Save LR in SPRG3 */
                                157I	    mflr     r3
                                158I	    mtsprg3  r3
                                159I	
                                160I	    #/* Restores stack */
                                161I	    lwz      r1,  0 (r1)
                                162I	
                                163I	    #/* Sets error code */
                                164I	    lis      r3,       v_Error@ha
                                165I	    addi     r3,  r3,  v_Error@l
                                166I	
                                167I	    #/* Calls error handler function */
                                168I	    bl      BSP_VECT_ErrorIt
                                169I	
                                170I	    #/* The following code is executed only in case of POST */
                                171I	
                                172I	    #/* Restore original LR value in SRR0 */
                                173I	    #/* Return of IT (rfi) will act "as" return of POST function (blr) */
                                174I	    mfsprg3  r3
                                175I	    mtsrr0   r3
                                176I	    
                                177I	   .endm
  00000000 00                   178I	#/*End of ERROR_IT */
                               File: BOOT_Manag Errors    0
  Location Pl  Code            Line 	Source Statement
  00000000 00                     4 	
  00000000 00                     5 	   .global BOOT_ConfigureManageInterrupts
  00000000 00                     6 	   .global ClearDecrementerIT_Status
  00000000 00                     7 	   .global SaveContext
  00000000 00                     8 	   .global RestoreContext
  00000000 00                     9 	   .global CriticalInputInterruptHandler
  00000000 00                    10 	   .global MachineCheckInterruptHandler
  00000000 00                    11 	   .global DataStorageInterruptHandler
  00000000 00                    12 	   .global InstructionStorageInterruptHandler
  00000000 00                    13 	   .global AlignementInterruptHandler
  00000000 00                    14 	   .global ProgramInterruptHandler
  00000000 00                    15 	   .global SystemCallInterruptHandler
  00000000 00                    16 	   .global FPU_UnavailableInterruptHandler
  00000000 00                    17 	   .global FixedIntervalTimerInterruptHandler
  00000000 00                    18 	   .global InstructionTLB_InterruptHandler
  00000000 00                    19 	   .global DebugInterruptHandler
  00000000 00                    20 	   .global SPE_APU_UnavailableInterruptHandler
  00000000 00                    21 	   .global EFP_DataExceptionInterruptHandler
  00000000 00                    22 	   .global EFP_RoundExceptionInterruptHandler
  00000000 00                    23 	   .global PerformanceMonitorInterruptHandler
  00000000 00                    24 	
  00000000 00                    25 	   .set C_IT_CONTEXT_BACKUP_SIZE           ,512
  00000000 00                    26 	
  00000000 00                    27 	   .set C_R0_IT_CONTEXT_BACKUP_OFFSET      ,32
  00000000 00                    28 	   .set C_R0_IT_CONTEXT_BACKUP_OFFSET_LOW  ,36
  00000000 00                    29 	   .set C_R1_IT_CONTEXT_BACKUP_OFFSET      ,40
  00000000 00                    30 	   .set C_R1_IT_CONTEXT_BACKUP_OFFSET_LOW  ,44
  00000000 00                    31 	   .set C_R2_IT_CONTEXT_BACKUP_OFFSET      ,48
  00000000 00                    32 	   .set C_R2_IT_CONTEXT_BACKUP_OFFSET_LOW  ,52
  00000000 00                    33 	   .set C_R3_IT_CONTEXT_BACKUP_OFFSET      ,56
  00000000 00                    34 	   .set C_R3_IT_CONTEXT_BACKUP_OFFSET_LOW  ,60
  00000000 00                    35 	   .set C_R4_IT_CONTEXT_BACKUP_OFFSET      ,64
  00000000 00                    36 	   .set C_R4_IT_CONTEXT_BACKUP_OFFSET_LOW  ,68
  00000000 00                    37 	   .set C_R5_IT_CONTEXT_BACKUP_OFFSET      ,72
  00000000 00                    38 	   .set C_R5_IT_CONTEXT_BACKUP_OFFSET_LOW  ,76
  00000000 00                    39 	   .set C_R6_IT_CONTEXT_BACKUP_OFFSET      ,80
  00000000 00                    40 	   .set C_R6_IT_CONTEXT_BACKUP_OFFSET_LOW  ,84
  00000000 00                    41 	   .set C_R7_IT_CONTEXT_BACKUP_OFFSET      ,88
  00000000 00                    42 	   .set C_R7_IT_CONTEXT_BACKUP_OFFSET_LOW  ,92
  00000000 00                    43 	   .set C_R8_IT_CONTEXT_BACKUP_OFFSET      ,96
  00000000 00                    44 	   .set C_R8_IT_CONTEXT_BACKUP_OFFSET_LOW  ,100
  00000000 00                    45 	   .set C_R9_IT_CONTEXT_BACKUP_OFFSET      ,104
  00000000 00                    46 	   .set C_R9_IT_CONTEXT_BACKUP_OFFSET_LOW  ,108
  00000000 00                    47 	   .set C_R10_IT_CONTEXT_BACKUP_OFFSET     ,112
  00000000 00                    48 	   .set C_R10_IT_CONTEXT_BACKUP_OFFSET_LOW ,116
  00000000 00                    49 	   .set C_R11_IT_CONTEXT_BACKUP_OFFSET     ,120
  00000000 00                    50 	   .set C_R11_IT_CONTEXT_BACKUP_OFFSET_LOW ,124
  00000000 00                    51 	   .set C_R12_IT_CONTEXT_BACKUP_OFFSET     ,128
  00000000 00                    52 	   .set C_R12_IT_CONTEXT_BACKUP_OFFSET_LOW ,132
  00000000 00                    53 	   .set C_R13_IT_CONTEXT_BACKUP_OFFSET     ,136
  00000000 00                    54 	   .set C_R13_IT_CONTEXT_BACKUP_OFFSET_LOW ,140
  00000000 00                    55 	   .set C_R14_IT_CONTEXT_BACKUP_OFFSET     ,144
  00000000 00                    56 	   .set C_R14_IT_CONTEXT_BACKUP_OFFSET_LOW ,148
  00000000 00                    57 	   .set C_R15_IT_CONTEXT_BACKUP_OFFSET     ,152
  00000000 00                    58 	   .set C_R15_IT_CONTEXT_BACKUP_OFFSET_LOW ,156
  00000000 00                    59 	   .set C_R16_IT_CONTEXT_BACKUP_OFFSET     ,160
  00000000 00                    60 	   .set C_R16_IT_CONTEXT_BACKUP_OFFSET_LOW ,164
                               File: BOOT_Manag Errors    0
  Location Pl  Code            Line 	Source Statement
  00000000 00                    61 	   .set C_R17_IT_CONTEXT_BACKUP_OFFSET     ,168
  00000000 00                    62 	   .set C_R17_IT_CONTEXT_BACKUP_OFFSET_LOW ,172
  00000000 00                    63 	   .set C_R18_IT_CONTEXT_BACKUP_OFFSET     ,176
  00000000 00                    64 	   .set C_R18_IT_CONTEXT_BACKUP_OFFSET_LOW ,180
  00000000 00                    65 	   .set C_R19_IT_CONTEXT_BACKUP_OFFSET     ,184
  00000000 00                    66 	   .set C_R19_IT_CONTEXT_BACKUP_OFFSET_LOW ,188
  00000000 00                    67 	   .set C_R20_IT_CONTEXT_BACKUP_OFFSET     ,192
  00000000 00                    68 	   .set C_R20_IT_CONTEXT_BACKUP_OFFSET_LOW ,196
  00000000 00                    69 	   .set C_R21_IT_CONTEXT_BACKUP_OFFSET     ,200
  00000000 00                    70 	   .set C_R21_IT_CONTEXT_BACKUP_OFFSET_LOW ,204
  00000000 00                    71 	   .set C_R22_IT_CONTEXT_BACKUP_OFFSET     ,208
  00000000 00                    72 	   .set C_R22_IT_CONTEXT_BACKUP_OFFSET_LOW ,212
  00000000 00                    73 	   .set C_R23_IT_CONTEXT_BACKUP_OFFSET     ,216
  00000000 00                    74 	   .set C_R23_IT_CONTEXT_BACKUP_OFFSET_LOW ,220
  00000000 00                    75 	   .set C_R24_IT_CONTEXT_BACKUP_OFFSET     ,224
  00000000 00                    76 	   .set C_R24_IT_CONTEXT_BACKUP_OFFSET_LOW ,228
  00000000 00                    77 	   .set C_R25_IT_CONTEXT_BACKUP_OFFSET     ,232
  00000000 00                    78 	   .set C_R25_IT_CONTEXT_BACKUP_OFFSET_LOW ,236
  00000000 00                    79 	   .set C_R26_IT_CONTEXT_BACKUP_OFFSET     ,240
  00000000 00                    80 	   .set C_R26_IT_CONTEXT_BACKUP_OFFSET_LOW ,244
  00000000 00                    81 	   .set C_R27_IT_CONTEXT_BACKUP_OFFSET     ,248
  00000000 00                    82 	   .set C_R27_IT_CONTEXT_BACKUP_OFFSET_LOW ,252
  00000000 00                    83 	   .set C_R28_IT_CONTEXT_BACKUP_OFFSET     ,256
  00000000 00                    84 	   .set C_R28_IT_CONTEXT_BACKUP_OFFSET_LOW ,260
  00000000 00                    85 	   .set C_R29_IT_CONTEXT_BACKUP_OFFSET     ,264
  00000000 00                    86 	   .set C_R29_IT_CONTEXT_BACKUP_OFFSET_LOW ,268
  00000000 00                    87 	   .set C_R30_IT_CONTEXT_BACKUP_OFFSET     ,272
  00000000 00                    88 	   .set C_R30_IT_CONTEXT_BACKUP_OFFSET_LOW ,276
  00000000 00                    89 	   .set C_R31_IT_CONTEXT_BACKUP_OFFSET     ,280
  00000000 00                    90 	   .set C_R31_IT_CONTEXT_BACKUP_OFFSET_LOW ,284
  00000000 00                    91 	   
  00000000 00                    92 	   .set C_CR_IT_CONTEXT_BACKUP_OFFSET      ,0
  00000000 00                    93 	   .set C_XER_IT_CONTEXT_BACKUP_OFFSET     ,4
  00000000 00                    94 	   .set C_LR_IT_CONTEXT_BACKUP_OFFSET      ,8
  00000000 00                    95 	   .set C_CTR_IT_CONTEXT_BACKUP_OFFSET     ,12
  00000000 00                    96 	   .set C_SRR0_IT_CONTEXT_BACKUP_OFFSET    ,16
  00000000 00                    97 	   .set C_SRR1_IT_CONTEXT_BACKUP_OFFSET    ,20
  00000000 00                    98 	   .set C_SPEFSCR_IT_CONTEXT_BACKUP_OFFSET ,288
  00000000 00                    99 	
  00000000 00                   100 	   .set TSR_DIS_SET_MASK, 0x08000000
  00000000 00                   101 	
  00000000 00                   102 	BOOT_ConfigureManageInterrupts:
  00000000 00                   103 	; Configure interrupt vector registers
  00000000 00  3c60 0000        104 	   lis     r3, IVOR0_Handler@ha
  00000004 00  7c7f 0ba6        105 	   mtspr   REG_IVPR, r3 ; Configure base vector address
  00000008 00  3860 0000        106 	   li      r3, IVOR0_Handler@l
  0000000c 00  7c70 63a6        107 	   mtspr   REG_IVOR0, r3 ; IVOR0 offset
  00000010 00  3860 0000        108 	   li      r3, IVOR1_Handler@l
  00000014 00  7c71 63a6        109 	   mtspr   REG_IVOR1, r3 ; IVOR1 offset
  00000018 00  3860 0000        110 	   li      r3, IVOR2_Handler@l
  0000001c 00  7c72 63a6        111 	   mtspr   REG_IVOR2, r3 ; IVOR2 offset
  00000020 00  3860 0000        112 	   li      r3, IVOR3_Handler@l
  00000024 00  7c73 63a6        113 	   mtspr   REG_IVOR3, r3 ; IVOR3 offset
  00000028 00  3860 0000        114 	   li      r3, IVOR4_Handler@l
  0000002c 00  7c74 63a6        115 	   mtspr   REG_IVOR4, r3 ; IVOR4 offset
  00000030 00  3860 0000        116 	   li      r3, IVOR5_Handler@l
  00000034 00  7c75 63a6        117 	   mtspr   REG_IVOR5, r3 ; IVOR5 offset
                               File: BOOT_Manag Errors    0
  Location Pl  Code            Line 	Source Statement
  00000038 00  3860 0000        118 	   li      r3, IVOR6_Handler@l
  0000003c 00  7c76 63a6        119 	   mtspr   REG_IVOR6, r3 ; IVOR6 offset
  00000040 00  3860 0000        120 	   li      r3, IVOR7_Handler@l
  00000044 00  7c77 63a6        121 	   mtspr   REG_IVOR7, r3 ; IVOR7 offset
  00000048 00  3860 0000        122 	   li      r3, IVOR8_Handler@l
  0000004c 00  7c78 63a6        123 	   mtspr   REG_IVOR8, r3 ; IVOR8 offset
  00000050 00  3860 0000        124 	   li      r3, IVOR10_Handler@l
  00000054 00  7c7a 63a6        125 	   mtspr   REG_IVOR10, r3 ; IVOR10 offset
  00000058 00  3860 0000        126 	   li      r3, IVOR11_Handler@l
  0000005c 00  7c7b 63a6        127 	   mtspr   REG_IVOR11, r3 ; IVOR11 offset
  00000060 00  3860 0000        128 	   li      r3, IVOR13_Handler@l
  00000064 00  7c7d 63a6        129 	   mtspr   REG_IVOR13, r3 ; IVOR13 offset
  00000068 00  3860 0000        130 	   li      r3, IVOR14_Handler@l
  0000006c 00  7c7e 63a6        131 	   mtspr   REG_IVOR14, r3 ; IVOR14 offset
  00000070 00  3860 0000        132 	   li      r3, IVOR15_Handler@l
  00000074 00  7c7f 63a6        133 	   mtspr   REG_IVOR15, r3 ; IVOR15 offset
  00000078 00  3860 0000        134 	   li      r3, IVOR32_Handler@l
  0000007c 00  7c70 83a6        135 	   mtspr   REG_IVOR32, r3 ; IVOR32 offset
  00000080 00  3860 0000        136 	   li      r3, IVOR33_Handler@l
  00000084 00  7c71 83a6        137 	   mtspr   REG_IVOR33, r3 ; IVOR33 offset
  00000088 00  3860 0000        138 	   li      r3, IVOR34_Handler@l
  0000008c 00  7c72 83a6        139 	   mtspr   REG_IVOR34, r3 ; IVOR34 offset
  00000090 00  3860 0000        140 	   li      r3, IVOR35_Handler@l
  00000094 00  7c73 83a6        141 	   mtspr   REG_IVOR35, r3 ; IVOR35 offset
  00000098 00  4e80 0020        142 	   blr
  0000009c 00                   143 	
  0000009c 00                   144 	ClearDecrementerIT_Status:
  0000009c 00  7c72 43a6        145 	   mtsprg2 r3 ; Save R3 in SPRG2
  000000a0 00  7c70 52a6        146 	   mfspr   r3, REG_TSR
  000000a4 00  6463 0800        147 	   oris    r3, r3, TSR_DIS_SET_MASK@h
  000000a8 00  6063 0000        148 	   ori     r3, r3, TSR_DIS_SET_MASK@l
  000000ac 00  7c70 53a6        149 	   mtspr   REG_TSR, r3
  000000b0 00  7c72 42a6        150 	   mfsprg2 r3
  000000b4 00  4e80 0020        151 	   blr
  000000b8 00                   152 	
  000000b8 00                   153 	; Save
  000000b8 00                   154 	SaveContext:
  000000b8 00  9421 fe00        155 	   stwu        r1, -C_IT_CONTEXT_BACKUP_SIZE(r1)
  000000bc 00                   156 	   
  000000bc 00  7c71 43a6        157 	   mtsprg1     r3
  000000c0 00                   158 	   REG_MSR_SET_SPE r3
  000000c0 00                   173M	   #/** Gets MSR */
  000000c0 00  7c60 00a6        174M	   mfmsr    r3
  000000c4 00                   175M	
  000000c4 00                   176M	   #/** Sets FP bit */
  000000c4 00  6463 0200        177M	   oris     r3, r3, C_SET_SPE_BIT_MASK
  000000c8 00                   178M	
  000000c8 00                   179M	   #/** Updates MSR */
  000000c8 00  7c00 04ac        180M	   sync
  000000cc 00  7c60 0124        181M	   mtmsr    r3
  000000d0 00  7c00 04ac        182M	   sync
  000000d4 00  4c00 012c        183M	   isync
  000000d8 00                   184M	
  000000d8 00  7c71 42a6        159 	   mfsprg1     r3
  000000dc 00                   160 	   
  000000dc 00  9001 0024        161 	   stw         r0, C_R0_IT_CONTEXT_BACKUP_OFFSET_LOW(r1)   ; Store lower 32bits of r0
  000000e0 00  1000 022f        162 	   evmergelohi r0, r0, r0      ; Invert high and low orders 32bits of r0
                               File: BOOT_Manag Errors    0
  Location Pl  Code            Line 	Source Statement
  000000e4 00  9001 0020        163 	   stw         r0, C_R0_IT_CONTEXT_BACKUP_OFFSET    (r1)   ; Store upper 32bits of r0
  000000e8 00  1000 022f        164 	   evmergelohi r0, r0, r0      ; Invert high and low orders 32bits of r0
  000000ec 00                   165 	   
  000000ec 00                   166 	   ; stw         r1, C_R1_IT_CONTEXT_BACKUP_OFFSET_LOW(r1)   ; Store lower 32bits of r1
  000000ec 00                   167 	   ; evmergelohi r1, r1, r1      ; Invert high and low orders 32bits of r1
  000000ec 00                   168 	   ; stw         r1, C_R1_IT_CONTEXT_BACKUP_OFFSET    (r1)   ; Store upper 32bits of r1
  000000ec 00                   169 	   ; evmergelohi r1, r1, r1      ; Invert high and low orders 32bits of r1
  000000ec 00                   170 	   
  000000ec 00  9041 0034        171 	   stw         r2, C_R2_IT_CONTEXT_BACKUP_OFFSET_LOW(r1)   ; Store lower 32bits of r2
  000000f0 00  1042 122f        172 	   evmergelohi r2, r2, r2      ; Invert high and low orders 32bits of r2
  000000f4 00  9041 0030        173 	   stw         r2, C_R2_IT_CONTEXT_BACKUP_OFFSET    (r1)   ; Store upper 32bits of r2
  000000f8 00  1042 122f        174 	   evmergelohi r2, r2, r2      ; Invert high and low orders 32bits of r2
  000000fc 00                   175 	   
  000000fc 00  9061 003c        176 	   stw         r3, C_R3_IT_CONTEXT_BACKUP_OFFSET_LOW(r1)   ; Store lower 32bits of r3
  00000100 00  1063 1a2f        177 	   evmergelohi r3, r3, r3      ; Invert high and low orders 32bits of r3 in r3
  00000104 00  9061 0038        178 	   stw         r3, C_R3_IT_CONTEXT_BACKUP_OFFSET    (r1)   ; Store upper 32bits of r3
  00000108 00  1063 1a2f        179 	   evmergelohi r3, r3, r3      ; Invert high and low orders 32bits of r3 in r3
  0000010c 00                   180 	   
  0000010c 00  9081 0044        181 	   stw         r4, C_R4_IT_CONTEXT_BACKUP_OFFSET_LOW(r1)   ; Store lower 32bits of r4
  00000110 00  1084 222f        182 	   evmergelohi r4, r4, r4      ; Invert high and low orders 32bits of r4
  00000114 00  9081 0040        183 	   stw         r4, C_R4_IT_CONTEXT_BACKUP_OFFSET    (r1)   ; Store upper 32bits of r4
  00000118 00  1084 222f        184 	   evmergelohi r4, r4, r4      ; Invert high and low orders 32bits of r4
  0000011c 00                   185 	   
  0000011c 00  90a1 004c        186 	   stw         r5, C_R5_IT_CONTEXT_BACKUP_OFFSET_LOW(r1)   ; Store lower 32bits of r5
  00000120 00  10a5 2a2f        187 	   evmergelohi r5, r5, r5      ; Invert high and low orders 32bits of r5
  00000124 00  90a1 0048        188 	   stw         r5, C_R5_IT_CONTEXT_BACKUP_OFFSET    (r1)   ; Store upper 32bits of r5
  00000128 00  10a5 2a2f        189 	   evmergelohi r5, r5, r5      ; Invert high and low orders 32bits of r5
  0000012c 00                   190 	   
  0000012c 00  90c1 0054        191 	   stw         r6, C_R6_IT_CONTEXT_BACKUP_OFFSET_LOW(r1)   ; Store lower 32bits of r6
  00000130 00  10c6 322f        192 	   evmergelohi r6, r6, r6      ; Invert high and low orders 32bits of r6
  00000134 00  90c1 0050        193 	   stw         r6, C_R6_IT_CONTEXT_BACKUP_OFFSET    (r1)   ; Store upper 32bits of r6
  00000138 00  10c6 322f        194 	   evmergelohi r6, r6, r6      ; Invert high and low orders 32bits of r6
  0000013c 00                   195 	   
  0000013c 00  90e1 005c        196 	   stw         r7, C_R7_IT_CONTEXT_BACKUP_OFFSET_LOW(r1)   ; Store lower 32bits of r7
  00000140 00  10e7 3a2f        197 	   evmergelohi r7, r7, r7      ; Invert high and low orders 32bits of r7
  00000144 00  90e1 0058        198 	   stw         r7, C_R7_IT_CONTEXT_BACKUP_OFFSET    (r1)   ; Store upper 32bits of r7
  00000148 00  10e7 3a2f        199 	   evmergelohi r7, r7, r7      ; Invert high and low orders 32bits of r7
  0000014c 00                   200 	   
  0000014c 00  9101 0064        201 	   stw         r8, C_R8_IT_CONTEXT_BACKUP_OFFSET_LOW(r1)   ; Store lower 32bits of r8
  00000150 00  1108 422f        202 	   evmergelohi r8, r8, r8      ; Invert high and low orders 32bits of r8
  00000154 00  9101 0060        203 	   stw         r8, C_R8_IT_CONTEXT_BACKUP_OFFSET    (r1)   ; Store upper 32bits of r8
  00000158 00  1108 422f        204 	   evmergelohi r8, r8, r8      ; Invert high and low orders 32bits of r8
  0000015c 00                   205 	   
  0000015c 00  9121 006c        206 	   stw         r9, C_R9_IT_CONTEXT_BACKUP_OFFSET_LOW(r1)   ; Store lower 32bits of r9
  00000160 00  1129 4a2f        207 	   evmergelohi r9, r9, r9      ; Invert high and low orders 32bits of r9
  00000164 00  9121 0068        208 	   stw         r9, C_R9_IT_CONTEXT_BACKUP_OFFSET     (r1)  ; Store upper 32bits of r9
  00000168 00  1129 4a2f        209 	   evmergelohi r9, r9, r9      ; Invert high and low orders 32bits of r9
  0000016c 00                   210 	   
  0000016c 00  9141 0074        211 	   stw         r10, C_R10_IT_CONTEXT_BACKUP_OFFSET_LOW(r1) ; Store lower 32bits of r10
  00000170 00  114a 522f        212 	   evmergelohi r10, r10, r10   ; Invert high and low orders 32bits of r10
  00000174 00  9141 0070        213 	   stw         r10, C_R10_IT_CONTEXT_BACKUP_OFFSET    (r1) ; Store upper 32bits of r10
  00000178 00  114a 522f        214 	   evmergelohi r10, r10, r10   ; Invert high and low orders 32bits of r10
  0000017c 00                   215 	   
  0000017c 00  9161 007c        216 	   stw         r11, C_R11_IT_CONTEXT_BACKUP_OFFSET_LOW(r1) ; Store lower 32bits of r11
  00000180 00  116b 5a2f        217 	   evmergelohi r11, r11, r11   ; Invert high and low orders 32bits of r11
  00000184 00  9161 0078        218 	   stw         r11, C_R11_IT_CONTEXT_BACKUP_OFFSET    (r1) ; Store upper 32bits of r11
  00000188 00  116b 5a2f        219 	   evmergelohi r11, r11, r11   ; Invert high and low orders 32bits of r11
                               File: BOOT_Manag Errors    0
  Location Pl  Code            Line 	Source Statement
  0000018c 00                   220 	   
  0000018c 00  9181 0084        221 	   stw         r12, C_R12_IT_CONTEXT_BACKUP_OFFSET_LOW(r1) ; Store lower 32bits of r12
  00000190 00  118c 622f        222 	   evmergelohi r12, r12, r12   ; Invert high and low orders 32bits of r12
  00000194 00  9181 0080        223 	   stw         r12, C_R12_IT_CONTEXT_BACKUP_OFFSET    (r1) ; Store upper 32bits of r12
  00000198 00  118c 622f        224 	   evmergelohi r12, r12, r12   ; Invert high and low orders 32bits of r12
  0000019c 00                   225 	   
  0000019c 00  91a1 008c        226 	   stw         r13, C_R13_IT_CONTEXT_BACKUP_OFFSET_LOW(r1) ; Store lower 32bits of r13
  000001a0 00  11ad 6a2f        227 	   evmergelohi r13, r13, r13   ; Invert high and low orders 32bits of r13
  000001a4 00  91a1 0088        228 	   stw         r13, C_R13_IT_CONTEXT_BACKUP_OFFSET    (r1) ; Store upper 32bits of r13
  000001a8 00  11ad 6a2f        229 	   evmergelohi r13, r13, r13   ; Invert high and low orders 32bits of r13
  000001ac 00                   230 	   
  000001ac 00  91c1 0094        231 	   stw         r14, C_R14_IT_CONTEXT_BACKUP_OFFSET_LOW(r1) ; Store lower 32bits of r14
  000001b0 00  11ce 722f        232 	   evmergelohi r14, r14, r14   ; Invert high and low orders 32bits of r14
  000001b4 00  91c1 0090        233 	   stw         r14, C_R14_IT_CONTEXT_BACKUP_OFFSET    (r1) ; Store upper 32bits of r14
  000001b8 00  11ce 722f        234 	   evmergelohi r14, r14, r14   ; Invert high and low orders 32bits of r14
  000001bc 00                   235 	   
  000001bc 00  91e1 009c        236 	   stw         r15, C_R15_IT_CONTEXT_BACKUP_OFFSET_LOW(r1) ; Store lower 32bits of r15
  000001c0 00  11ef 7a2f        237 	   evmergelohi r15, r15, r15   ; Invert high and low orders 32bits of r15
  000001c4 00  91e1 0098        238 	   stw         r15, C_R15_IT_CONTEXT_BACKUP_OFFSET    (r1) ; Store upper 32bits of r15
  000001c8 00  11ef 7a2f        239 	   evmergelohi r15, r15, r15   ; Invert high and low orders 32bits of r15
  000001cc 00                   240 	   
  000001cc 00  9201 00a4        241 	   stw         r16, C_R16_IT_CONTEXT_BACKUP_OFFSET_LOW(r1) ; Store lower 32bits of r16
  000001d0 00  1210 822f        242 	   evmergelohi r16, r16, r16   ; Invert high and low orders 32bits of r16
  000001d4 00  9201 00a0        243 	   stw         r16, C_R16_IT_CONTEXT_BACKUP_OFFSET    (r1) ; Store upper 32bits of r16
  000001d8 00  1210 822f        244 	   evmergelohi r16, r16, r16   ; Invert high and low orders 32bits of r16
  000001dc 00                   245 	   
  000001dc 00  9221 00ac        246 	   stw         r17, C_R17_IT_CONTEXT_BACKUP_OFFSET_LOW(r1) ; Store lower 32bits of r17
  000001e0 00  1231 8a2f        247 	   evmergelohi r17, r17, r17   ; Invert high and low orders 32bits of r17
  000001e4 00  9221 00a8        248 	   stw         r17, C_R17_IT_CONTEXT_BACKUP_OFFSET    (r1) ; Store upper 32bits of r17
  000001e8 00  1231 8a2f        249 	   evmergelohi r17, r17, r17   ; Invert high and low orders 32bits of r17
  000001ec 00                   250 	   
  000001ec 00  9241 00b4        251 	   stw         r18, C_R18_IT_CONTEXT_BACKUP_OFFSET_LOW(r1) ; Store lower 32bits of r18
  000001f0 00  1252 922f        252 	   evmergelohi r18, r18, r18   ; Invert high and low orders 32bits of r18
  000001f4 00  9241 00b0        253 	   stw         r18, C_R18_IT_CONTEXT_BACKUP_OFFSET    (r1) ; Store upper 32bits of r18
  000001f8 00  1252 922f        254 	   evmergelohi r18, r18, r18   ; Invert high and low orders 32bits of r18
  000001fc 00                   255 	   
  000001fc 00  9261 00bc        256 	   stw         r19, C_R19_IT_CONTEXT_BACKUP_OFFSET_LOW(r1) ; Store lower 32bits of r19
  00000200 00  1273 9a2f        257 	   evmergelohi r19, r19, r19   ; Invert high and low orders 32bits of r19
  00000204 00  9261 00b8        258 	   stw         r19, C_R19_IT_CONTEXT_BACKUP_OFFSET    (r1) ; Store upper 32bits of r19
  00000208 00  1273 9a2f        259 	   evmergelohi r19, r19, r19   ; Invert high and low orders 32bits of r19
  0000020c 00                   260 	   
  0000020c 00  9281 00c4        261 	   stw         r20, C_R20_IT_CONTEXT_BACKUP_OFFSET_LOW(r1) ; Store lower 32bits of r20
  00000210 00  1294 a22f        262 	   evmergelohi r20, r20, r20   ; Invert high and low orders 32bits of r20
  00000214 00  9281 00c0        263 	   stw         r20, C_R20_IT_CONTEXT_BACKUP_OFFSET    (r1) ; Store upper 32bits of r20
  00000218 00  1294 a22f        264 	   evmergelohi r20, r20, r20   ; Invert high and low orders 32bits of r20
  0000021c 00                   265 	   
  0000021c 00  92a1 00cc        266 	   stw         r21, C_R21_IT_CONTEXT_BACKUP_OFFSET_LOW(r1) ; Store lower 32bits of r21
  00000220 00  12b5 aa2f        267 	   evmergelohi r21, r21, r21   ; Invert high and low orders 32bits of r21
  00000224 00  92a1 00c8        268 	   stw         r21, C_R21_IT_CONTEXT_BACKUP_OFFSET    (r1) ; Store upper 32bits of r21
  00000228 00  12b5 aa2f        269 	   evmergelohi r21, r21, r21   ; Invert high and low orders 32bits of r21
  0000022c 00                   270 	   
  0000022c 00  92c1 00d4        271 	   stw         r22, C_R22_IT_CONTEXT_BACKUP_OFFSET_LOW(r1) ; Store lower 32bits of r22
  00000230 00  12d6 b22f        272 	   evmergelohi r22, r22, r22   ; Invert high and low orders 32bits of r22
  00000234 00  92c1 00d0        273 	   stw         r22, C_R22_IT_CONTEXT_BACKUP_OFFSET    (r1) ; Store upper 32bits of r22
  00000238 00  12d6 b22f        274 	   evmergelohi r22, r22, r22   ; Invert high and low orders 32bits of r22
  0000023c 00                   275 	   
  0000023c 00  92e1 00dc        276 	   stw         r23, C_R23_IT_CONTEXT_BACKUP_OFFSET_LOW(r1) ; Store lower 32bits of r23
                               File: BOOT_Manag Errors    0
  Location Pl  Code            Line 	Source Statement
  00000240 00  12f7 ba2f        277 	   evmergelohi r23, r23, r23   ; Invert high and low orders 32bits of r23
  00000244 00  92e1 00d8        278 	   stw         r23, C_R23_IT_CONTEXT_BACKUP_OFFSET    (r1) ; Store upper 32bits of r23
  00000248 00  12f7 ba2f        279 	   evmergelohi r23, r23, r23   ; Invert high and low orders 32bits of r23
  0000024c 00                   280 	   
  0000024c 00  9301 00e4        281 	   stw         r24, C_R24_IT_CONTEXT_BACKUP_OFFSET_LOW(r1) ; Store lower 32bits of r24
  00000250 00  1318 c22f        282 	   evmergelohi r24, r24, r24   ; Invert high and low orders 32bits of r24
  00000254 00  9301 00e0        283 	   stw         r24, C_R24_IT_CONTEXT_BACKUP_OFFSET    (r1) ; Store upper 32bits of r24
  00000258 00  1318 c22f        284 	   evmergelohi r24, r24, r24   ; Invert high and low orders 32bits of r24
  0000025c 00                   285 	   
  0000025c 00  9321 00ec        286 	   stw         r25, C_R25_IT_CONTEXT_BACKUP_OFFSET_LOW(r1) ; Store lower 32bits of r25
  00000260 00  1339 ca2f        287 	   evmergelohi r25, r25, r25   ; Invert high and low orders 32bits of r25
  00000264 00  9321 00e8        288 	   stw         r25, C_R25_IT_CONTEXT_BACKUP_OFFSET    (r1) ; Store upper 32bits of r25
  00000268 00  1339 ca2f        289 	   evmergelohi r25, r25, r25   ; Invert high and low orders 32bits of r25
  0000026c 00                   290 	   
  0000026c 00  9341 00f4        291 	   stw         r26, C_R26_IT_CONTEXT_BACKUP_OFFSET_LOW(r1) ; Store lower 32bits of r26
  00000270 00  135a d22f        292 	   evmergelohi r26, r26, r26   ; Invert high and low orders 32bits of r26
  00000274 00  9341 00f0        293 	   stw         r26, C_R26_IT_CONTEXT_BACKUP_OFFSET    (r1) ; Store upper 32bits of r26
  00000278 00  135a d22f        294 	   evmergelohi r26, r26, r26   ; Invert high and low orders 32bits of r26
  0000027c 00                   295 	   
  0000027c 00  9361 00fc        296 	   stw         r27, C_R27_IT_CONTEXT_BACKUP_OFFSET_LOW(r1) ; Store lower 32bits of r27
  00000280 00  137b da2f        297 	   evmergelohi r27, r27, r27   ; Invert high and low orders 32bits of r27
  00000284 00  9361 00f8        298 	   stw         r27, C_R27_IT_CONTEXT_BACKUP_OFFSET    (r1) ; Store upper 32bits of r27
  00000288 00  137b da2f        299 	   evmergelohi r27, r27, r27   ; Invert high and low orders 32bits of r27
  0000028c 00                   300 	   
  0000028c 00  9381 0104        301 	   stw         r28, C_R28_IT_CONTEXT_BACKUP_OFFSET_LOW(r1) ; Store lower 32bits of r28
  00000290 00  139c e22f        302 	   evmergelohi r28, r28, r28   ; Invert high and low orders 32bits of r28
  00000294 00  9381 0100        303 	   stw         r28, C_R28_IT_CONTEXT_BACKUP_OFFSET    (r1) ; Store upper 32bits of r28
  00000298 00  139c e22f        304 	   evmergelohi r28, r28, r28   ; Invert high and low orders 32bits of r28
  0000029c 00                   305 	   
  0000029c 00  93a1 010c        306 	   stw         r29, C_R29_IT_CONTEXT_BACKUP_OFFSET_LOW(r1) ; Store lower 32bits of r29
  000002a0 00  13bd ea2f        307 	   evmergelohi r29, r29, r29   ; Invert high and low orders 32bits of r29
  000002a4 00  93a1 0108        308 	   stw         r29, C_R29_IT_CONTEXT_BACKUP_OFFSET    (r1) ; Store upper 32bits of r29
  000002a8 00  13bd ea2f        309 	   evmergelohi r29, r29, r29   ; Invert high and low orders 32bits of r29
  000002ac 00                   310 	   
  000002ac 00  93c1 0114        311 	   stw         r30, C_R30_IT_CONTEXT_BACKUP_OFFSET_LOW(r1) ; Store lower 32bits of r30
  000002b0 00  13de f22f        312 	   evmergelohi r30, r30, r30   ; Invert high and low orders 32bits of r30
  000002b4 00  93c1 0110        313 	   stw         r30, C_R30_IT_CONTEXT_BACKUP_OFFSET    (r1) ; Store upper 32bits of r30
  000002b8 00  13de f22f        314 	   evmergelohi r30, r30, r30   ; Invert high and low orders 32bits of r30
  000002bc 00                   315 	   
  000002bc 00  93e1 011c        316 	   stw         r31, C_R31_IT_CONTEXT_BACKUP_OFFSET_LOW(r1) ; Store lower 32bits of r31
  000002c0 00  13ff fa2f        317 	   evmergelohi r31, r31, r31   ; Invert high and low orders 32bits of r31
  000002c4 00  93e1 0118        318 	   stw         r31, C_R31_IT_CONTEXT_BACKUP_OFFSET    (r1) ; Store upper 32bits of r31
  000002c8 00  13ff fa2f        319 	   evmergelohi r31, r31, r31   ; Invert high and low orders 32bits of r31
  000002cc 00                   320 	   
  000002cc 00  7c71 43a6        321 	   mtsprg1     r3
  000002d0 00                   322 	   ; Save CR register
  000002d0 00  7c60 0026        323 	   mfcr        r3
  000002d4 00  9061 0000        324 	   stw         r3,C_CR_IT_CONTEXT_BACKUP_OFFSET(r1)
  000002d8 00                   325 	   
  000002d8 00                   326 	   ; Save XER register
  000002d8 00  7c61 02a6        327 	   mfxer       r3
  000002dc 00  9061 0004        328 	   stw         r3,C_XER_IT_CONTEXT_BACKUP_OFFSET(r1)
  000002e0 00                   329 	   
  000002e0 00                   330 	   ; Save CTR register
  000002e0 00  7c69 02a6        331 	   mfctr       r3
  000002e4 00  9061 000c        332 	   stw         r3,C_CTR_IT_CONTEXT_BACKUP_OFFSET(r1)
  000002e8 00                   333 	   
                               File: BOOT_Manag Errors    0
  Location Pl  Code            Line 	Source Statement
  000002e8 00                   334 	   ; Save SRR0 register (used to restart the process at the same place)
  000002e8 00  7c7a 02a6        335 	   mfsrr0      r3
  000002ec 00  9061 0010        336 	   stw         r3,C_SRR0_IT_CONTEXT_BACKUP_OFFSET(r1)
  000002f0 00                   337 	   
  000002f0 00                   338 	   ; Save SRR1 register (used to restore MSR register on rfi instruction)
  000002f0 00  7c7b 02a6        339 	   mfsrr1      r3
  000002f4 00  9061 0014        340 	   stw         r3,C_SRR1_IT_CONTEXT_BACKUP_OFFSET(r1)
  000002f8 00                   341 	   
  000002f8 00                   342 	   ; Save SPEFSCR
  000002f8 00  7c60 82a6        343 	   mfspr       r3,REG_SPEFSCR
  000002fc 00  9061 0120        344 	   stw         r3,C_SPEFSCR_IT_CONTEXT_BACKUP_OFFSET(r1)
  00000300 00  7c71 42a6        345 	   mfsprg1     r3
  00000304 00  4e80 0020        346 	   blr
  00000308 00                   347 	
  00000308 00                   348 	; Restore
  00000308 00                   349 	RestoreContext:
  00000308 00                   350 	   
  00000308 00                   351 	   
  00000308 00                   352 	   ; Restore CR register
  00000308 00  8061 0000        353 	   lwz         r3,C_CR_IT_CONTEXT_BACKUP_OFFSET(r1)
  0000030c 00  7c6f f120        354 	   mtcr        r3
  00000310 00                   355 	   
  00000310 00                   356 	   ; Restore XER register
  00000310 00  8061 0004        357 	   lwz         r3,C_XER_IT_CONTEXT_BACKUP_OFFSET(r1)
  00000314 00  7c61 03a6        358 	   mtxer       r3
  00000318 00                   359 	   
  00000318 00                   360 	   ; Restore CTR register
  00000318 00  8061 000c        361 	   lwz         r3,C_CTR_IT_CONTEXT_BACKUP_OFFSET(r1)
  0000031c 00  7c69 03a6        362 	   mtctr       r3
  00000320 00                   363 	   
  00000320 00                   364 	   ; Restore SSR0 register (restart address)
  00000320 00  8061 0010        365 	   lwz         r3,C_SRR0_IT_CONTEXT_BACKUP_OFFSET(r1)
  00000324 00  7c7a 03a6        366 	   mtsrr0      r3
  00000328 00                   367 	   
  00000328 00                   368 	   ; Restore SSR1 register (MSR value)
  00000328 00  8061 0014        369 	   lwz         r3,C_SRR1_IT_CONTEXT_BACKUP_OFFSET(r1)
  0000032c 00  7c7b 03a6        370 	   mtsrr1      r3
  00000330 00                   371 	   
  00000330 00                   372 	   ; Restore GPRs (except R4 and R3)
  00000330 00  1001 2303        373 	   evldw       r0, C_R0_IT_CONTEXT_BACKUP_OFFSET (r1)
  00000334 00                   374 	   ; evldw       r1, C_R1_IT_CONTEXT_BACKUP_OFFSET (r1)
  00000334 00  1041 3303        375 	   evldw       r2, C_R2_IT_CONTEXT_BACKUP_OFFSET (r1)
  00000338 00  10a1 4b03        376 	   evldw       r5, C_R5_IT_CONTEXT_BACKUP_OFFSET (r1)
  0000033c 00  10c1 5303        377 	   evldw       r6, C_R6_IT_CONTEXT_BACKUP_OFFSET (r1)
  00000340 00  10e1 5b03        378 	   evldw       r7, C_R7_IT_CONTEXT_BACKUP_OFFSET (r1)
  00000344 00  1101 6303        379 	   evldw       r8, C_R8_IT_CONTEXT_BACKUP_OFFSET (r1)
  00000348 00  1121 6b03        380 	   evldw       r9, C_R9_IT_CONTEXT_BACKUP_OFFSET (r1)
  0000034c 00  1141 7303        381 	   evldw       r10,C_R10_IT_CONTEXT_BACKUP_OFFSET(r1)
  00000350 00  1161 7b03        382 	   evldw       r11,C_R11_IT_CONTEXT_BACKUP_OFFSET(r1)
  00000354 00  1181 8303        383 	   evldw       r12,C_R12_IT_CONTEXT_BACKUP_OFFSET(r1)
  00000358 00  11a1 8b03        384 	   evldw       r13,C_R13_IT_CONTEXT_BACKUP_OFFSET(r1)
  0000035c 00  11c1 9303        385 	   evldw       r14,C_R14_IT_CONTEXT_BACKUP_OFFSET(r1)
  00000360 00  11e1 9b03        386 	   evldw       r15,C_R15_IT_CONTEXT_BACKUP_OFFSET(r1)
  00000364 00  1201 a303        387 	   evldw       r16,C_R16_IT_CONTEXT_BACKUP_OFFSET(r1)
  00000368 00  1221 ab03        388 	   evldw       r17,C_R17_IT_CONTEXT_BACKUP_OFFSET(r1)
  0000036c 00  1241 b303        389 	   evldw       r18,C_R18_IT_CONTEXT_BACKUP_OFFSET(r1)
  00000370 00  1261 bb03        390 	   evldw       r19,C_R19_IT_CONTEXT_BACKUP_OFFSET(r1)
                               File: BOOT_Manag Errors    0
  Location Pl  Code            Line 	Source Statement
  00000374 00  1281 c303        391 	   evldw       r20,C_R20_IT_CONTEXT_BACKUP_OFFSET(r1)
  00000378 00  12a1 cb03        392 	   evldw       r21,C_R21_IT_CONTEXT_BACKUP_OFFSET(r1)
  0000037c 00  12c1 d303        393 	   evldw       r22,C_R22_IT_CONTEXT_BACKUP_OFFSET(r1)
  00000380 00  12e1 db03        394 	   evldw       r23,C_R23_IT_CONTEXT_BACKUP_OFFSET(r1)
  00000384 00  1301 e303        395 	   evldw       r24,C_R24_IT_CONTEXT_BACKUP_OFFSET(r1)
  00000388 00  1321 eb03        396 	   evldw       r25,C_R25_IT_CONTEXT_BACKUP_OFFSET(r1)
  0000038c 00  1341 f303        397 	   evldw       r26,C_R26_IT_CONTEXT_BACKUP_OFFSET(r1)
  00000390 00  1361 fb03        398 	   evldw       r27,C_R27_IT_CONTEXT_BACKUP_OFFSET(r1)
  00000394 00                   399 	   ; Add offset in R3 because evldw intruction offset must be < 256
  00000394 00  3861 0100        400 	   addi        r3,r1,0x0100
  00000398 00  1383 0303        401 	   evldw       r28,(C_R28_IT_CONTEXT_BACKUP_OFFSET - 0x0100)(r3)
  0000039c 00  13a3 0b03        402 	   evldw       r29,(C_R29_IT_CONTEXT_BACKUP_OFFSET - 0x0100)(r3)
  000003a0 00  13c3 1303        403 	   evldw       r30,(C_R30_IT_CONTEXT_BACKUP_OFFSET - 0x0100)(r3)
  000003a4 00  13e3 1b03        404 	   evldw       r31,(C_R31_IT_CONTEXT_BACKUP_OFFSET - 0x0100)(r3)
  000003a8 00                   405 	   
  000003a8 00                   406 	   ; Restore SPEFSCR
  000003a8 00  8083 0020        407 	   lwz         r4,(C_SPEFSCR_IT_CONTEXT_BACKUP_OFFSET - 0x0100)(r3)
  000003ac 00  7c80 83a6        408 	   mtspr       REG_SPEFSCR, r4
  000003b0 00  4c00 012c        409 	   isync
  000003b4 00                   410 	   
  000003b4 00                   411 	   ; Restore R4
  000003b4 00  1081 4303        412 	   evldw       r4,C_R4_IT_CONTEXT_BACKUP_OFFSET(r1)
  000003b8 00                   413 	   ; Restore R3
  000003b8 00  1061 3b03        414 	   evldw       r3,C_R3_IT_CONTEXT_BACKUP_OFFSET(r1)
  000003bc 00                   415 	   
  000003bc 00  3821 0200        416 	   addi r1, r1, C_IT_CONTEXT_BACKUP_SIZE
  000003c0 00                   417 	   
  000003c0 00  4e80 0020        418 	   blr
  000003c4 00                   419 	
  000003c4 00                   420 	CriticalInputInterruptHandler:
  000003c4 00  4800 0000        421 	   b BOOT_FailMode
  000003c8 00                   422 	
  000003c8 00                   423 	MachineCheckInterruptHandler:
  000003c8 00  4800 0000        424 	   b BOOT_FailMode
  000003cc 00                   425 	
  000003cc 00                   426 	InstructionStorageInterruptHandler:
  000003cc 00  4800 0000        427 	   b BOOT_FailMode
  000003d0 00                   428 	
  000003d0 00                   429 	AlignementInterruptHandler:
  000003d0 00  4800 0000        430 	   b BOOT_FailMode
  000003d4 00                   431 	
  000003d4 00                   432 	ProgramInterruptHandler:
  000003d4 00  4800 0000        433 	   b BOOT_FailMode
  000003d8 00                   434 	
  000003d8 00                   435 	SystemCallInterruptHandler:
  000003d8 00  4800 0000        436 	   b BOOT_FailMode
  000003dc 00                   437 	
  000003dc 00                   438 	FPU_UnavailableInterruptHandler:
  000003dc 00  4800 0000        439 	   b BOOT_FailMode
  000003e0 00                   440 	
  000003e0 00                   441 	FixedIntervalTimerInterruptHandler:
  000003e0 00  4800 0000        442 	   b BOOT_FailMode
  000003e4 00                   443 	
  000003e4 00                   444 	InstructionTLB_InterruptHandler:
  000003e4 00  4800 0000        445 	   b BOOT_FailMode
  000003e8 00                   446 	
  000003e8 00                   447 	DebugInterruptHandler:
                               File: BOOT_Manag Errors    0
  Location Pl  Code            Line 	Source Statement
  000003e8 00  4800 0000        448 	   b BOOT_FailMode
  000003ec 00                   449 	
  000003ec 00                   450 	SPE_APU_UnavailableInterruptHandler:
  000003ec 00  4800 0000        451 	   b BOOT_FailMode
  000003f0 00                   452 	
  000003f0 00                   453 	EFP_RoundExceptionInterruptHandler:
  000003f0 00  4800 0000        454 	   b BOOT_FailMode
  000003f4 00                   455 	
  000003f4 00                   456 	PerformanceMonitorInterruptHandler:
  000003f4 00  4800 0000        457 	   b BOOT_FailMode
  000003f8 00                   458 	
  000003f8 00                   459 	
