                               File: BOOT_TestA Errors    0
  Location Pl  Code            Line 	Source Statement
  00000000 00                     1 	   .file "BOOT_TestAndConfigureAdditionalHW_Assembly.s"
  00000000 00                     2 	   .include "BOOT_Registers.inc"
  00000000 00                     1I	; Special purpose registers
  00000000 00                     2I	.set    REG_SPRG0   ,272
  00000000 00                     3I	.set    REG_SPRG1   ,273
  00000000 00                     4I	.set    REG_SPRG2   ,274
  00000000 00                     5I	.set    REG_SPRG3   ,275
  00000000 00                     6I	.set    REG_SPRG4   ,276
  00000000 00                     7I	.set    REG_SPRG5   ,277
  00000000 00                     8I	.set    REG_SPRG6   ,278
  00000000 00                     9I	.set    REG_SPRG7   ,279
  00000000 00                    10I	
  00000000 00                    11I	; Save and restore registers
  00000000 00                    12I	.set    REG_SRR0    ,26
  00000000 00                    13I	.set    REG_SRR1    ,27
  00000000 00                    14I	
  00000000 00                    15I	; Interrupt vector registers
  00000000 00                    16I	.set    REG_IVPR    ,63
  00000000 00                    17I	.set    REG_IVOR0   ,400
  00000000 00                    18I	.set    REG_IVOR1   ,401
  00000000 00                    19I	.set    REG_IVOR2   ,402
  00000000 00                    20I	.set    REG_IVOR3   ,403
  00000000 00                    21I	.set    REG_IVOR4   ,404
  00000000 00                    22I	.set    REG_IVOR5   ,405
  00000000 00                    23I	.set    REG_IVOR6   ,406
  00000000 00                    24I	.set    REG_IVOR7   ,407
  00000000 00                    25I	.set    REG_IVOR8   ,408
  00000000 00                    26I	.set    REG_IVOR9   ,409
  00000000 00                    27I	.set    REG_IVOR10  ,410
  00000000 00                    28I	.set    REG_IVOR11  ,411
  00000000 00                    29I	.set    REG_IVOR12  ,412
  00000000 00                    30I	.set    REG_IVOR13  ,413
  00000000 00                    31I	.set    REG_IVOR14  ,414
  00000000 00                    32I	.set    REG_IVOR15  ,415
  00000000 00                    33I	.set    REG_IVOR32  ,528
  00000000 00                    34I	.set    REG_IVOR33  ,529
  00000000 00                    35I	.set    REG_IVOR34  ,530
  00000000 00                    36I	.set    REG_IVOR35  ,531
  00000000 00                    37I	
  00000000 00                    38I	; Hardware Implementation Dependent registers
  00000000 00                    39I	.set    REG_HID0    ,1008
  00000000 00                    40I	.set    REG_HID1    ,1009
  00000000 00                    41I	
  00000000 00                    42I	; HID0 Enable Machine Check bit mask
  00000000 00                    43I	.set    C_SET_EMCP_BIT_MASK,    0x80000000
  00000000 00                    44I	
  00000000 00                    45I	; Branch Unit Control and Status Register
  00000000 00                    46I	.set    REG_BUCSR   ,1013
  00000000 00                    47I	
  00000000 00                    48I	; Time base registers
  00000000 00                    49I	.set    REG_TBL         ,284        # Timer Base Lower bits
  00000000 00                    50I	.set    REG_TBU         ,285        # Timer Base Upper bits
  00000000 00                    51I	.set    REG_TSR         ,336        # Timer Status Register
  00000000 00                    52I	.set    REG_TSR_DIS_DIT ,0x08000000 # Decrementer Interrupt Status bit of TSR register
  00000000 00                    53I	.set    REG_TCR         ,340        # Timer Control Register
  00000000 00                    54I	.set    REG_DEC         ,22         # Decrementer Register
  00000000 00                    55I	.set    REG_DECAR       ,54         # Decrementer Auto-Reload Register
                               File: BOOT_TestA Errors    0
  Location Pl  Code            Line 	Source Statement
  00000000 00                    56I	
  00000000 00                    57I	; Process ID register
  00000000 00                    58I	.set    REG_PID0        ,48
  00000000 00                    59I	
  00000000 00                    60I	; MMU Assist registers
  00000000 00                    61I	.set    REG_MAS0        ,624
  00000000 00                    62I	.set    REG_MAS1        ,625
  00000000 00                    63I	.set    REG_MAS2        ,626
  00000000 00                    64I	.set    REG_MAS3        ,627
  00000000 00                    65I	.set    REG_MAS4        ,628
  00000000 00                    66I	.set    REG_MAS6        ,630
  00000000 00                    67I	.set    REG_MAS7        ,944
  00000000 00                    68I	
  00000000 00                    69I	; Cache registers
  00000000 00                    70I	.set    REG_L1CSR0      ,1010   # L1 data Cache Control and Status Register
  00000000 00                    71I	.set    REG_L1CSR1      ,1011   # L1 instruction Cache Control and Status Register
  00000000 00                    72I	.set    REG_L1FINV      ,1016   # L1 Cache FLush and Invalidate Register
  00000000 00                    73I	
  00000000 00                    74I	; MMU Control register
  00000000 00                    75I	.set    REG_MMUCSR0     ,1012
  00000000 00                    76I	
  00000000 00                    77I	; SPE APU Status and Control Register
  00000000 00                    78I	.set    REG_SPEFSCR     ,512
  00000000 00                    79I	
  00000000 00                    80I	.set    C_REG_TESCR1_ADDRESS,   0xFF010040
  00000000 00                    81I	
  00000000 00                    82I	; MSR bit masks
  00000000 00                    83I	.set    C_SET_SPE_BIT_MASK,     0x0200
  00000000 00                    84I	.set    C_CLEAR_SPE_BIT_MASK_S, 7
  00000000 00                    85I	.set    C_CLEAR_SPE_BIT_MASK_E, 5
  00000000 00                    86I	
  00000000 00                    87I	; MMUCSR0 bit masks
  00000000 00                    88I	.set    C_SET_FI_BIT_MASK,          0x0006
  00000000 00                    89I	
  00000000 00                    90I	; HID0 Data Cache Flush Assist bit masks
  00000000 00                    91I	.set    C_SET_DCFA_BIT_MASK,        0x00000040
  00000000 00                    92I	.set    C_CLEAR_DCFA_BIT_MASK_S,    26
  00000000 00                    93I	.set    C_CLEAR_DCFA_BIT_MASK_E,    24
  00000000 00                    94I	
  00000000 00                    95I	; L1CSR0 bit masks
  00000000 00                    96I	.set    C_SET_CE_BIT_MASK,      0x00000001
  00000000 00                    97I	.set    C_SET_CPE_BIT_MASK,     0x00010000
  00000000 00                    98I	.set    C_SET_CINV_BIT_MASK,    0x0002
  00000000 00                    99I	.set    C_CINV_BIT_NBR,         30
  00000000 00                   100I	.set    C_SET_CABT_BIT_MASK,    0x0004
  00000000 00                   101I	.set    C_CABT_BIT_NBR,         29
  00000000 00                   102I	
  00000000 00                   103I	; BUCSR values
  00000000 00                   104I	.set    C_REG_BUCSR_BPEN,   0x00000001  # Enable branch target buffer
  00000000 00                   105I	.set    C_REG_BUCSR_BBFI,   0x00000200  # Invalidate branch target buffer
  00000000 00                   106I	
  00000000 00                   107I	; L2 Cache ConTroL register
  00000000 00                   108I	.set    C_REG_L2CTR_offset, 0x00020000
  00000000 00                   109I	.set    C_SET_L2E_BIT_MASK, 0x8000
  00000000 00                   110I	.set    C_SET_L2I_BIT_MASK, 0x4000
  00000000 00                   111I	
  00000000 00                   112I	#/* _END_CONSTANT ==========================================================================
                               File: BOOT_TestA Errors    0
  Location Pl  Code            Line 	Source Statement
  00000000 00                       	========================== */
  00000000 00                   113I	
  00000000 00                   114I	#/* _BEGIN_MACRO ================================================ MACROS ===================
  00000000 00                       	========================== */
  00000000 00                   115I	
  00000000 00                   116I	#/*=========================================================================================
  00000000 00                       	========================== */
  00000000 00                   117I	#/*                                                        MSR                              
  00000000 00                       	                           */
  00000000 00                   118I	#/*=========================================================================================
  00000000 00                       	========================== */
  00000000 00                   119I	
  00000000 00                   120I	#/* BEGIN FUNCTION HEADER-------------------------------------------------------------------
  00000000 00                       	-------------------------- */
  00000000 00                   121I	#/* <<LLR:  >>  SDD_DMS_LLR_REQ_0000022                                                     
  00000000 00                       	                           */
  00000000 00                   122I	#/*                                                                                         
  00000000 00                       	                           */
  00000000 00                   123I	#/* <<FUNCTION:  >>  REG_MSR_WRITE                                                          
  00000000 00                       	                           */
  00000000 00                   124I	#/*                                                                                         
  00000000 00                       	                           */
  00000000 00                   125I	#/* <<DESCRIPTION:  >>  This function writes a new MSR value. The MSR register is writeable 
  00000000 00                       	only in supervisor mode. I */
  00000000 00                   126I	#/* t is a macro function in assembly language.                                             
  00000000 00                       	                           */
  00000000 00                   127I	#/*                                                                                         
  00000000 00                       	                           */
  00000000 00                   128I	#/* END FUNCTION HEADER---------------------------------------------------------------------
  00000000 00                       	-------------------------- */
  00000000 00                   129I	REG_MSR_WRITE: .macro v_reg1
                                130I	   sync
                                131I	   mtmsr    v_reg1
                                132I	   sync
                                133I	   isync
                                134I	   .endm
  00000000 00                   135I	
  00000000 00                   136I	#/*End of REG_MSR_WRITE*/
  00000000 00                   137I	
  00000000 00                   138I	#/* BEGIN FUNCTION HEADER-------------------------------------------------------------------
  00000000 00                       	-------------------------- */
  00000000 00                   139I	#/* <<LLR:  >>  SDD_DMS_LLR_REQ_0000156                                                     
  00000000 00                       	                           */
  00000000 00                   140I	#/*                                                                                         
  00000000 00                       	                           */
  00000000 00                   141I	#/* <<FUNCTION:  >>  REG_MSR_CLEAR_SPE                                                      
  00000000 00                       	                           */
  00000000 00                   142I	#/*                                                                                         
  00000000 00                       	                           */
  00000000 00                   143I	#/* <<DESCRIPTION:  >>  This function clears SPE bit in MSR to forbid floating point operati
  00000000 00                       	on (for POST purpose). It  */
  00000000 00                   144I	#/* is a macro function in assembly language.                                               
  00000000 00                       	                           */
  00000000 00                   145I	#/*                                                                                         
  00000000 00                       	                           */
  00000000 00                   146I	#/* END FUNCTION HEADER---------------------------------------------------------------------
  00000000 00                       	-------------------------- */
                               File: BOOT_TestA Errors    0
  Location Pl  Code            Line 	Source Statement
  00000000 00                   147I	REG_MSR_CLEAR_SPE: .macro v_reg1
                                148I	   #/** Gets MSR */
                                149I	   mfmsr    v_reg1
                                150I	
                                151I	   #/** Clears FP bit */
                                152I	   rlwinm   v_reg1,v_reg1,0,C_CLEAR_SPE_BIT_MASK_S,C_CLEAR_SPE_BIT_MASK_E
                                153I	
                                154I	   #/** Updates MSR */
                                155I	   sync
                                156I	   mtmsr    v_reg1
                                157I	   sync
                                158I	   isync
                                159I	
                                160I	   .endm
  00000000 00                   161I	#/*End of REG_MSR_CLEAR_SPE*/
  00000000 00                   162I	
  00000000 00                   163I	#/* BEGIN FUNCTION HEADER-------------------------------------------------------------------
  00000000 00                       	-------------------------- */
  00000000 00                   164I	#/* <<LLR:  >>  SDD_DMS_LLR_REQ_0000157                                                     
  00000000 00                       	                           */
  00000000 00                   165I	#/*                                                                                         
  00000000 00                       	                           */
  00000000 00                   166I	#/* <<FUNCTION:  >>  REG_MSR_SET_SPE                                                        
  00000000 00                       	                           */
  00000000 00                   167I	#/*                                                                                         
  00000000 00                       	                           */
  00000000 00                   168I	#/* <<DESCRIPTION:  >>  This function sets SPE bit in MSR to enable floating point operation
  00000000 00                       	. It is a macro function in*/
  00000000 00                   169I	#/*  assembly language.                                                                     
  00000000 00                       	                           */
  00000000 00                   170I	#/*                                                                                         
  00000000 00                       	                           */
  00000000 00                   171I	#/* END FUNCTION HEADER---------------------------------------------------------------------
  00000000 00                       	-------------------------- */
  00000000 00                   172I	REG_MSR_SET_SPE: .macro v_reg1
                                173I	   #/** Gets MSR */
                                174I	   mfmsr    v_reg1
                                175I	
                                176I	   #/** Sets FP bit */
                                177I	   oris     v_reg1, v_reg1, C_SET_SPE_BIT_MASK
                                178I	
                                179I	   #/** Updates MSR */
                                180I	   sync
                                181I	   mtmsr    v_reg1
                                182I	   sync
                                183I	   isync
                                184I	
                                185I	   .endm
  00000000 00                   186I	#/*End of REG_MSR_SET_SPE*/
  00000000 00                   187I	
  00000000 00                   188I	
  00000000 00                   189I	#/*=========================================================================================
  00000000 00                       	========================== */
  00000000 00                   190I	#/*                                                     HIDx                                
  00000000 00                       	                           */
  00000000 00                   191I	#/*=========================================================================================
  00000000 00                       	========================== */
                               File: BOOT_TestA Errors    0
  Location Pl  Code            Line 	Source Statement
  00000000 00                   192I	
  00000000 00                   193I	#/* BEGIN FUNCTION HEADER-------------------------------------------------------------------
  00000000 00                       	-------------------------- */
  00000000 00                   194I	#/* <<LLR:  >>  SDD_DMS_LLR_REQ_0000056                                                     
  00000000 00                       	                           */
  00000000 00                   195I	#/*                                                                                         
  00000000 00                       	                           */
  00000000 00                   196I	#/* <<FUNCTION:  >>  REG_HID0_EMCP_SET                                                      
  00000000 00                       	                           */
  00000000 00                   197I	#/*                                                                                         
  00000000 00                       	                           */
  00000000 00                   198I	#/* <<DESCRIPTION:  >>  This function enables machine check interrupt by setting EMCP bit in
  00000000 00                       	 HID0 register to '1'. HID */
  00000000 00                   199I	#/* 0 register is writeable only in supervisor mode. It is a macro function in assembly lang
  00000000 00                       	uage.                      */
  00000000 00                   200I	#/*                                                                                         
  00000000 00                       	                           */
  00000000 00                   201I	#/* END FUNCTION HEADER---------------------------------------------------------------------
  00000000 00                       	-------------------------- */
  00000000 00                   202I	REG_HID0_EMCP_SET: .macro v_reg1,v_reg2
                                203I	   lis      v_reg1,         C_SET_EMCP_BIT_MASK@ha
                                204I	   addi     v_reg1, v_reg1, C_SET_EMCP_BIT_MASK@l
                                205I	
                                206I	   #/* Gets the content of the HID0 register */
                                207I	   mfspr    v_reg2, REG_HID0
                                208I	
                                209I	   #/* Enables the entry into a machine check exception */
                                210I	   #/* based on assertion of the MCP input */
                                211I	   or       v_reg2, v_reg2, v_reg1
                                212I	
                                213I	   #/* Sets the new content in the HID0 register */
                                214I	   mtspr    REG_HID0, v_reg2
                                215I	   isync
                                216I	   .endm
  00000000 00                   217I	#/*End of REG_HID0_EMCP_SET*/
  00000000 00                   218I	
  00000000 00                   219I	REG_HID0_DCFA_SET: .macro v_reg1,v_reg2
                                220I	   lis      v_reg1,         C_SET_DCFA_BIT_MASK@ha
                                221I	   addi     v_reg1, v_reg1, C_SET_DCFA_BIT_MASK@l
                                222I	
                                223I	   #/* Gets the content of the HID0 register */
                                224I	   mfspr    v_reg2, REG_HID0
                                225I	
                                226I	   #/* Enables the entry into a machine check exception */
                                227I	   #/* based on assertion of the MCP input */
                                228I	   or       v_reg2, v_reg2, v_reg1
                                229I	
                                230I	   #/* Sets the new content in the HID0 register */
                                231I	   mtspr    REG_HID0, v_reg2
                                232I	   isync
                                233I	   .endm
  00000000 00                   234I	#/*End of REG_HID0_DCFA_SET*/
  00000000 00                   235I	
  00000000 00                   236I	REG_HID0_DCFA_CLEAR: .macro v_reg1
                                237I	   #/* Gets the content of the HID0 register */
                                238I	   mfspr    v_reg1, REG_HID0
                                239I	
                               File: BOOT_TestA Errors    0
  Location Pl  Code            Line 	Source Statement
                                240I	   #/** Clears FP bit */
                                241I	   rlwinm   v_reg1,v_reg1,0,C_CLEAR_DCFA_BIT_MASK_S,C_CLEAR_DCFA_BIT_MASK_E
                                242I	
                                243I	   #/* Sets the new content in the HID0 register */
                                244I	   mtspr    REG_HID0, v_reg1
                                245I	   isync
                                246I	   .endm
  00000000 00                   247I	#/*End of REG_MSR_CLEAR_SPE*/
  00000000 00                   248I	
  00000000 00                   249I	#/*=========================================================================================
  00000000 00                       	========================== */
  00000000 00                   250I	#/*                                                    CACHE                                
  00000000 00                       	                           */
  00000000 00                   251I	#/*=========================================================================================
  00000000 00                       	========================== */
  00000000 00                   252I	
  00000000 00                   253I	#/* Set CINV bit in L1CSR0 register to invalidate cache and wait for end of invalidation */
  00000000 00                   254I	REG_L1CSR0_CINV: .macro v_reg
                                255I	CINV_start\@:
                                256I	   #/* Get L1CSR0 register value */
                                257I	   mfspr    v_reg, REG_L1CSR0                      # v_reg := REG_L1CSR0
                                258I	
                                259I	   #/* Set CINV bit */
                                260I	   ori      v_reg, v_reg, C_SET_CINV_BIT_MASK      # v_reg := v_reg | C_SET_CINV_BIT_MASK
                                261I	
                                262I	   #/* Update L1CSR0 register value */
                                263I	   msync                                           # Mandatory sync instruction (see E200Z6_
                                    	RM 2.13.1)
                                264I	   isync
                                265I	   mtspr    REG_L1CSR0, v_reg                      # REG_L1CSR0 := v_reg
                                266I	
                                267I	   #/* Wait for end of cache invalidation (CINV bit to 0) */
                                268I	CINV_loop\@:
                                269I	   #/* Read L1CSR0 register value */
                                270I	   mfspr    v_reg, REG_L1CSR0                      # v_reg := REG_L1CSR0
                                271I	
                                272I	   #/* Clear all bits but CINV */
                                273I	   rlwinm   v_reg, v_reg, 0, C_CINV_BIT_NBR, C_CINV_BIT_NBR # v_reg := v_reg & C_SET_CINV_BI
                                    	T_MASK
                                274I	
                                275I	   #/* If CINV bit is still set then loop */
                                276I	   cmpwi    0, v_reg, C_SET_CINV_BIT_MASK
                                277I	   beq      CINV_loop\@
                                278I	
                                279I	
                                280I	   #/* Check that cache invalidation completed successfully */
                                281I	   #/* Read L1CSR0 register value */
                                282I	   mfspr    v_reg, REG_L1CSR0                      # v_reg := REG_L1CSR0
                                283I	
                                284I	   #/* Clear all bits but CABT */
                                285I	   rlwinm   v_reg, v_reg, 0, C_CABT_BIT_NBR, C_CABT_BIT_NBR # v_reg := v_reg & C_SET_CABT_BI
                                    	T_MASK
                                286I	
                                287I	   #/* If CABT bit is still set then retry cache invalidation */
                                288I	   cmpwi    0, v_reg, C_SET_CABT_BIT_MASK
                                289I	   beq      CINV_start\@
                                290I	
                               File: BOOT_TestA Errors    0
  Location Pl  Code            Line 	Source Statement
                                291I	   .endm
  00000000 00                   292I	
  00000000 00                   293I	# Set CE and CPE bits in L1CSR0 register to enable L1 data cache and parity
  00000000 00                   294I	REG_L1CSR0_SET_CE_CPE: .macro v_reg
                                295I	
                                296I	   #/* Get L1CSR0 register value */
                                297I	   mfspr    v_reg, REG_L1CSR0                      # v_reg := REG_L1CSR0
                                298I	
                                299I	   #/* Set CE and CPE bits */
                                300I	   oris     v_reg, v_reg, C_SET_CPE_BIT_MASK@ha    # v_reg := v_reg | C_SET_CPE_BIT_MASK
                                301I	   ori      v_reg, v_reg, C_SET_CE_BIT_MASK@l      # v_reg := v_reg | C_SET_CE_BIT_MASK
                                302I	
                                303I	   #/* Update L1CSR0 register value */
                                304I	   msync                                           # Mandatory sync instruction (see E200Z6_
                                    	RM 2.13.1)
                                305I	   isync
                                306I	   mtspr    REG_L1CSR0, v_reg                      # REG_L1CSR0 := v_reg
                                307I	
                                308I	   .endm
  00000000 00                   309I	
  00000000 00                   310I	# Set CE and CPE bits in L1CSR1 register to enable L1 instruction cache and parity
  00000000 00                   311I	REG_L1CSR1_SET_CE_CPE: .macro v_reg
                                312I	
                                313I	   #/* Get L1CSR1 register value */
                                314I	   mfspr    v_reg, REG_L1CSR1                      # v_reg := REG_L1CSR1
                                315I	
                                316I	   #/* Set CE and CPE bits */
                                317I	   oris     v_reg, v_reg, C_SET_CPE_BIT_MASK@ha    # v_reg := v_reg | C_SET_CPE_BIT_MASK
                                318I	   ori      v_reg, v_reg, C_SET_CE_BIT_MASK@l      # v_reg := v_reg | C_SET_CE_BIT_MASK
                                319I	
                                320I	   #/* Update L1CSR1 register value */
                                321I	   msync                                           # Mandatory sync instruction (see E200Z6_
                                    	RM 2.13.1)
                                322I	   isync
                                323I	   mtspr    REG_L1CSR1, v_reg                      # REG_L1CSR1 := v_reg
                                324I	
                                325I	   .endm
  00000000 00                   326I	
  00000000 00                   327I	
  00000000 00                   328I	#/*=========================================================================================
  00000000 00                       	========================== */
  00000000 00                   329I	#/*                                                    MMU                                  
  00000000 00                       	                           */
  00000000 00                   330I	#/*=========================================================================================
  00000000 00                       	========================== */
  00000000 00                   331I	
  00000000 00                   332I	REG_MMUCSR0_FI_SET: .macro v_reg1
                                333I	   lis      v_reg1,         C_SET_FI_BIT_MASK@ha
                                334I	   addi     v_reg1, v_reg1, C_SET_FI_BIT_MASK@l
                                335I	
                                336I	   #/* Update CSR0 value */
                                337I	   sync
                                338I	   mtspr    REG_MMUCSR0, v_reg1
                                339I	   isync
                                340I	
                                341I	   .endm
  00000000 00                   342I	
                               File: BOOT_TestA Errors    0
  Location Pl  Code            Line 	Source Statement
  00000000 00                   343I	#/* BEGIN FUNCTION HEADER-------------------------------------------------------------------
  00000000 00                       	-------------------------- */
  00000000 00                   344I	#/* <<LLR:  >>  SDD_DMS_LLR_REQ_0000021                                                     
  00000000 00                       	                           */
  00000000 00                   345I	#/*                                                                                         
  00000000 00                       	                           */
  00000000 00                   346I	#/* <<FUNCTION:  >>  REG_DTLB_LOAD                                                          
  00000000 00                       	                           */
  00000000 00                   347I	#/*                                                                                         
  00000000 00                       	                           */
  00000000 00                   348I	#/* <<DESCRIPTION:  >>  This function loads a PTE into a DTLB register by using the "tlbld" 
  00000000 00                       	instruction that loads the */
  00000000 00                   349I	#/*  data TLB entry from DCMP and RPA registers value. The register in parameter contains th
  00000000 00                       	e value of the effective a */
  00000000 00                   350I	#/* ddress of the TLB entry. It is a macro function in assembly language.                   
  00000000 00                       	                           */
  00000000 00                   351I	#/*                                                                                         
  00000000 00                       	                           */
  00000000 00                   352I	#/* END FUNCTION HEADER---------------------------------------------------------------------
  00000000 00                       	-------------------------- */
  00000000 00                   353I	REG_TLB_LOAD: .macro
                                354I	   sync
                                355I	   tlbwe
                                356I	   isync
                                357I	
                                358I	   .endm
  00000000 00                   359I	#/*End of REG_DTLB_LOAD*/
  00000000 00                   360I	
  00000000 00                   361I	#/* _END_MACRO =============================================================================
  00000000 00                       	========================== */
  00000000 00                     3 	   .include "BOOT_VectorTable.inc"
  00000000 00                     1I	#/******************************************************************************************
  00000000 00                       	*****************************
  00000000 00                     2I	#*
  00000000 00                     3I	#*                                                Safran Electronics & Defense
  00000000 00                     4I	#*                                                     SAFRAN Group
  00000000 00                     5I	#*
  00000000 00                     6I	#* _BEGIN_FILE_HEADER ----------------------------------------------------------------------
  00000000 00                       	----------------------------
  00000000 00                     7I	#*
  00000000 00                     8I	#* File name  : RLB_RBI_VectorTable.P2020.inc
  00000000 00                     9I	#* CSC name   :
  00000000 00                    10I	#* 
  00000000 00                    11I	#* Description: Vector Table CSU header file.
  00000000 00                    12I	#*
  00000000 00                    13I	#* Configuration management identification:
  00000000 00                    14I	#*    %full_name:  sknNEXT#1/ascii/BOOT_VectorTable.inc/1 %
  00000000 00                    15I	#*    Creation  :
  00000000 00                    16I	#*
  00000000 00                    17I	#* _END_FILE_HEADER ------------------------------------------------------------------------
  00000000 00                       	----------------------------
  00000000 00                    18I	#*
  00000000 00                    19I	#* LANGUAGE: ASM - Header file
  00000000 00                    20I	#*
  00000000 00                    21I	#* -----------------------------------------------------------------------------------------
  00000000 00                       	----------------------------
  00000000 00                    22I	#* Copyright (c) 2017, SAFRAN E&D
                               File: BOOT_TestA Errors    0
  Location Pl  Code            Line 	Source Statement
  00000000 00                    23I	#* SAFRAN Electronics & Defense document. Reproduction and disclosure forbidden.
  00000000 00                    24I	#*******************************************************************************************
  00000000 00                       	***************************/
  00000000 00                    25I	
  00000000 00                    26I	#/* _BEGIN_STATIC_PROTO ==================================== FUNCTION PROTOTYPES ===========
  00000000 00                       	========================== */
  00000000 00                    27I	#/* _END_STATIC_PROTO ======================================================================
  00000000 00                       	========================== */
  00000000 00                    28I	
  00000000 00                    29I	   .extern  C_SRC_DLD_sram_s
  00000000 00                    30I	
  00000000 00                    31I	#/* _BEGIN_CONSTANT ============================================ CONSTANTS =================
  00000000 00                       	========================== */
  00000000 00                    32I	
  00000000 00                    33I	#/* Offset definition for Stack Context Storage organisation ( User Defined ) */
  00000000 00                    34I	   .set     C_CR_OFFSET           ,0
  00000000 00                    35I	   .set     C_XER_OFFSET          ,4
  00000000 00                    36I	   .set     C_LR_OFFSET           ,8
  00000000 00                    37I	   .set     C_CTR_OFFSET          ,12
  00000000 00                    38I	   .set     C_SRR0_OFFSET         ,16
  00000000 00                    39I	   .set     C_SRR1_OFFSET         ,20
  00000000 00                    40I	   .set     C_BSP_VECT_DEC_OFFSET ,24 #/* Also defined in BSP_export.h*/
  00000000 00                    41I	   
  00000000 00                    42I	   .set     C_R0_OFFSET           ,32
  00000000 00                    43I	   .set     C_R0_OFFSET_LOW       ,36
  00000000 00                    44I	   .set     C_R1_OFFSET           ,40
  00000000 00                    45I	   .set     C_R1_OFFSET_LOW       ,44
  00000000 00                    46I	   .set     C_R2_OFFSET           ,48
  00000000 00                    47I	   .set     C_R2_OFFSET_LOW       ,52
  00000000 00                    48I	   .set     C_R3_OFFSET           ,56
  00000000 00                    49I	   .set     C_R3_OFFSET_LOW       ,60
  00000000 00                    50I	   .set     C_R4_OFFSET           ,64
  00000000 00                    51I	   .set     C_R4_OFFSET_LOW       ,68
  00000000 00                    52I	   .set     C_R5_OFFSET           ,72
  00000000 00                    53I	   .set     C_R5_OFFSET_LOW       ,76
  00000000 00                    54I	   .set     C_R6_OFFSET           ,80
  00000000 00                    55I	   .set     C_R6_OFFSET_LOW       ,84
  00000000 00                    56I	   .set     C_R7_OFFSET           ,88
  00000000 00                    57I	   .set     C_R7_OFFSET_LOW       ,92
  00000000 00                    58I	   .set     C_R8_OFFSET           ,96
  00000000 00                    59I	   .set     C_R8_OFFSET_LOW       ,100
  00000000 00                    60I	   .set     C_R9_OFFSET           ,104
  00000000 00                    61I	   .set     C_R9_OFFSET_LOW       ,108
  00000000 00                    62I	   .set     C_R10_OFFSET          ,112
  00000000 00                    63I	   .set     C_R10_OFFSET_LOW      ,116
  00000000 00                    64I	   .set     C_R11_OFFSET          ,120
  00000000 00                    65I	   .set     C_R11_OFFSET_LOW      ,124
  00000000 00                    66I	   .set     C_R12_OFFSET          ,128
  00000000 00                    67I	   .set     C_R12_OFFSET_LOW      ,132
  00000000 00                    68I	   .set     C_R13_OFFSET          ,136
  00000000 00                    69I	   .set     C_R13_OFFSET_LOW      ,140
  00000000 00                    70I	   .set     C_R14_OFFSET          ,144
  00000000 00                    71I	   .set     C_R14_OFFSET_LOW      ,148
  00000000 00                    72I	   .set     C_R15_OFFSET          ,152
  00000000 00                    73I	   .set     C_R15_OFFSET_LOW      ,156
  00000000 00                    74I	   .set     C_R16_OFFSET          ,160
  00000000 00                    75I	   .set     C_R16_OFFSET_LOW      ,164
                               File: BOOT_TestA Errors    0
  Location Pl  Code            Line 	Source Statement
  00000000 00                    76I	   .set     C_R17_OFFSET          ,168
  00000000 00                    77I	   .set     C_R17_OFFSET_LOW      ,172
  00000000 00                    78I	   .set     C_R18_OFFSET          ,176
  00000000 00                    79I	   .set     C_R18_OFFSET_LOW      ,180
  00000000 00                    80I	   .set     C_R19_OFFSET          ,184
  00000000 00                    81I	   .set     C_R19_OFFSET_LOW      ,188
  00000000 00                    82I	   .set     C_R20_OFFSET          ,192
  00000000 00                    83I	   .set     C_R20_OFFSET_LOW      ,196
  00000000 00                    84I	   .set     C_R21_OFFSET          ,200
  00000000 00                    85I	   .set     C_R21_OFFSET_LOW      ,204
  00000000 00                    86I	   .set     C_R22_OFFSET          ,208
  00000000 00                    87I	   .set     C_R22_OFFSET_LOW      ,212
  00000000 00                    88I	   .set     C_R23_OFFSET          ,216
  00000000 00                    89I	   .set     C_R23_OFFSET_LOW      ,220
  00000000 00                    90I	   .set     C_R24_OFFSET          ,224
  00000000 00                    91I	   .set     C_R24_OFFSET_LOW      ,228
  00000000 00                    92I	   .set     C_R25_OFFSET          ,232
  00000000 00                    93I	   .set     C_R25_OFFSET_LOW      ,236
  00000000 00                    94I	   .set     C_R26_OFFSET          ,240
  00000000 00                    95I	   .set     C_R26_OFFSET_LOW      ,244
  00000000 00                    96I	   .set     C_R27_OFFSET          ,248
  00000000 00                    97I	   .set     C_R27_OFFSET_LOW      ,252
  00000000 00                    98I	   .set     C_R28_OFFSET          ,256
  00000000 00                    99I	   .set     C_R28_OFFSET_LOW      ,260
  00000000 00                   100I	   .set     C_R29_OFFSET          ,264
  00000000 00                   101I	   .set     C_R29_OFFSET_LOW      ,268
  00000000 00                   102I	   .set     C_R30_OFFSET          ,272
  00000000 00                   103I	   .set     C_R30_OFFSET_LOW      ,276
  00000000 00                   104I	   .set     C_R31_OFFSET          ,280
  00000000 00                   105I	   .set     C_R31_OFFSET_LOW      ,284
  00000000 00                   106I	   
  00000000 00                   107I	   .set     C_SPEFSCR_OFFSET      ,288
  00000000 00                   108I	
  00000000 00                   109I	   .set     C_BSP_VECT_EOT_OFFSET ,416 #
  00000000 00                   110I	
  00000000 00                   111I	   #/* Size of memory to allocate on top of process stack to store context */
  00000000 00                   112I	   .set     C_BSP_VECT_CONTEXT_SIZE  ,512  #
  00000000 00                   113I	   
  00000000 00                   114I	   #/* Size of LR register and back chaine words to respect EABI implementation in process s
  00000000 00                       	tack. */
  00000000 00                   115I	   .set     C_BSP_VECT_EABI_REG_SIZE ,8
  00000000 00                   116I	
  00000000 00                   117I	   #/* HID0 init value, enable timer base */
  00000000 00                   118I	   .set     C_HID0_INIT_VALUE     ,0x00004000
  00000000 00                   119I	
  00000000 00                   120I	   #/* BOOT MSR first configuration. Set SPE, ME and DE bits */
  00000000 00                   121I	   .set     C_MSR_BOOT_CONFIG      ,0x02001200
  00000000 00                   122I	
  00000000 00                   123I	   #/* Process MSR configuration. Set SPE, PR, EE, ME, DE, IS and DS bits. */
  00000000 00                   124I	   .set     C_MSR_PROCESS_CONFIG  ,0x0200D230
  00000000 00                   125I	
  00000000 00                   126I	   #/* Error Codes */
  00000000 00                   127I	   .set     C_MCHECK_ERROR_CODE   ,0x00000002 #/* Machine Check error code. */
  00000000 00                   128I	   .set     C_DAE_ERROR_CODE      ,0x00000003 #/* Data access error code. */
  00000000 00                   129I	   .set     C_IAE_ERROR_CODE      ,0x00000004 #/* Instruction access error code. */
  00000000 00                   130I	   .set     C_ALIGN_ERROR_CODE    ,0x00000006 #/* Alignement error code. */
  00000000 00                   131I	   .set     C_PROG_ERROR_CODE     ,0x00000007 #/* Program error code. */   
                               File: BOOT_TestA Errors    0
  Location Pl  Code            Line 	Source Statement
  00000000 00                   132I	   .set     C_FPU_ERROR_CODE      ,0x00000008 #/* Floating point unavailable error code. */
  00000000 00                   133I	   .set     C_CRITICAL_ERROR_CODE ,0x0000000A #/* Critical interrupt error code. */
  00000000 00                   134I	   .set     C_IMISS_ERROR_CODE    ,0x00000010 #/* Instruction TLB miss error code. */
  00000000 00                   135I	   .set     C_DMISS_ERROR_CODE    ,0x00000011 #/* Data TLB miss error code. */
  00000000 00                   136I	   .set     C_DEBUG_ERROR_CODE    ,0x00000013 #/* Debug error code. */
  00000000 00                   137I	   .set     C_SYSM_ERROR_CODE     ,0x00000014 #/* System management error code. */
  00000000 00                   138I	   .set     C_TIMER_ERROR_CODE    ,0x00000016 #/* Unexpected timer IT error code. */
  00000000 00                   139I	   .set     C_SPE_ERROR_CODE      ,0x00000018 #/* SPE Unvailable error code. */
  00000000 00                   140I	   .set     C_FP_ERROR_CODE       ,0x00000019 #/* SPE error, error code. */
  00000000 00                   141I	   .set     C_PERF_MON_ERROR_CODE ,0x00000020 #/* Performance monitor error code. */
  00000000 00                   142I	
  00000000 00                   143I	#/* _END_CONSTANT ==========================================================================
  00000000 00                       	========================== */
  00000000 00                   144I	
  00000000 00                   145I	#/* BEGIN FUNCTION HEADER-------------------------------------------------------------------
  00000000 00                       	-------------------------- */
  00000000 00                   146I	#/* <<LLR:  >>  SDD_DMS_LLR_REQ_0000150                                                     
  00000000 00                       	                           */
  00000000 00                   147I	#/*                                                                                         
  00000000 00                       	                           */
  00000000 00                   148I	#/* <<FUNCTION:  >>  ERROR_IT                                                               
  00000000 00                       	                           */
  00000000 00                   149I	#/*                                                                                         
  00000000 00                       	                           */
  00000000 00                   150I	#/* <<DESCRIPTION:  >>  It is the generic error interrupt handler. It handles errors and POS
  00000000 00                       	T that use interrupts. Thi */
  00000000 00                   151I	#/* s is an assembly macro function.                                                        
  00000000 00                       	                           */
  00000000 00                   152I	#/*                                                                                         
  00000000 00                       	                           */
  00000000 00                   153I	#/* END FUNCTION HEADER---------------------------------------------------------------------
  00000000 00                       	-------------------------- */
  00000000 00                   154I	ERROR_IT: .macro v_Error
                                155I	
                                156I	    #/* Save LR in SPRG3 */
                                157I	    mflr     r3
                                158I	    mtsprg3  r3
                                159I	
                                160I	    #/* Restores stack */
                                161I	    lwz      r1,  0 (r1)
                                162I	
                                163I	    #/* Sets error code */
                                164I	    lis      r3,       v_Error@ha
                                165I	    addi     r3,  r3,  v_Error@l
                                166I	
                                167I	    #/* Calls error handler function */
                                168I	    bl      BSP_VECT_ErrorIt
                                169I	
                                170I	    #/* The following code is executed only in case of POST */
                                171I	
                                172I	    #/* Restore original LR value in SRR0 */
                                173I	    #/* Return of IT (rfi) will act "as" return of POST function (blr) */
                                174I	    mfsprg3  r3
                                175I	    mtsrr0   r3
                                176I	    
                                177I	   .endm
  00000000 00                   178I	#/*End of ERROR_IT */
                               File: BOOT_TestA Errors    0
  Location Pl  Code            Line 	Source Statement
  00000000 00                     4 	
  00000000 00                     5 	   .set MSR_EE_SET_MASK, 0x00008000
  00000000 00                     6 	   .set MSR_EE_CLEAR_MASK, 0xFFFF7FFF
  00000000 00                     7 	
  00000000 00                     8 	   .set TCR_DECAR_CLEAR_MASK, 0xFFBFFFFF
  00000000 00                     9 	   .set TCR_DIE_SET_MASK, 0x04000000
  00000000 00                    10 	   .set TCR_DIE_CLEAR_MASK, 0xFBFFFFFF
  00000000 00                    11 	   
  00000000 00                    12 	   .global BOOT_TCAHW_EnableExternalITs
  00000000 00                    13 	   .global BOOT_TCAHW_DisableExternalITs
  00000000 00                    14 	   .global BOOT_TCAHW_LoadDecrementerWith500us
  00000000 00                    15 	   .global BOOT_TCAHW_EnableDecrementerIT
  00000000 00                    16 	   .global BOOT_TCAHW_DisableDecrementerIT
  00000000 00                    17 	
  00000000 00                    18 	BOOT_TCAHW_EnableExternalITs:
  00000000 00  7c72 43a6         19 	   mtsprg2 r3 ; Save R3 in SPRG2
  00000004 00  7c60 00a6         20 	   mfmsr   r3
  00000008 00  6463 0000         21 	   oris    r3, r3, MSR_EE_SET_MASK@h
  0000000c 00  6063 8000         22 	   ori     r3, r3, MSR_EE_SET_MASK@l
  00000010 00                    23 	   REG_MSR_WRITE r3 
  00000010 00  7c00 04ac        130M	   sync
  00000014 00  7c60 0124        131M	   mtmsr    r3
  00000018 00  7c00 04ac        132M	   sync
  0000001c 00  4c00 012c        133M	   isync
  00000020 00  7c72 42a6         24 	   mfsprg2 r3
  00000024 00  4e80 0020         25 	   blr
  00000028 00                    26 	   
  00000028 00                    27 	BOOT_TCAHW_DisableExternalITs:
  00000028 00  7c72 43a6         28 	   mtsprg2 r3 ; Save R3 in SPRG2
  0000002c 00  7c93 43a6         29 	   mtsprg3 r4 ; Save R4 in SPRG3
  00000030 00  3c80 ffff         30 	   lis     r4, MSR_EE_CLEAR_MASK@ha
  00000034 00  3884 7fff         31 	   addi    r4, r4, MSR_EE_CLEAR_MASK@l
  00000038 00  7c60 00a6         32 	   mfmsr   r3
  0000003c 00  7c63 2038         33 	   and     r3, r3, r4
  00000040 00                    34 	   REG_MSR_WRITE r3
  00000040 00  7c00 04ac        130M	   sync
  00000044 00  7c60 0124        131M	   mtmsr    r3
  00000048 00  7c00 04ac        132M	   sync
  0000004c 00  4c00 012c        133M	   isync
  00000050 00  7c72 42a6         35 	   mfsprg2 r3
  00000054 00  7c93 42a6         36 	   mfsprg3 r4
  00000058 00  4e80 0020         37 	   blr
  0000005c 00                    38 	
  0000005c 00                    39 	BOOT_TCAHW_LoadDecrementerWith500us:
  0000005c 00  7c72 43a6         40 	   mtsprg2 r3 ; Save R3 in SPRG2
  00000060 00  7c93 43a6         41 	   mtsprg3 r4 ; Save R4 in SPRG3
  00000064 00  3c60 0000         42 	   lis     r3, 0x000061A8@ha ; 25000 ticks in dec = 500us
  00000068 00  3863 61a8         43 	   addi    r3, r3, 0x000061A8@l
  0000006c 00                    44 	   ;lis     r3, 0x0003D090@ha ; 250000 ticks in dec = 5ms
  0000006c 00                    45 	   ;addi    r3, r3, 0x0003D090@l
  0000006c 00  7c76 03a6         46 	   mtdec   r3
  00000070 00                    47 	   ; Disable auto reload
  00000070 00  3c80 ffc0         48 	   lis     r4, TCR_DECAR_CLEAR_MASK@ha
  00000074 00  3884 ffff         49 	   addi    r4, r4, TCR_DECAR_CLEAR_MASK@l
  00000078 00  7c74 52a6         50 	   mfspr   r3, REG_TCR
  0000007c 00  7c63 2038         51 	   and     r3, r3, r4
  00000080 00  7c74 53a6         52 	   mtspr   REG_TCR, r3
                               File: BOOT_TestA Errors    0
  Location Pl  Code            Line 	Source Statement
  00000084 00  7c72 42a6         53 	   mfsprg2 r3
  00000088 00  7c93 42a6         54 	   mfsprg3 r4
  0000008c 00  4e80 0020         55 	   blr
  00000090 00                    56 	   
  00000090 00                    57 	BOOT_TCAHW_EnableDecrementerIT:
  00000090 00  7c72 43a6         58 	   mtsprg2 r3 ; Save R3 in SPRG2
  00000094 00  7c74 52a6         59 	   mfspr   r3, REG_TCR
  00000098 00  6463 0400         60 	   oris    r3, r3, TCR_DIE_SET_MASK@h
  0000009c 00  6063 0000         61 	   ori     r3, r3, TCR_DIE_SET_MASK@l
  000000a0 00  7c74 53a6         62 	   mtspr   REG_TCR, r3
  000000a4 00  7c72 42a6         63 	   mfsprg2 r3
  000000a8 00  4e80 0020         64 	   blr
  000000ac 00                    65 	   
  000000ac 00                    66 	BOOT_TCAHW_DisableDecrementerIT:
  000000ac 00  7c72 43a6         67 	   mtsprg2 r3 ; Save R3 in SPRG2
  000000b0 00  7c93 43a6         68 	   mtsprg3 r4 ; Save R4 in SPRG3
  000000b4 00  3c80 fc00         69 	   lis     r4, TCR_DIE_CLEAR_MASK@ha
  000000b8 00  3884 ffff         70 	   addi    r4, r4, TCR_DIE_CLEAR_MASK@l
  000000bc 00  7c74 52a6         71 	   mfspr   r3, REG_TCR
  000000c0 00  7c63 2038         72 	   and     r3, r3, r4
  000000c4 00  7c74 53a6         73 	   mtspr   REG_TCR, r3
  000000c8 00  7c72 42a6         74 	   mfsprg2 r3
  000000cc 00  7c93 42a6         75 	   mfsprg3 r4
  000000d0 00  4e80 0020         76 	   blr
