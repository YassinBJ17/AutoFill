/****************************************************************************/
/******************* BOOT SOFTWARE LINKER FILE DESCRIPTION ******************/
/****************************************************************************/

/*****************************************************/
/************** Memory Map definitions ***************/
/*****************************************************/
MEMORY
{
   /*
    * Internal SRAM GROUP 256KB
    */ 
    vector_table:                   ORIGIN = 0x20000000,  LENGTH = 0x00000480
    reset:                          ORIGIN = 0x20000480,  LENGTH = 0x00000080
    code:                           ORIGIN = 0x20000500,  LENGTH = 0x0000DB00
    data:                           ORIGIN = 0x2000E000,  LENGTH = 0x00002000
    
    /*
    * DDR GROUP
    */
    boot_log:                       ORIGIN = 0x00000008,  LENGTH = 0x00000FF8
    boot_descriptor_copy:           ORIGIN = 0x00001000,  LENGTH = 0x00001000
    stack:                          ORIGIN = 0x0f800000,  LENGTH = 0x00008000
    sdram_ecc_test_data:            ORIGIN = 0x0f84FFF8,  LENGTH = 0x00000008
    clsw_buffers:                   ORIGIN = 0x0f850000,  LENGTH = 0x007B0000
}

/*****************************************************/
/************** All section definitions **************
/*****************************************************/
SECTIONS
{
    GROUP :
    {
        .intvec: {*(.VectorTable)}  
    } > vector_table
    
    GROUP :
    {
        .text: {*(.Reset)}
    } > reset
    
    GROUP :
    {
        /* Code generated for functions, global asm statements, string constants, and large
        const variables */
        .text ALIGN(4): {*(.text)}
      
        /* Small Const Area (SDA2) begin */
        _SDA2_BASE_ = .;
        .sdata2: {}
        
        .sdata2: {*(.rodata)}
        .sdata2: {*(.BOOT_DESCRIPTOR)}
    } > code

    GROUP :
    {
        /* SDATA & SBSS area have to be contiguous */

        /* Small Data Area (SDA) begin for SDATA & SBSS */
        _SDA_BASE_ = .;

        /* small non-const variables with Initial Values */
        .sdata          : {}

        /* small non-const variables without Initial Values */
        .sbss           : {}

        /* Small Data Area (SDA) end */

        /* non-const variables without Initial Values */
        .bss            : {}

        /* non-const variables with Initial Values */
        .data           : {}

        .L2SRAM_ECC_TEST_DATA : {}

    } > data

    GROUP :
    {
        .BOOT_LUH_BUFFER: {}
        .BOOT_ARINC_665_FILES_INFO_BUFFER: {}
        .BOOT_FILES_INFO_BUFFER: {}
        .BOOT_SIF_HEADER_BUFFER: {}
        .BOOT_AES_KEY_BUFFER: {}
        .BOOT_AES_MSK_BUFFER: {}
        .BOOT_CMP_BUFFER: {}
        .BOOT_SUP_BUFFER: {}
        .BOOT_LUD_BUFFER: {}
        .BOOT_LUP_FIC_BUFFER: {}
    } > clsw_buffers

    GROUP :
    {
        .SDRAM_ECC_TEST_DATA: {}
    } > sdram_ecc_test_data

    GROUP :
    {
        .BOOT_SDRAM_LOG: {}
    } > boot_log

    GROUP :
    {
        .BOOT_DESCRIPTOR_COPY: {}
    } > boot_descriptor_copy
}


/****************************************************/
/********* Linker global symbol definitions *********/
/****************************************************/
__start = VECT_Reset;
/* stack pointer */
__SP_INIT       = ADDR(stack) + SIZEOF(stack);
__SP_END        = ADDR(stack);
