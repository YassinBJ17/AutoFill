/* $********** SCADE Suite KCG 32-bit 6.6 (build i19) ***********
** Command: kcg66.exe -config ..\..\LIBBSP_api\LIBBSP_TYPE\config.txt
** Generation date: 2023-02-08T15:08:48
*************************************************************$ */

/* xscade source: ..\..\LIBBSP_api\LIBBSP_TYPE\LIBBSP_types_consts.xscade */
type
  TE_LIBBSP_TMP_Number = enum {
    #pragma kcg C:enum_val 0 #end E_LIBBSP_TMP_TMP1,
    #pragma kcg C:enum_val 1 #end E_LIBBSP_TMP_TMP2,
    #pragma kcg C:enum_val 2 #end E_LIBBSP_TMP_TMP3
  };

type
  TE_LIBBSP_TEMP_ReadRegAddr = enum {
    #pragma kcg C:enum_val 0x0 #end
    E_LIBBSP_TEMP_READ_LOCAL_TEMPERATURE_HIGH_BYTE,
    #pragma kcg C:enum_val 0x1 #end E_LIBBSP_TEMP_READ_LOCAL_REMOTE_HIGH_BYTE,
    #pragma kcg C:enum_val 0x2 #end E_LIBBSP_TEMP_READ_STATUS_REGISTER,
    #pragma kcg C:enum_val 0x3 #end E_LIBBSP_TEMP_READ_CONFIGURATION_REGISTER,
    #pragma kcg C:enum_val 0x4 #end E_LIBBSP_TEMP_READ_CONVERSION_RATE_REGISTER,
    #pragma kcg C:enum_val 0x5 #end
    E_LIBBSP_TEMP_READ_LOCAL_TEMPERATURE_HIGH_LIMIT,
    #pragma kcg C:enum_val 0x6 #end
    E_LIBBSP_TEMP_READ_LOCAL_TEMPERATURE_LOW_LIMIT,
    #pragma kcg C:enum_val 0x7 #end
    E_LIBBSP_TEMP_READ_REMOTE_TEMPERATURE_HIGH_LIMIT_HIGH_BITE,
    #pragma kcg C:enum_val 0x8 #end
    E_LIBBSP_TEMP_READ_REMOTE_TEMPERATURE_LOW_LIMIT_HIGH_BITE,
    #pragma kcg C:enum_val 0x10 #end
    E_LIBBSP_TEMP_READ_REMOTE_TEMPERATURE_LOW_BITE,
    #pragma kcg C:enum_val 0x11 #end
    E_LIBBSP_TEMP_READ_REMOTE_TEMPERATURE_OFFSET_HIGH_BITE,
    #pragma kcg C:enum_val 0x12 #end
    E_LIBBSP_TEMP_READ_REMOTE_TEMPERATURE_OFFSET_LOW_BITE,
    #pragma kcg C:enum_val 0x13 #end
    E_LIBBSP_TEMP_READ_REMOTE_TEMPERATURE_HIGH_LIMIT_LOW_BITE,
    #pragma kcg C:enum_val 0x14 #end
    E_LIBBSP_TEMP_READ_REMOTE_TEMPERATURE_LOW_LIMIT_LOW_BITE,
    #pragma kcg C:enum_val 0x15 #end
    E_LIBBSP_TEMP_READ_LOCAL_TEMPERATURE_LOW_BYTE,
    #pragma kcg C:enum_val 0x19 #end
    E_LIBBSP_TEMP_READ_REMOTE_TEMPERATURE_THERM_LIMIT,
    #pragma kcg C:enum_val 0x20 #end
    E_LIBBSP_TEMP_READ_LOCAL_TEMPERATURE_THERM_LIMIT,
    #pragma kcg C:enum_val 0x21 #end E_LIBBSP_TEMP_READ_THERM_HISTERESYS,
    #pragma kcg C:enum_val 0x22 #end E_LIBBSP_TEMP_READ_CONSECUTIVE_ALTER,
    #pragma kcg C:enum_val 0x23 #end E_LIBBSP_TEMP_READ_FACTOR_CORECTION,
    #pragma kcg C:enum_val 0x24 #end E_LIBBSP_TEMP_READ_DIGITAL_FILTER_CONTROL,
    #pragma kcg C:enum_val 0xFE #end E_LIBBSP_TEMP_READ_DIGITAL_MANUFATURER_IR
  };

type
  TE_LIBBSP_SHM_Mode = enum {
    #pragma kcg C:enum_val 1 #end E_LIBBSP_SHM_POWER_UP_STATE,
    #pragma kcg C:enum_val 2 #end E_LIBBSP_SHM_INITIALIZATION_STATE,
    #pragma kcg C:enum_val 4 #end E_LIBBSP_SHM_IDLE_STATE,
    #pragma kcg C:enum_val 8 #end E_LIBBSP_SHM_OPERATIONNAL_UP_STATE,
    #pragma kcg C:enum_val 16 #end E_LIBBSP_SHM_DEGRADED_STATE,
    #pragma kcg C:enum_val 32 #end E_LIBBSP_SHM_FAILURE_STATE
  };

type
  TE_LIBBSP_PSUM_Adc = enum {
    #pragma kcg C:enum_val 0 #end E_LIBBSP_PSUM_ADC_1,
    #pragma kcg C:enum_val 1 #end E_LIBBSP_PSUM_ADC_2,
    #pragma kcg C:enum_val 2 #end E_LIBBSP_PSUM_ADC_3,
    #pragma kcg C:enum_val 3 #end E_LIBBSP_PSUM_ADC_4,
    #pragma kcg C:enum_val 4 #end E_LIBBSP_PSUM_ADC_5,
    #pragma kcg C:enum_val 5 #end E_LIBBSP_PSUM_ADC_6,
    #pragma kcg C:enum_val 6 #end E_LIBBSP_PSUM_ADC_7,
    #pragma kcg C:enum_val 7 #end E_LIBBSP_PSUM_NB_ADC
  };

type
  TE_LIBBSP_SHM_Register = enum {
    #pragma kcg C:enum_val 0 #end E_LIBBSP_SHM_COMP_STATUS,
    #pragma kcg C:enum_val 1 #end E_LIBBSP_SHM_BOARD_STATUS,
    #pragma kcg C:enum_val 2 #end E_LIBBSP_SHM_NB_REGISTERS
  };

type
  TE_LIBBSP_MEGSCR_Register = enum {
    #pragma kcg C:enum_val 0 #end E_LIBBSP_MEGSCR_SCRATCH_0,
    #pragma kcg C:enum_val 1 #end E_LIBBSP_MEGSCR_SCRATCH_1,
    #pragma kcg C:enum_val 2 #end E_LIBBSP_MEGSCR_SCRATCH_2,
    #pragma kcg C:enum_val 3 #end E_LIBBSP_MEGSCR_SCRATCH_3,
    #pragma kcg C:enum_val 4 #end E_LIBBSP_MEGSCR_SCRATCH_4,
    #pragma kcg C:enum_val 5 #end E_LIBBSP_MEGSCR_SCRATCH_5,
    #pragma kcg C:enum_val 6 #end E_LIBBSP_MEGSCR_SCRATCH_6,
    #pragma kcg C:enum_val 7 #end E_LIBBSP_MEGSCR_SCRATCH_7,
    #pragma kcg C:enum_val 8 #end E_LIBBSP_MEGSCR_SCRATCH_8,
    #pragma kcg C:enum_val 9 #end E_LIBBSP_MEGSCR_SCRATCH_9,
    #pragma kcg C:enum_val 10 #end E_LIBBSP_MEGSCR_SCRATCH_10,
    #pragma kcg C:enum_val 11 #end E_LIBBSP_MEGSCR_SCRATCH_11,
    #pragma kcg C:enum_val 12 #end E_LIBBSP_MEGSCR_SCRATCH_12,
    #pragma kcg C:enum_val 13 #end E_LIBBSP_MEGSCR_SCRATCH_13,
    #pragma kcg C:enum_val 14 #end E_LIBBSP_MEGSCR_SCRATCH_14,
    #pragma kcg C:enum_val 15 #end E_LIBBSP_MEGSCR_SCRATCH_15,
    #pragma kcg C:enum_val 16 #end E_LIBBSP_MEGSCR_SCRATCH_16,
    #pragma kcg C:enum_val 17 #end E_LIBBSP_MEGSCR_SCRATCH_17,
    #pragma kcg C:enum_val 18 #end E_LIBBSP_MEGSCR_SCRATCH_18,
    #pragma kcg C:enum_val 19 #end E_LIBBSP_MEGSCR_SCRATCH_19,
    #pragma kcg C:enum_val 20 #end E_LIBBSP_MEGSCR_SCRATCH_20,
    #pragma kcg C:enum_val 21 #end E_LIBBSP_MEGSCR_SCRATCH_21,
    #pragma kcg C:enum_val 22 #end E_LIBBSP_MEGSCR_SCRATCH_22,
    #pragma kcg C:enum_val 23 #end E_LIBBSP_MEGSCR_SCRATCH_23,
    #pragma kcg C:enum_val 24 #end E_LIBBSP_MEGSCR_SCRATCH_24,
    #pragma kcg C:enum_val 25 #end E_LIBBSP_MEGSCR_SCRATCH_25,
    #pragma kcg C:enum_val 26 #end E_LIBBSP_MEGSCR_SCRATCH_26,
    #pragma kcg C:enum_val 27 #end E_LIBBSP_MEGSCR_SCRATCH_27,
    #pragma kcg C:enum_val 28 #end E_LIBBSP_MEGSCR_SCRATCH_28,
    #pragma kcg C:enum_val 29 #end E_LIBBSP_MEGSCR_SCRATCH_29,
    #pragma kcg C:enum_val 30 #end E_LIBBSP_MEGSCR_SCRATCH_30,
    #pragma kcg C:enum_val 31 #end E_LIBBSP_MEGSCR_SCRATCH_31
  };

type
  TE_LIBBSP_I2C_ErrorCode = enum {
    #pragma kcg C:enum_val 0 #end E_LIBBSP_I2C_COMMAND_TAKEN,
    #pragma kcg C:enum_val 1 #end E_LIBBSP_I2C_COMMAND_NOT_TAKEN,
    #pragma kcg C:enum_val 2 #end E_LIBBSP_I2C_COMMAND_ERROR,
    #pragma kcg C:enum_val 3 #end E_LIBBSP_I2C_WRITE_OVERSIZED,
    #pragma kcg C:enum_val 4 #end E_LIBBSP_I2C_READ_OVERSIZED
  };

type
  TE_LIBBSP_I2C_CurrentStep = enum {
    #pragma kcg C:enum_val 0 #end E_LIBBSP_I2C_IDLE,
    #pragma kcg C:enum_val 1 #end E_LIBBSP_I2C_WAIT_FOR_SLV_CMD_W_ACK,
    #pragma kcg C:enum_val 2 #end E_LIBBSP_I2C_WAIT_FOR_SLV_W_ACK,
    #pragma kcg C:enum_val 3 #end E_LIBBSP_I2C_WAIT_FOR_SLV_CMD_R_ACK,
    #pragma kcg C:enum_val 4 #end E_LIBBSP_I2C_WAIT_FOR_SLV_R_DATA,
    #pragma kcg C:enum_val 5 #end E_LIBBSP_I2C_DATA_WRITTEN,
    #pragma kcg C:enum_val 6 #end E_LIBBSP_I2C_DATA_READ
  };

type
  TE_LIBBSP_I2C_Code = enum {
    #pragma kcg C:enum_val 0 #end E_LIBBSP_I2C_OK,
    #pragma kcg C:enum_val 1 #end E_LIBBSP_I2C_INVALID_ID,
    #pragma kcg C:enum_val 2 #end E_LIBBSP_I2C_ARBITRATION_LOST,
    #pragma kcg C:enum_val 3 #end E_LIBBSP_I2C_NO_ACK,
    #pragma kcg C:enum_val 4 #end E_LIBBSP_I2C_BUS_BUSY,
    #pragma kcg C:enum_val 5 #end E_LIBBSP_I2C_TIMEOUT,
    #pragma kcg C:enum_val 6 #end E_LIBBSP_I2C_CLOSED
  };

type
  TE_LIBBSP_DISC_Expander = enum {
    #pragma kcg C:enum_val 0 #end E_LIBBSP_DISC_EXPANDER_1,
    #pragma kcg C:enum_val 1 #end E_LIBBSP_DISC_EXPANDER_2,
    #pragma kcg C:enum_val 2 #end E_LIBBSP_DISC_NB_EXPANDER
  };

type
  TE_LIBBSP_CMPSCR_Register = enum {
    #pragma kcg C:enum_val 0 #end E_LIBBSP_CMPSCR_SCRATCH_0,
    #pragma kcg C:enum_val 1 #end E_LIBBSP_CMPSCR_SCRATCH_1,
    #pragma kcg C:enum_val 2 #end E_LIBBSP_CMPSCR_SCRATCH_2,
    #pragma kcg C:enum_val 3 #end E_LIBBSP_CMPSCR_SCRATCH_3,
    #pragma kcg C:enum_val 4 #end E_LIBBSP_CMPSCR_SCRATCH_4,
    #pragma kcg C:enum_val 5 #end E_LIBBSP_CMPSCR_SCRATCH_5,
    #pragma kcg C:enum_val 6 #end E_LIBBSP_CMPSCR_SCRATCH_6,
    #pragma kcg C:enum_val 7 #end E_LIBBSP_CMPSCR_SCRATCH_7,
    #pragma kcg C:enum_val 8 #end E_LIBBSP_CMPSCR_SCRATCH_8,
    #pragma kcg C:enum_val 9 #end E_LIBBSP_CMPSCR_SCRATCH_9,
    #pragma kcg C:enum_val 10 #end E_LIBBSP_CMPSCR_SCRATCH_10,
    #pragma kcg C:enum_val 11 #end E_LIBBSP_CMPSCR_SCRATCH_11,
    #pragma kcg C:enum_val 12 #end E_LIBBSP_CMPSCR_SCRATCH_12,
    #pragma kcg C:enum_val 13 #end E_LIBBSP_CMPSCR_SCRATCH_13,
    #pragma kcg C:enum_val 14 #end E_LIBBSP_CMPSCR_SCRATCH_14,
    #pragma kcg C:enum_val 15 #end E_LIBBSP_CMPSCR_SCRATCH_15,
    #pragma kcg C:enum_val 16 #end E_LIBBSP_CMPSCR_SCRATCH_16,
    #pragma kcg C:enum_val 17 #end E_LIBBSP_CMPSCR_SCRATCH_17,
    #pragma kcg C:enum_val 18 #end E_LIBBSP_CMPSCR_SCRATCH_18,
    #pragma kcg C:enum_val 19 #end E_LIBBSP_CMPSCR_SCRATCH_19,
    #pragma kcg C:enum_val 20 #end E_LIBBSP_CMPSCR_SCRATCH_20,
    #pragma kcg C:enum_val 21 #end E_LIBBSP_CMPSCR_SCRATCH_21,
    #pragma kcg C:enum_val 22 #end E_LIBBSP_CMPSCR_SCRATCH_22,
    #pragma kcg C:enum_val 23 #end E_LIBBSP_CMPSCR_SCRATCH_23,
    #pragma kcg C:enum_val 24 #end E_LIBBSP_CMPSCR_SCRATCH_24,
    #pragma kcg C:enum_val 25 #end E_LIBBSP_CMPSCR_SCRATCH_25,
    #pragma kcg C:enum_val 26 #end E_LIBBSP_CMPSCR_SCRATCH_26,
    #pragma kcg C:enum_val 27 #end E_LIBBSP_CMPSCR_SCRATCH_27,
    #pragma kcg C:enum_val 28 #end E_LIBBSP_CMPSCR_SCRATCH_28,
    #pragma kcg C:enum_val 29 #end E_LIBBSP_CMPSCR_SCRATCH_29,
    #pragma kcg C:enum_val 30 #end E_LIBBSP_CMPSCR_SCRATCH_30,
    #pragma kcg C:enum_val 31 #end E_LIBBSP_CMPSCR_SCRATCH_31
  };

type
  TE_LIBBSP_CMN_Status = enum {
    #pragma kcg C:enum_val 0 #end E_LIBBSP_CMN_TIME_IS_REACHED,
    #pragma kcg C:enum_val 1 #end E_LIBBSP_CMN_TIME_IS_NOT_REACHED
  };

type
  TE_LIBBSP_A429_TxLine = enum {
    #pragma kcg C:enum_val 15 #end E_LIBBSP_A429_TX_1,
    #pragma kcg C:enum_val 16 #end E_LIBBSP_A429_TX_2,
    #pragma kcg C:enum_val 17 #end E_LIBBSP_A429_TX_3,
    #pragma kcg C:enum_val 18 #end E_LIBBSP_A429_TX_4,
    #pragma kcg C:enum_val 19 #end E_LIBBSP_A429_TX_5,
    #pragma kcg C:enum_val 20 #end E_LIBBSP_A429_TX_6,
    #pragma kcg C:enum_val 21 #end E_LIBBSP_A429_TX_7,
    #pragma kcg C:enum_val 22 #end E_LIBBSP_A429_TX_8
  };

type
  TE_LIBBSP_A429_TxErrorCode = enum {
    #pragma kcg C:enum_val 0 #end E_LIBBSP_A429_TX_OK,
    #pragma kcg C:enum_val 1 #end E_LIBBSP_A429_TX_INVALID_ID,
    #pragma kcg C:enum_val 2 #end E_LIBBSP_A429_TX_OVERFLOW_CMD,
    #pragma kcg C:enum_val 3 #end E_LIBBSP_A429_TX_OVERFLOW_FIFO
  };

type TS_LIBBSP_PSUM_Conf = { v_address : uint32, v_data : uint32 };

type
  TS_LIBBSP_PSUM_AdcErrorFlags = {
    PresFail_or_Vin6Failure : bool,
    OverVoltage : bool,
    UnderVoltage : bool,
    Vin7NotInRange : bool,
    GeneralFailure : bool
  };

type
  TS_LIBBSP_PLDCMP_ErrorStatus = {
    nvm_error : bool,
    parity_error : bool,
    addr_error : bool,
    acc_error : bool,
    timeout_error : bool,
    overload_error : bool,
    wdg_comp_rst : bool
  };

type
  TS_LIBBSP_ETR_ReadInfos = {
    v_AlarmRegdata : uint32,
    v_ETregdata : uint32,
    v_EventCountdata : uint16
  };

const C_LIBBSP_A429_BUFFER_SIZE : uint32 = 64;

type TS_LIBBSP_A429_Buffer = uint32^C_LIBBSP_A429_BUFFER_SIZE;

const
  C_LIBBSP_PSUM_INIT_COUPLE : TS_LIBBSP_PSUM_Conf = { v_address:0, v_data:0 };

const C_LIBBSP_PSUM_SHM_NB_COUPLE : uint32 = 0;

type
  TS_LIBBSP_SHM_BoardStatus = {
    pwr_good_28v1 : bool,
    pwr_good_28v2 : bool,
    ddr_vtt_uv : bool,
    ddr_vtt_ov : bool,
    vdd_uv : bool,
    vdd_ov : bool,
    cpcm_1v5_uv : bool,
    cpcm_1v5_ov : bool,
    vio_3v3_uv : bool,
    vio_3v3_ov : bool,
    cpcm_1v8_uv : bool,
    cpcm_1v8_ov : bool,
    mezz_pgood : bool,
    mezz_fail : bool,
    ready_p1 : bool,
    trig_out : bool,
    pgood_p2v5 : bool,
    pgood_1v2meg : bool,
    meg_fail : bool,
    meg_pll_lock : bool,
    therm : bool,
    therm2 : bool,
    lvdd_type : bool,
    tank_fail : bool,
    pgood_vant : bool,
    pgood_vrm : bool,
    inhibit_wdg : bool
  };

type
  TS_LIBBSP_SHM_CompStatus = {
    wd_failure_cnt : uint8,
    sw_reset_request_cnt : uint8,
    hw_reset_request_cnt : uint8,
    critical_uvd_cnt : uint8
  };

type
  TE_LIBBSP_GPIO_DiscName = enum {
    #pragma kcg C:enum_val 0x0001 #end E_LIBBSP_GPIO_MEGA_GPIO2,
    #pragma kcg C:enum_val 0x0002 #end E_LIBBSP_GPIO_MEGA_GPIO1,
    #pragma kcg C:enum_val 0x0004 #end E_LIBBSP_GPIO_MEGA_GPIO0,
    #pragma kcg C:enum_val 0x0008 #end E_LIBBSP_GPIO_COMP_GPIO2,
    #pragma kcg C:enum_val 0x0010 #end E_LIBBSP_GPIO_COMP_GPIO1,
    #pragma kcg C:enum_val 0x0020 #end E_LIBBSP_GPIO_COMP_GPIO0,
    #pragma kcg C:enum_val 0x0040 #end E_LIBBSP_GPIO_SDHC_W_PROTECT,
    #pragma kcg C:enum_val 0x0080 #end E_LIBBSP_GPIO_SDHC_CARD_DETECT,
    #pragma kcg C:enum_val 0x0100 #end E_LIBBSP_GPIO_GREEN_LED,
    #pragma kcg C:enum_val 0x0200 #end E_LIBBSP_GPIO_YELLOW_LED,
    #pragma kcg C:enum_val 0x0400 #end E_LIBBSP_GPIO_RED_LED,
    #pragma kcg C:enum_val 0x0800 #end E_LIBBSP_GPIO_IRQ11,
    #pragma kcg C:enum_val 0x1000 #end E_LIBBSP_GPIO_DSI_SG_LABO,
    #pragma kcg C:enum_val 0x2000 #end E_LIBBSP_GPIO_DSI_DL,
    #pragma kcg C:enum_val 0x4000 #end E_LIBBSP_GPIO_IRQ8,
    #pragma kcg C:enum_val 0x8000 #end E_LIBBSP_GPIO_MEGA_MEZA_SPI_SEL
  };

type
  TE_LIBBSP_ECCMEM_SeuMbuEn = enum {
    #pragma kcg C:enum_val 0x4 #end E_LIBBSP_ECCMEM_MBU_ONLY_EN,
    #pragma kcg C:enum_val 0x8 #end E_LIBBSP_ECCMEM_SEU_ONLY_EN,
    #pragma kcg C:enum_val 0x0 #end E_LIBBSP_ECCMEM_MBU_SEU_EN,
    #pragma kcg C:enum_val 0xc #end E_LIBBSP_ECCMEM_MBU_SEU_DIS
  };

type
  TE_LIBBSP_ECCMEM_SeuMbuIt = enum {
    #pragma kcg C:enum_val 0x8 #end E_LIBBSP_ECCMEM_MBU_ONLY_IT,
    #pragma kcg C:enum_val 0x4 #end E_LIBBSP_ECCMEM_SEU_ONLY_IT,
    #pragma kcg C:enum_val 0xc #end E_LIBBSP_ECCMEM_MBU_SEU_IT,
    #pragma kcg C:enum_val 0x0 #end E_LIBBSP_ECCMEM_MBU_SEU_IT_DIS
  };

type
  TE_LIBBSP_ECCMEM_SeuStatus = enum {
    #pragma kcg C:enum_val 0 #end E_LIBBSP_ECCMEM_SEU_OK,
    #pragma kcg C:enum_val 1 #end E_LIBBSP_ECCMEM_SEU_WRONG_NB,
    #pragma kcg C:enum_val 2 #end E_LIBBSP_ECCMEM_SEU_THRESH_EXCEED,
    #pragma kcg C:enum_val 3 #end E_LIBBSP_ECCMEM_MBU_NOT_DETECTED
  };

type
  TE_LIBBSP_IMU_WriteAddr = enum {
    #pragma kcg C:enum_val 0 #end E_LIBBSP_IMU_WRITE_ADDRESS,
    #pragma kcg C:enum_val 1 #end E_LIBBSP_IMU_NO_WRITE_ADDRESS
  };

type
  TE_LIBBSP_IMU_ProgStatus = enum {
    #pragma kcg C:enum_val 0 #end E_LIBBSP_IMU_NB_DATA_OK,
    #pragma kcg C:enum_val 1 #end E_LIBBSP_IMU_NB_DATA_EXCEEDED
  };

type
  TS_LIBBSP_IMU_WriteAddrBuffer2 = uint32^(C_LIBBSP_IMU_NB_DATA_WRITE_MAX + 1);

type TS_LIBBSP_IMU_WriteDataBuffer = float32^C_LIBBSP_IMU_NB_DATA_WRITE_MAX;

type
  TS_LIBBSP_IMU_InertialData = {
    dTheta : TS_LIBBSP_IMU_Vect3,
    dV : TS_LIBBSP_IMU_Vect3,
    Cp : TS_LIBBSP_IMU_Vect3,
    TheteE : TS_LIBBSP_IMU_Vect3,
    ErrFEP : TS_LIBBSP_IMU_Vect3,
    IndFEP : TS_LIBBSP_IMU_Vect3,
    synth_umi : uint32,
    cpt_tache_fNav : uint32,
    fs_filtA_BdL_fPilot_custUnit : TS_LIBBSP_IMU_Vect3,
    fs_filtB_BdL_fPilot_custUnit : TS_LIBBSP_IMU_Vect3,
    pqr_filtE_fPilot_custUnit : TS_LIBBSP_IMU_Vect3,
    pqr_filtF_fPilot_custUnit : TS_LIBBSP_IMU_Vect3,
    accAng_filtE_fPilot_custUnit : TS_LIBBSP_IMU_Vect3,
    accAng_filtF_fPilot_custUnit : TS_LIBBSP_IMU_Vect3,
    Tacc_filtre : TS_LIBBSP_IMU_Vect3,
    Tida_filtre : float64,
    Tacc_sature : TS_LIBBSP_IMU_Vect3,
    Cpulse_sature : TS_LIBBSP_IMU_Vect3,
    Tida_sature : float64,
    AccStatus : uint32,
    HrgStatus1 : uint32,
    HrgStatus2 : uint32,
    TicStatus1 : uint32,
    TicStatus2 : uint32,
    TmgyrData : TS_LIBBSP_IMU_Vect9
  };

type TS_LIBBSP_IMU_Vect3 = float64^3;

type
  TE_LIBBSP_IMU_WriteEraseCmd = enum {
    #pragma kcg C:enum_val 0 #end E_LIBBSP_IMU_RESET_ALL_W_ADDR,
    #pragma kcg C:enum_val 1 #end E_LIBBSP_IMU_RESET_ADD_W_ADDR
  };

const C_LIBBSP_IMU_NB_DATA_WRITE_MAX : uint32 = 32;

const C_LIBBSP_IMU_NB_ADDITIONAL_DATA : uint32 = 6;

type
  TS_LIBBSP_IMU_AdditionalDataWriteBuffer = float32^C_LIBBSP_IMU_NB_ADDITIONAL_DATA;

type
  TS_LIBBSP_IMU_InstrumIMUData = {
    v_lambda_ext_0 : float64,
    v_lambda_ext_1 : float64,
    v_lambda_ext_2 : float64,
    v_cfPilot_A1_0 : float64,
    v_cfPilot_A1_1 : float64,
    v_cfPilot_A1_2 : float64,
    v_cfPilot_A1_3 : float64,
    v_cfPilot_A1_4 : float64,
    v_cfPilot_A2_1 : float64,
    v_cfPilot_A2_2 : float64,
    v_cfPilot_A2_3 : float64,
    v_cfPilot_A2_4 : float64,
    v_cfPilot_A3_1 : float64,
    v_cfPilot_A3_0 : float64,
    v_cfPilot_A3_2 : float64,
    v_cfPilot_A3_3 : float64,
    v_cfPilot_A3_4 : float64,
    v_cfPilot_A4_0 : float64,
    v_cfPilot_A4_1 : float64,
    v_cfPilot_A4_2 : float64,
    v_cfPilot_A4_3 : float64,
    v_cfPilot_A4_4 : float64,
    v_cfPilot_B1_0 : float64,
    v_cfPilot_B1_1 : float64,
    v_cfPilot_B1_2 : float64,
    v_cfPilot_B1_3 : float64,
    v_cfPilot_B1_4 : float64,
    v_cfPilot_B2_0 : float64,
    v_cfPilot_B2_1 : float64,
    v_cfPilot_B2_2 : float64,
    v_cfPilot_B2_3 : float64,
    v_cfPilot_B2_4 : float64,
    v_cfPilot_B3_0 : float64,
    v_cfPilot_B3_1 : float64,
    v_cfPilot_B3_2 : float64,
    v_cfPilot_B3_3 : float64,
    v_cfPilot_B3_4 : float64,
    v_cfPilot_B4_0 : float64,
    v_cfPilot_B4_1 : float64,
    v_cfPilot_B4_2 : float64,
    v_cfPilot_B4_3 : float64,
    v_cfPilot_B4_4 : float64,
    v_cfPilot_E1_0 : float64,
    v_cfPilot_E1_1 : float64,
    v_cfPilot_E1_2 : float64,
    v_cfPilot_E1_3 : float64,
    v_cfPilot_E1_4 : float64,
    v_cfPilot_E2_0 : float64,
    v_cfPilot_E2_1 : float64,
    v_cfPilot_E2_2 : float64,
    v_cfPilot_E2_3 : float64,
    v_cfPilot_E2_4 : float64,
    v_cfPilot_E3_0 : float64,
    v_cfPilot_E3_1 : float64,
    v_cfPilot_E3_2 : float64,
    v_cfPilot_E3_3 : float64,
    v_cfPilot_E3_4 : float64,
    v_cfPilot_E4_0 : float64,
    v_cfPilot_E4_1 : float64,
    v_cfPilot_E4_2 : float64,
    v_cfPilot_E4_3 : float64,
    v_cfPilot_E4_4 : float64,
    v_cfPilot_F1_0 : float64,
    v_cfPilot_F1_1 : float64,
    v_cfPilot_F1_2 : float64,
    v_cfPilot_F1_3 : float64,
    v_cfPilot_F1_4 : float64,
    v_cfPilot_F2_0 : float64,
    v_cfPilot_F2_1 : float64,
    v_cfPilot_F2_2 : float64,
    v_cfPilot_F2_3 : float64,
    v_cfPilot_F2_4 : float64,
    v_cfPilot_F3_0 : float64,
    v_cfPilot_F3_1 : float64,
    v_cfPilot_F3_2 : float64,
    v_cfPilot_F3_3 : float64,
    v_cfPilot_F3_4 : float64,
    v_cfPilot_F4_0 : float64,
    v_cfPilot_F4_1 : float64,
    v_cfPilot_F4_2 : float64,
    v_cfPilot_F4_3 : float64,
    v_cfPilot_F4_4 : float64
  };

const C_LIBBSP_IMU_NB_ADDITIONAL_DATA_READ_PER_CYCLE : uint32 = 5;

type
  TS_LIBBSP_IMU_AdditionalDataReadBufferOut = float64^C_LIBBSP_IMU_NB_ADDITIONAL_DATA_READ_PER_CYCLE;

type
  TE_LIBBSP_ETSEC_NetworkStatus = enum {
    #pragma kcg C:enum_val 0 #end E_LIBBSP_ETSEC_OK,
    #pragma kcg C:enum_val 1 #end E_LIBBSP_ETSEC_KO
  };

type
  TE_LIBBSP_ETSEC_Network = enum {
    #pragma kcg C:enum_val 0 #end E_LIBBSP_ETSEC_NETWORK_1,
    #pragma kcg C:enum_val 1 #end E_LIBBSP_ETSEC_NETWORK_2,
    #pragma kcg C:enum_val 2 #end E_LIBBSP_ETSEC_NETWORK_3,
    #pragma kcg C:enum_val 3 #end E_LIBBSP_ETSEC_NB_NETWORK
  };

type
  TE_LIBBSP_ETR_Ds1682State = enum {
    #pragma kcg C:enum_val 0 #end E_LIBBSP_ETR_DS1682_CLOSED,
    #pragma kcg C:enum_val 1 #end E_LIBBSP_ETR_DS1682_OPEN
  };

type
  TE_LIBBSP_I2C_Bus = enum {
    #pragma kcg C:enum_val 0 #end E_LIBBSP_I2C_BUS_1,
    #pragma kcg C:enum_val 1 #end E_LIBBSP_I2C_BUS_2,
    #pragma kcg C:enum_val 2 #end E_LIBBSP_I2C_NB_I2C_BUS
  };

type TS_LIBBSP_ETSEC_ConfHostMac = { mac_addr : TS_LIBBSP_ETSEC_MacAddr };

const C_LIBBSP_ETSEC_MAC_ADDR_SIZE : uint32 = 6;

type
  TE_LIBBSP_ETSEC_NetConfigStart = enum {
    #pragma kcg C:enum_val 1 #end E_LIBBSP_ETSEC_START_NETWORK_TX,
    #pragma kcg C:enum_val 2 #end E_LIBBSP_ETSEC_START_NETWORK_RX,
    #pragma kcg C:enum_val 3 #end E_LIBBSP_ETSEC_START_NETWORK_RX_TX
  };

const C_LIBBSP_ETSEC_MESSAGE_SIZE : uint32 = 1518;

type TS_LIBBSP_ETSEC_EthBuffer = uint8^C_LIBBSP_ETSEC_MESSAGE_SIZE;

type
  TE_LIBBSP_ETSEC_FrameStatus = enum {
    #pragma kcg C:enum_val 0 #end E_LIBBSP_ETSEC_NO_PHYSICAL_ERROR,
    #pragma kcg C:enum_val 1 #end E_LIBBSP_ETSEC_PHYSICAL_ERROR,
    #pragma kcg C:enum_val 2 #end E_LIBBSP_ETSEC_NO_FRAME_RECEIVED,
    #pragma kcg C:enum_val 3 #end E_LIBBSP_ETSEC_SOFTWARE_OVERRUN
  };

type TS_LIBBSP_ETSEC_MacAddr = uint8^C_LIBBSP_ETSEC_MAC_ADDR_SIZE;

type
  TE_LIBBSP_ETSEC_NetConfigStop = enum {
    #pragma kcg C:enum_val 1 #end E_LIBBSP_ETSEC_STOP_NETWORK_TX,
    #pragma kcg C:enum_val 2 #end E_LIBBSP_ETSEC_STOP_NETWORK_RX,
    #pragma kcg C:enum_val 3 #end E_LIBBSP_ETSEC_STOP_NETWORK_RX_TX
  };

type
  TE_LIBBSP_A429_Speed = enum {
    #pragma kcg C:enum_val 0 #end E_LIBBSP_A429_BAUDS_12,
    #pragma kcg C:enum_val 1 #end E_LIBBSP_A429_BAUDS_100
  };

const
  C_LIBBSP_IMU_NB_ADD_DATA_READ_MAX : uint32
    = 64 - C_LIBBSP_IMU_NB_INERTIAL_DATA_READ;

const C_LIBBSP_IMU_NB_INERTIAL_DATA_READ : uint32 = 51;

type TS_LIBBSP_IMU_FloatTab = float64^C_LIBBSP_IMU_NB_ADD_DATA_READ_MAX;

type
  TE_LIBBSP_GPIO_Status = enum {
    #pragma kcg C:enum_val 0 #end E_LIBBSP_GPIO_SUCCEEDED,
    #pragma kcg C:enum_val 1 #end E_LIBBSP_GPIO_FAILED
  };

type
  TE_LIBBSP_PSUM_Status = enum {
    #pragma kcg C:enum_val 0 #end E_LIBBSP_PSUM_SUCCEEDED,
    #pragma kcg C:enum_val 1 #end E_LIBBSP_PSUM_FAILED
  };

type
  TE_LIBBSP_MRAM_ErrorCode = enum {
    #pragma kcg C:enum_val 0x0 #end E_LIBBSP_MRAM_OK,
    #pragma kcg C:enum_val 0x1 #end E_LIBBSP_MRAM_OPEN_ESPI_ERROR,
    #pragma kcg C:enum_val 0x2 #end E_LIBBSP_MRAM_CLOSE_ESPI_ERROR,
    #pragma kcg C:enum_val 0x3 #end E_LIBBSP_MRAM_WRITE_ERROR,
    #pragma kcg C:enum_val 0x4 #end E_LIBBSP_MRAM_READ_ERROR,
    #pragma kcg C:enum_val 0x5 #end E_LIBBSP_MRAM_EXCHANGE_ESPI_ERROR
  };

type
  TE_LIBBSP_UART_Dev = enum {
    #pragma kcg C:enum_val 0 #end E_LIBBSP_UART_DEV_1_RX,
    #pragma kcg C:enum_val 1 #end E_LIBBSP_UART_DEV_1_TX,
    #pragma kcg C:enum_val 2 #end E_LIBBSP_UART_DEV_2_RX,
    #pragma kcg C:enum_val 3 #end E_LIBBSP_UART_DEV_2_TX,
    #pragma kcg C:enum_val 4 #end E_LIBBSP_UART_DEV_3_RX,
    #pragma kcg C:enum_val 5 #end E_LIBBSP_UART_DEV_3_TX,
    #pragma kcg C:enum_val 6 #end E_LIBBSP_UART_DEV_4_RX,
    #pragma kcg C:enum_val 7 #end E_LIBBSP_UART_DEV_4_TX,
    #pragma kcg C:enum_val 8 #end E_LIBBSP_UART_DEV_MAX
  };

type
  TE_LIBBSP_UART_Speed = enum {
    #pragma kcg C:enum_val 0 #end E_LIBBSP_UART_BAUDS_9600,
    #pragma kcg C:enum_val 1 #end E_LIBBSP_UART_BAUDS_19200,
    #pragma kcg C:enum_val 2 #end E_LIBBSP_UART_BAUDS_38400,
    #pragma kcg C:enum_val 3 #end E_LIBBSP_UART_BAUDS_115200,
    #pragma kcg C:enum_val 4 #end E_LIBBSP_UART_BAUDS_460800,
    #pragma kcg C:enum_val 5 #end E_LIBBSP_UART_BAUDS_921600
  };

type
  TE_LIBBSP_UART_Parity = enum {
    #pragma kcg C:enum_val 0 #end E_LIBBSP_UART_PARITY_NONE,
    #pragma kcg C:enum_val 1 #end E_LIBBSP_UART_PARITY_ODD,
    #pragma kcg C:enum_val 2 #end E_LIBBSP_UART_PARITY_EVEN,
    #pragma kcg doc Second value allowing to select the absence of parity for the RS #end
    #pragma kcg C:enum_val 3 #end E_LIBBSP_UART_PARITY_NONE_3
  };

type
  TE_LIBBSP_UART_StopBits = enum {
    #pragma kcg C:enum_val 0 #end E_LIBBSP_UART_STOPBITS_TWO,
    #pragma kcg C:enum_val 1 #end E_LIBBSP_UART_STOPBITS_ONE
  };

type
  TE_LIBBSP_UART_RxErrorCode = enum {
    #pragma kcg C:enum_val 0 #end E_LIBBSP_UART_RX_OK,
    #pragma kcg C:enum_val 1 #end E_LIBBSP_UART_DEV_INVALID_ID,
    #pragma kcg C:enum_val 2 #end E_LIBBSP_UART_RX_STOP_ERROR,
    #pragma kcg C:enum_val 3 #end E_LIBBSP_UART_RX_PARITY_ERROR,
    #pragma kcg C:enum_val 4 #end E_LIBBSP_UART_RX_OVERFLOW_ERROR,
    #pragma kcg C:enum_val 5 #end E_LIBBSP_UART_RX_ROLLOVER_ERROR,
    #pragma kcg C:enum_val 6 #end E_LIBBSP_UART_RX_INCONSISTENT_ERROR,
    #pragma kcg C:enum_val 7 #end E_LIBBSP_UART_POST_KO
  };

type
  TE_LIBBSP_UART_TxErrorCode = enum {
    #pragma kcg C:enum_val 0 #end E_LIBBSP_UART_TX_OK,
    #pragma kcg C:enum_val 1 #end E_LIBBSP_UART_TX_INVALID_ID,
    #pragma kcg C:enum_val 2 #end E_LIBBSP_UART_TX_OVERFLOW_CMD,
    #pragma kcg C:enum_val 3 #end E_LIBBSP_UART_TX_OVERFLOW_FIFO
  };

type TA_LIBBSP_UART_RxBuffer = uint8^C_LIBBSP_UART_FIFO_SIZE;

const C_LIBBSP_UART_FIFO_SIZE : uint32 = 2048;

type
  TE_LIBBSP_A429_RxLine = enum {
    #pragma kcg C:enum_val 0 #end E_LIBBSP_A429_RX_1,
    #pragma kcg C:enum_val 1 #end E_LIBBSP_A429_RX_2,
    #pragma kcg C:enum_val 2 #end E_LIBBSP_A429_RX_3,
    #pragma kcg C:enum_val 3 #end E_LIBBSP_A429_RX_4,
    #pragma kcg C:enum_val 4 #end E_LIBBSP_A429_RX_5,
    #pragma kcg C:enum_val 5 #end E_LIBBSP_A429_RX_6,
    #pragma kcg C:enum_val 6 #end E_LIBBSP_A429_RX_7,
    #pragma kcg C:enum_val 7 #end E_LIBBSP_A429_RX_8,
    #pragma kcg C:enum_val 8 #end E_LIBBSP_A429_RX_9
  };

type TS_LIBBSP_IMU_Vect9 = float64^9;

type
  TS_LIBBSP_PLDMEG_IfCpuStatus = {
    parity_error : bool,
    addr_error : bool,
    acc_error : bool,
    timeout_error : bool,
    overload_error : bool,
    error_counter : uint8
  };

type
  TE_LIBBSP_MEGIT_CpuSyncSource = enum {
    #pragma kcg C:enum_val 0 #end E_LIBBSP_MEGIT_CPU_NO_SOURCE,
    #pragma kcg C:enum_val 1 #end E_LIBBSP_MEGIT_CPU_SYNC_APPL,
    #pragma kcg C:enum_val 2 #end E_LIBBSP_MEGIT_CPU_TIC_RDY,
    #pragma kcg C:enum_val 3 #end E_LIBBSP_MEGIT_CPU_RT_RDY,
    #pragma kcg C:enum_val 4 #end E_LIBBSP_MEGIT_CPU_IRQ_2KH_ALL,
    #pragma kcg C:enum_val 5 #end E_LIBBSP_MEGIT_CPU_IRQ_APPL_ALL,
    #pragma kcg C:enum_val 6 #end E_LIBBSP_MEGIT_CPU_IRQ_APPL_TIC,
    #pragma kcg C:enum_val 7 #end E_LIBBSP_MEGIT_CPU_RTC_8K,
    #pragma kcg C:enum_val 8 #end E_LIBBSP_MEGIT_CPU_NB_SOURCE
  };

type
  TE_LIBBSP_MEGIT_RsSyncSource = enum {
    #pragma kcg C:enum_val 0 #end E_LIBBSP_MEGIT_RS_NO_SOURCE,
    #pragma kcg C:enum_val 1 #end E_LIBBSP_MEGIT_RS_SYNC_100HZ,
    #pragma kcg C:enum_val 2 #end E_LIBBSP_MEGIT_RS_SYNC_APPL,
    #pragma kcg C:enum_val 3 #end E_LIBBSP_MEGIT_RS_RTC_IDA,
    #pragma kcg C:enum_val 4 #end E_LIBBSP_MEGIT_RS_RTC_2K,
    #pragma kcg C:enum_val 5 #end E_LIBBSP_MEGIT_RS_CPU_RTC,
    #pragma kcg C:enum_val 6 #end E_LIBBSP_MEGIT_RS_NB_SOURCE
  };

type
  TE_LIBBSP_MEGIT_ItStatus = enum {
    #pragma kcg C:enum_val 0 #end E_LIBBSP_MEGIT_IT_SOURCE_INVALID,
    #pragma kcg C:enum_val 1 #end E_LIBBSP_MEGIT_IT_SOURCE_VALID
  };

type
  TE_LIBBSP_A429_RxErrorCode = enum {
    E_LIBBSP_A429_RX_OK,
    E_LIBBSP_A429_RX_INVALID_ID,
    E_LIBBSP_A429_RX_ROLLOVER,
    E_LIBBSP_A429_RX_PARITY_ERROR,
    E_LIBBSP_A429_RX_GAP_ERROR,
    E_LIBBSP_A429_RX_FORMAT_ERROR,
    E_LIBBSP_A429_RX_TOO_MANY_LABELS,
    E_LIBBSP_A429_RX_INCONSISTENT_ROLLOVER,
    E_LIBBSP_A429_POST_KO
  };

type TE_LIBBSP_PQRFS_Error = enum { E_LIBBSP_PQRFS_KO, E_LIBBSP_PQRFS_OK };

type
  TE_LIBBSP_PQRFS_Cycle = enum {
    E_LIBBSP_PQRFS_Cycle1,
    E_LIBBSP_PQRFS_Cycle2,
    E_LIBBSP_PQRFS_Cycle3,
    E_LIBBSP_PQRFS_Cycle4
  };

type
  TE_LIBBSP_PQRFS_Label_PLD = enum {
    E_LIBBSP_PQRFS_Label0,
    E_LIBBSP_PQRFS_Label1,
    E_LIBBSP_PQRFS_Label2,
    E_LIBBSP_PQRFS_Label3,
    E_LIBBSP_PQRFS_Label4,
    E_LIBBSP_PQRFS_Label5,
    E_LIBBSP_PQRFS_Label6,
    E_LIBBSP_PQRFS_Label7,
    E_LIBBSP_PQRFS_Label8,
    E_LIBBSP_PQRFS_Label9,
    E_LIBBSP_PQRFS_Label10,
    E_LIBBSP_PQRFS_Label11,
    E_LIBBSP_PQRFS_Label12
  };

type
  TE_LIBBSP_PQRFS_Line = enum {
    E_LIBBSP_PQRFS_Line1,
    E_LIBBSP_PQRFS_Line4,
    E_LIBBSP_PQRFS_NbLine
  };

type
  TS_LIBBSP_PQRFS_Status_data = {
    label_err_13 : uint32,
    label_err_12 : uint32,
    label_err_11 : uint32,
    label_err_10 : uint32,
    label_err_9 : uint32,
    label_err_8 : uint32,
    label_err_7 : uint32,
    label_err_6 : uint32,
    label_err_5 : uint32,
    label_err_4 : uint32,
    label_err_3 : uint32,
    label_err_2 : uint32,
    label_err_1 : uint32
  };

type
  TS_LIBBSP_PQRFS_Status = {
    data : TS_LIBBSP_PQRFS_Status_data,
    status : uint32
  };

type
  TS_LIBBSP_PQRFS_LabelConfig = {
    min : float32,
    max : float32,
    msb : int32,
    lsb : int32,
    q_value : float32,
    label_id : int32,
    label_index : uint32
  };


/* xscade source: ..\LIBBSP_TYPE\DummyForGeneration.xscade */
function DummyForGeneration() returns ()
let
tel

/* $********** SCADE Suite KCG 32-bit 6.6 (build i19) ***********
** -
** Generation date: 2023-02-08T15:08:48
*************************************************************$ */
